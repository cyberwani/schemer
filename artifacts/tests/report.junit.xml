<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="116.464857">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.040201">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.040201"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.052303">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.052303"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.060889">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.052056">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.029677"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.008559"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.013820"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.008833">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.008833"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.014782">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.014782">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.004556"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.005443"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.004783"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.450491">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.450491">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.067365"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.043016"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.037428"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.043417"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.032044"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.032691"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.033097"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.032133"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.030569"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.031104"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.033136"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.034492"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.067638">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.022266"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.019140"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.026232"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="6.293399">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.677989">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.071256"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.097314"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.071611"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.063227"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.088789"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.066250"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.110670"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.108872"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.280497">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.088749"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.082742"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.109006"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="2.977781"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="2.138845"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.068398"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.077325"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.072564"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.632853">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.632853">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.066567"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.082165"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.070185"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.069427"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.061692"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.063914"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.061848"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.085641"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.071413"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.146059">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.146059">
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.107858"/>
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.038201"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.407104">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.023945">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.007105"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.005669"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.005597"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.005574"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.021712">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.006468"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.005318"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.005001"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.004925"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.019587">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004549"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004481"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.004630"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.005927"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.187553">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.012492"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.007937"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.008140"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.007990"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.008375"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.008556"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.011802"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.014236"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.008754"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.008372"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.007943"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.008656"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.009089"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.008878"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.005989"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.009986"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.008191"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.006852"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.008417"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.009896"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.007002"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.046106">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.009410"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.009403"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.008746"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.009989"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.008558"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.007505"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.007396"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.011086"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.012402"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.010375"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.009836"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.010041"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.006985"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.007022"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.008203"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.010460"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.006890"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="3.648479">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.209531">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.006459"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.007587"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.007951"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.006796"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.007251"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.006173"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.006357"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.006020"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.005976"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.007473"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.007605"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.008673"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.008273"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.007691"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.007775"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.008657"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.005670"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.005805"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.005796"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.007092"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.007834"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.006756"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.007258"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.006603"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.006066"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.007589"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.005879"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.006466"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.007319"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.006680"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.049318">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.007514"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.006836"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.007893"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.005951"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.007111"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.007646"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.006367"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.035953">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.005164"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.005190"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.004701"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.005054"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.004987"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.005484"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.005373"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.020270">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.005140"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.005154"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.005012"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.004964"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.024446">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.006476"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.006049"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.005872"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.006049"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.020832">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.005174"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.005080"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.005031"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.005547"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.009691"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.044366">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.007113"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.005889"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.008070"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.004798"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.006863"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.006734"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.004899"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.041179">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.006260"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.005001"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.007076"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.004803"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.006878"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.006279"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.004882"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.044571">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.006959"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.005769"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.007223"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.005067"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.006995"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.007596"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.004962"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.046848">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.006384"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.005551"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.006866"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.005277"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.007137"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.008577"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.007056"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.046385">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.008534"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.005825"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.006937"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.005476"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.006985"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.006910"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.005718"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.041896">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.007074"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.005026"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.006440"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.004862"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.006378"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.006404"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.005712"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.018207"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.040757">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.006547"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.005207"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.006376"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.005100"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.006357"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.006300"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.004870"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.007266"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.040261">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.005653"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.005453"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.005480"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.005384"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.005745"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.006784"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.005762"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.026982">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.005255"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.005623"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.005224"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.005691"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.005189"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.164301">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.006219"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.005930"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.006052"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.006124"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.006745"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.007098"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.007000"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.006914"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.007065"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.007041"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.007023"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.007140"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.006711"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.008175"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.007084"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.007196"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.007084"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.007049"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.006587"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.006786"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.006848"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.006796"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.006877"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.006758"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.025737">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.008260"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.008998"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.008479"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.006585"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.018941">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.006466"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.006479"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.005996"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.185509">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.005183"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.006314"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.006514"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.005045"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.005046"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.005079"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.005042"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.005002"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.005071"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.006302"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.006764"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.006824"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.006954"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.007627"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.006867"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.006412"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.005087"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.005470"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.006077"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.006994"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.006965"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.005970"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.006734"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.005859"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.006451"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.008822"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.007057"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.005983"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.006374"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.005620"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.027712">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.005428"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.005579"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.005416"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.005474"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.005815"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.027304">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.006961"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.006535"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.006639"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.007169"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.041976">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.006742"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.007324"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.006765"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.006868"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.006941"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.007336"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.044134">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.007572"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.006635"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.006311"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.006651"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.006400"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.005306"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.005259"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.026216">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.005673"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.005290"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.005156"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.005119"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.004978"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.154292">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.006959"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.005732"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.005543"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.005729"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.006387"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.006232"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.006206"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.006367"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.006561"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.006266"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.006140"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.006186"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.006347"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.006155"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.007485"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.006110"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.006262"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.006147"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.005249"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.006188"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.006551"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.007183"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.007456"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.008851"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.026904">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.010001"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.008862"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.008041"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.058147">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.005024"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.004841"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.005924"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.006407"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.005909"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.005252"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.004944"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.004954"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.005043"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.004906"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.004943"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014947">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.005032"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.005066"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.004849"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.067446">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.005851"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.008293"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.005927"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.005806"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.005831"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.006715"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.005907"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.005906"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.005705"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.005826"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.005679"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.018838">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.005844"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.006372"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.006622"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.024408">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.004931"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.004965"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.004922"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.004776"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.004814"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.026819">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.005066"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.005037"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.004948"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.005650"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.006118"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.031167">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.006368"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.006004"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.006906"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.006273"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.005616"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.029396">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.005547"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.006499"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.005807"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.005602"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.005941"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.039732">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.005029"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.004811"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.004897"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.005053"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.005004"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.004850"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.005007"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.005081"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.015130">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.004911"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.005123"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.005096"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.050598">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.005623"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.005944"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.006492"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.006182"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.007057"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.006461"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.006766"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.006073"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.019171">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.005771"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.007445"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.005955"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.025639">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.005833"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.004813"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.004887"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.005210"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.004896"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.040242">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.004888"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.004845"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.004772"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.004709"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.005834"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.005655"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.004825"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.004714"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.389448">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.006961"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.010415"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.010331"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.009928"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.010185"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.009747"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.010439"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.009889"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.009989"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.010533"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.010087"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.010238"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.009924"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.010253"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.010651"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.010375"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.010033"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.009784"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.009766"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.010495"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.009871"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.009751"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.009736"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.010426"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.010119"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.012292"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.009928"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.010016"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.009947"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.010588"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.010692"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.009814"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.009697"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.010435"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.010156"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.010074"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.009563"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.010032"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.006289"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.011464">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.005841"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.005623"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.149389">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.007671"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.008212"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.009472"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.007382"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.008382"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.007450"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.008510"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.007635"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.007651"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.006822"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.007373"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.007276"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.006789"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.007147"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.006640"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.006618"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.006860"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.009335"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.012165"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.395634">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.007472"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.010204"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.010247"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.009759"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.010035"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.009485"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.010630"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.011728"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.011071"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.010451"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.010334"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.011193"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.010361"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.010061"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.010813"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.009980"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.010116"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.010372"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.011226"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.010884"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.010423"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.010482"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.010534"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.009720"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.010029"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.010068"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.010072"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.009734"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.009412"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.009652"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.009836"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.010142"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.011288"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.010395"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.010245"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.009920"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.009890"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.010815"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.006556"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.012069"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.074862">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.011903"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.014281"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.012928"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.012256"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.011620"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.011874"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.550986">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.016956"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.019575"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.020109"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.017104"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.016720"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.016714"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.016378"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.016333"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.015629"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.020544"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.019250"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.019576"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.021464"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.020095"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.019946"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.020423"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.016832"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.016993"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.015994"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.019033"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.020623"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.023069"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.021113"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.015758"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.016703"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.019948"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.016965"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.017694"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.016600"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.016844"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.026803">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.005533"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.005282"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.005529"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.005262"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.005197"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.057772">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.004724"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.004714"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.006000"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.004626"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.004889"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.004942"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.004918"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.009047"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.008543"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.005369"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="104.372771">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="104.372771">
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.109324"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.093404"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.105297"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.151878"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.139119"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.135639"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.098823"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.100417"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.105364"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.102054"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.093238"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.096936"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.107866"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.104450"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.110745"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.117258"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.102615"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.098334"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.131939"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.099056"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.098846"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.100349"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.101012"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.278189"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.278774"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.276590"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.140677"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.143174"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.180182"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.167281"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.164241"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.169638"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.166470"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.168707"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.155139"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.174591"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.180152"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.165836"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.159879"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.172857"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.165498"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.166360"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.164360"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.173254"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.161789"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.140738"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.156691"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.156942"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.148323"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.167174"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.143387"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.133572"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.130075"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.179735"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.217893"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.191162"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.136952"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.131067"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="7.369606"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="9.241206"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="9.222883"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="7.373008"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="7.441552"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="7.490540"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="9.633925"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="8.888354"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="7.173265"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="7.291371"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.098157"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.097164"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.093427"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.105897"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.102160"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.108328"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.109041"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.106912"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.110963"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.111051"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.113075"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.118652"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.096259"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.096401"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.111179"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.111833"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.098937"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.104079"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.113615"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.103244"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.104934"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.104835"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.104472"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.090069"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.096223"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.140112"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.151601"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.148215"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.142905"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.150875"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.199094"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.189762"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.180419"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.198782"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.171307"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.166656"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.157105"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.174092"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.157895"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.156828"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.162548"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.167560"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.100153"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.105830"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.101003"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.116668"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.108773"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.111408"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.104593"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.105685"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.106401"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.095810"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.110825"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.109236"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.109704"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.152659"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.230245"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.220126"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.449039"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.398529"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.496494"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.192383"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.196228"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.152774"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.163615"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.237841"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.251815"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.114089"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.108690"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.114482"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.129115"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.134080"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.134586"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.112781"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.110582"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.106442"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.086963"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.095294"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.111769"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.112233"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.108736"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.102567"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.103283"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.106730"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.259969"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.266358"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.264923"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.126612"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.126536"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.206080"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.199079"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.210844"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.243844"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.233483"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.145181"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.150010"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.247096"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.208811"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.230182">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.230182">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.043630"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.041114"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.031425"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.040950"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.042509"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.030554"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.006227">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.006227"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.035175">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.006026"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.007708"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.006664"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.006820"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.007957"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.006305">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.006305"/>
    </testsuite>
  </testsuite>
</testsuites>

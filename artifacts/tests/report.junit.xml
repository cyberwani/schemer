<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="742" assertions="804" failures="0" errors="0" time="65.726742">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.020288">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.020288"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.028895">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.028895"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.034837">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.030085">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.015863"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005793"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.008429"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.004752">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.004752"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.009314">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.009314">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003008"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003112"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003194"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.191109">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.191109">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.034130"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.017161"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.014089"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.013869"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.014032"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.013860"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.013901"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.014617"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.013779"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.013850"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.013922"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.013900"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.036819">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.012560"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.010357"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.013902"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.528986">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.354074">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.038030"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.040862"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.040107"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.033982"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.048616"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.035903"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.061299"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.055275"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.148436">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.049748"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.044954"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.053734"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.776576"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.144259"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.033832"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.036522"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.035288"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.294623">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.294623">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.028887"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.035801"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.029534"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.031393"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.028759"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.030684"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.030270"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.039616"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.039679"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.095966">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.095966">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.022689"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.073277"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.324584">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.019767">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.005554"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.004698"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.004738"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.004777"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.018939">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.005635"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.004432"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.004456"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.004416"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.016068">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004194"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003922"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003957"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003995"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.153155">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.010485"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.006570"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.006947"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.007139"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.007059"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.006828"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.010037"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.010563"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.007486"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.007235"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.006737"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.007364"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.007101"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.007022"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.005112"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.007952"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.006524"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.005636"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.006613"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.007227"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.005518"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.034000">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.006745"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.006728"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.006735"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.006675"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.007117"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.006110"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.006107"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.008393"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.008416"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.007961"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.007881"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.007483"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.005717"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.006060"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.006599"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.006360"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.005568"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.402921">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.145528">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.005429"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.006052"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.006414"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004875"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004997"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004985"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004847"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004860"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004997"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005422"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005130"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005262"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005653"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005040"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005468"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004795"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004029"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004470"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.003895"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.005382"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004854"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004103"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004696"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.003948"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004020"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005393"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004137"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004301"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004024"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004050"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.035714">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.004857"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004552"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005964"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004651"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005737"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.005607"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004346"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.026082">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003980"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003916"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003693"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003809"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003577"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003537"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003570"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013355">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003340"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003338"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003371"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003306"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.016187">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004124"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.003844"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.003944"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004275"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013697">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003472"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003403"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003370"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003452"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.006077"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.028609">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004832"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.003789"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.004498"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003228"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004485"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004510"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003267"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.029140">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004517"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003313"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004780"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003638"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004894"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004520"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003478"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.029287">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.004680"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003980"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004739"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003547"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004727"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.004415"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003199"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.027666">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004145"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003577"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004088"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003499"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004975"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004033"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003349"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.029754">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004584"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004032"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004512"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003659"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004547"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004706"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003714"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.029536">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004577"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003573"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004689"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003531"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004540"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004483"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.004143"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.010790"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.029977">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.005081"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003839"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004678"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003606"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004581"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004580"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003612"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.005335"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.029793">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004090"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004070"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004070"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004117"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004462"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004401"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004583"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.021165">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.004201"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.004267"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.004251"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.004203"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.004243"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.128542">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004638"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004316"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004005"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.003969"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004428"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004531"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004784"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004907"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004956"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004886"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.005664"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.006216"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.005915"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.005912"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.005955"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.005909"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.005764"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.005811"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.005479"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.005845"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.005759"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.006354"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.006348"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.006191"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.023659">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.007768"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.008209"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.007682"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.005978"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.016540">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.005542"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.005446"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.005552"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.143594">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.004989"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.006011"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.006296"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.004855"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.004930"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.004899"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.004803"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.004832"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.004751"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.005931"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.006155"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.006072"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.006139"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.006348"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.006154"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.006191"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.004128"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003808"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003685"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004647"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004547"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003440"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003865"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003310"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003300"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004736"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003756"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003789"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003596"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003631"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.017162">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003302"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003510"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003464"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003402"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003484"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013252">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003142"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003205"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003444"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003461"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.020230">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003891"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003508"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003435"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003169"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003123"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003104"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.023879">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003243"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003297"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003406"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.004144"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003241"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003372"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003176"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.015943">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003438"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003112"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003130"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003094"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003169"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.095836">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003511"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003431"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003469"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003386"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.003972"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.003977"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004247"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004338"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.004326"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004343"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004294"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004249"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004270"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004269"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004259"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004271"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004207"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003945"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003506"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.004125"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003915"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003958"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.003825"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.003744"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.015912">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005123"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005394"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005395"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.037516">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003266"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003158"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003412"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003544"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003416"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003434"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003515"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003494"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003346"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003478"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003454"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009988">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003471"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003399"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003118"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.044121">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003709"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003982"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004021"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.004072"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.004065"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.004077"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.004066"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.004027"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.004011"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.004032"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.004059"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012218">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.004117"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.004107"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003994"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017153">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003339"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003417"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003466"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003516"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003415"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.016550">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003417"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003166"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003233"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003301"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003433"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019065">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004021"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003747"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.003945"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003672"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003680"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018579">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003714"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003789"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003729"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003660"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003687"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.026446">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003195"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003167"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003238"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003478"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003401"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003438"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003422"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003107"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010453">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003462"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003489"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003502"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.030041">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003999"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003962"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.004005"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003693"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003550"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003603"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003663"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003566"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011736">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003660"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003971"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.004105"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.015974">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003044"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003142"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003330"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003254"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003204"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.026250">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003245"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003437"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003479"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003111"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003182"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003097"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003239"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003460"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.251010">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004453"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006883"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006874"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006873"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006782"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.006449"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006999"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.007111"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006701"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006564"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006426"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006638"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006245"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006551"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006729"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006346"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006320"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006727"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006391"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006190"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006193"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006236"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006280"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006194"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006479"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006787"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006644"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006792"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006903"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006831"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006592"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006332"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006297"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006705"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006393"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006333"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006262"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006395"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.004111"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007848">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003914"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003934"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.089491">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.005013"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005276"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005481"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004626"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.004695"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004506"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.004981"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.004549"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004468"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004253"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004277"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004344"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004453"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004193"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004247"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004205"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004155"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005753"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.006016"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.246429">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004026"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006293"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006269"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006254"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006200"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.005983"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006354"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006414"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006492"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006451"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006725"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006640"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006330"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006497"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006672"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006313"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006326"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006296"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006607"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006531"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006299"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006286"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006408"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006357"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006658"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006376"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006401"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006614"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006588"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006447"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006349"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006299"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006524"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.007024"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006902"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006478"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006386"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006322"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004038"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.007706"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.043931">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.007202"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.007163"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.007888"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.007675"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.006976"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.007027"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.355354">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.016669"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.011982"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.012902"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.011105"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.010545"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.010303"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.011094"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.011116"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.010790"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.012724"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.012944"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.012960"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.013150"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.014595"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.013690"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.013463"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.011675"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.011672"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.010687"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.012023"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.012087"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.010307"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.011375"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.010140"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.010277"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.012723"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.010312"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.010635"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.010788"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.010620"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.017776">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003580"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003551"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003671"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003501"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003473"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.039066">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003612"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003277"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004223"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003308"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003235"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003400"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003404"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005444"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005695"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003468"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="58.594393">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="58.594393">
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.064168"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.056592"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.056369"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.070290"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.071426"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.139980"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.139675"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.141129"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.075535"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.234569"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.199926"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.221820"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.086272"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.089465"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.122540"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.122736"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.101004"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.103614"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.130926"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.126472"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.110903"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.100393"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.090227"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.095949"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.096235"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.094887"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.090041"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.095632"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.100049"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.099268"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.094553"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.099005"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.099280"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.099500"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.094633"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.098885"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.114591"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.109989"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.109757"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.114201"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.086601"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.085009"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.085219"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.086519"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.057468"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.056923"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.055270"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.074499"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.072088"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.096542"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.096756"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.097032"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.051303"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.052485"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.061020"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.077531"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.058574"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.085291"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.083092"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.085166"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.090362"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.088155"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.083910"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.089313"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.088121"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.089743"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.083703"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.088844"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.059925"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.981158"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.373750"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.246148"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.152282"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.000019"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.325601"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.378455"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.193097"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.172885"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.059044"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.056751"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.057527"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.063719"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.062756"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.063546"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.063171"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.063227"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.062100"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.062799"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.062800"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.065441"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.065170"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.065275"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.065203"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.065348"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.089793"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.056925"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.058023"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.063630"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.063213"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.063613"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.063477"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.058829"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.058744"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.053984"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.059692"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.061891"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.059284"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.057653"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.056957"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.057200"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.071616"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.072306"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.072438"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.054873"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.055140"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.050733"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.051050"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.052339"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.052610"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.051375"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.051766"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.057453"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.056937"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.058678"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.054278"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.051785"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.053769"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.053762"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.054129"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.054861"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.094802"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.061190"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.061923"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.056916"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.056988"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.056972"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.070969"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.071206"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.142991"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.143233"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.143392"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.077922"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.080713"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.107649"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.112046"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.129474"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.127238"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.114202"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.105317"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.113959"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.072168"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.071319"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.071677"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.058581"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.057868"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.057750"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.058337"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.070689"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.070076"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.071278"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.060263"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.059997"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.061009"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.087835"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.082996"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.082420"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.164005">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.164005">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.024021"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.059199"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.016084"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.023226"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.024157"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.017318"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

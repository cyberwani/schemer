<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="742" assertions="804" failures="0" errors="0" time="61.284240">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.020193">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.020193"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.028796">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.028796"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.032116">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.027442">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.014711"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005138"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.007593"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.004674">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.004674"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.008442">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.008442">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.002728"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.002822"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.002892"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.185203">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.185203">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.032709"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.016701"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.013859"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.013556"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.013567"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.013562"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.013524"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.013593"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.013530"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.013539"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.013539"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.013524"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.036056">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.012488"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.010145"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.013423"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.072838">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.341072">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.036910"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.038087"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.038022"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.033020"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.047647"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.035167"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.059067"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.053152"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.138133">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.046169"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.041685"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.050279"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.468295"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.019236"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.033733"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.036773"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.035596"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.273153">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.273153">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.029005"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.032521"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.029087"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.029762"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.029058"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.030533"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.029612"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.034712"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.028863"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.070464">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.070464">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.017263"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.053201"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.246161">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015366">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004660"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003606"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003541"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003559"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014059">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004006"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003297"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003338"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003418"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012522">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003383"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003088"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003021"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003030"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.115517">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.007759"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005005"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005207"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005111"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005078"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005374"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.007411"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.007535"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005352"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005359"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.004917"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005386"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005435"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.005545"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.003844"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006167"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005235"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004319"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005646"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005389"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004443"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.026000">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005257"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005263"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005283"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005148"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005049"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004474"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004661"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006263"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006427"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006239"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006249"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.005964"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004471"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004454"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.004734"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.004658"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004103"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.212972">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.127479">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.003878"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.004545"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005577"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.003779"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.003765"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.003710"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.003801"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.003843"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.003748"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.004492"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.004886"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.004648"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.004693"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.004905"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005618"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.005279"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.003786"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.003893"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.003763"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004520"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004615"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.003733"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004214"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.003779"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.003809"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.004663"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.003854"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.003942"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.003972"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.003770"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.030096">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.004656"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.003834"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.004799"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.003733"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004636"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004509"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.003929"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.024508">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003539"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003470"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003536"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003529"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003476"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003550"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003408"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013344">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003366"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003335"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003328"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003315"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015774">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004197"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.003852"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.003855"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.003870"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013476">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003403"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003411"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003399"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003263"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.005698"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.028136">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004480"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.003747"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.004551"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003251"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004576"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004430"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003101"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.026687">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004055"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003324"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004705"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003241"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004021"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004072"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003269"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.028392">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.004594"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003765"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004637"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003247"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004436"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.004450"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003263"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.026314">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004063"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003334"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004087"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003143"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004418"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.003990"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003279"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.029088">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004492"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.003794"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004505"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003609"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004435"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004567"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003686"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.026457">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004635"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003339"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004116"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003177"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004023"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004017"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003150"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.008699"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.026194">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004221"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003285"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004166"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003228"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.003998"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004052"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003244"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.004720"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.025114">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.003593"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.003599"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003581"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.003601"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003593"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003523"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.003624"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.016756">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003426"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003391"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003369"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003297"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003273"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.101600">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.003881"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.003882"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004005"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.003998"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004332"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004510"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004343"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004338"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004339"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004468"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004243"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004438"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004252"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004261"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004368"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004250"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004368"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004262"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.003870"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004144"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004253"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004253"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004268"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004274"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.015837">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005150"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005639"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005048"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004048"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.011055">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.003718"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003609"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.003728"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.108679">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003350"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.003997"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004135"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003250"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003294"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003268"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003192"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003259"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003243"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004030"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004232"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004089"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004238"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004204"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004087"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004067"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003247"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003305"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003205"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004170"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004061"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003249"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003671"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003262"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003234"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004116"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003328"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003347"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003262"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003285"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.016410">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003317"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003280"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003241"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003286"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003286"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012390">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003118"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003132"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003088"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003052"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.018106">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003105"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003123"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003058"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.002966"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.002899"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.002955"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.021560">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003113"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003108"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003087"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003092"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003081"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003083"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.002996"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.015000">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003018"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.002996"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003013"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.002993"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.002980"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.088284">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003241"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003340"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003389"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003407"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.003817"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.003837"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.003817"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.003785"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.003819"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.003830"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.003756"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.003711"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.003763"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.003765"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.003675"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.003773"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003746"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003750"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003274"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003761"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003745"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003762"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.003770"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.003752"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014992">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.004920"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005100"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.004972"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.033971">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003157"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003124"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003089"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003109"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003113"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003094"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003022"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003110"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003039"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003062"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003052"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009081">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003018"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003036"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003027"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.039198">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003739"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003565"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003484"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003536"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003555"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003558"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003576"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003501"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003559"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003546"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003579"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010956">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003703"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003633"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003620"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015297">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003040"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.002910"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003108"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003124"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003115"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015491">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003090"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003051"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003184"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003127"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003038"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018346">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.003631"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003635"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.003793"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003664"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003623"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018059">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003568"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003588"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003684"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003593"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003626"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.024670">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003184"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003121"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003070"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.002933"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003132"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003181"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003119"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.002930"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009328">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003086"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003125"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003117"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.030669">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003580"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003592"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003569"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003564"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003564"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.005056"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.004153"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003591"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010974">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003661"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003645"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003668"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.015739">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003209"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003109"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003144"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003175"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003102"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.025084">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003189"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003112"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003155"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003105"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003096"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003160"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003093"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003174"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.243702">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.003995"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.007094"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006688"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006746"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006432"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.006005"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006830"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006412"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006465"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006360"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006420"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006507"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006223"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006200"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006400"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006240"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006473"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006313"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006257"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006240"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006245"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006246"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006232"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006251"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006279"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006294"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006182"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006220"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006240"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006337"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006381"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006400"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006472"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006361"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006368"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006269"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006261"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006323"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.004040"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007422">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003704"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003718"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.087871">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.004998"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005220"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005473"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004489"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.004575"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004535"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005000"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.004592"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004235"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004315"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004391"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004340"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004155"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004250"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004184"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004247"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004086"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005268"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005518"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.243366">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004129"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006338"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006317"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006305"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006215"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.005976"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006301"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006380"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006419"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006408"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006398"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006499"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006343"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006332"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006522"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006264"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006316"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006316"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006308"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006294"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006310"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006298"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006342"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006471"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006476"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006531"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006283"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006279"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006353"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006335"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006377"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006472"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006431"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.006381"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006332"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006446"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006478"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006348"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004043"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.007661"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.041908">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.007185"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.007126"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.007000"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.007132"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.006692"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.006773"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.344453">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.010277"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.011720"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.011842"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.009968"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.010035"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.011180"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.010555"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.010215"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.009989"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.011822"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.011923"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.012173"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.012104"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.013319"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.013196"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.013051"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.011096"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.011267"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.011251"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.013139"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.013397"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.011341"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.012644"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.009679"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.009708"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.011928"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.010613"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.013203"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.011711"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.010107"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.017245">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003478"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003427"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003424"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003416"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003500"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.037587">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003226"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003148"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.003921"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003197"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003151"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003148"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003150"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.006020"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005333"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003293"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="54.957733">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="54.957733">
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.076308"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.070253"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.093601"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.090378"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.091580"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.087044"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.087202"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.083390"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.085972"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.090985"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.116350"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.082839"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.086231"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.055959"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.055909"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.055881"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.083331"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.085026"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.078918"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.099373"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.084649"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.082773"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.079178"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.083632"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.065670"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.065597"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.066853"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.732783"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.793874"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="4.754023"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="3.798108"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.962376"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.867666"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="4.884139"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.922946"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="3.774823"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.887188"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.121283"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.118563"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.087891"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.089318"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.222834"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.201825"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.224474"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.121119"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.122329"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.073203"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.100017"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.101760"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.081395"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.083129"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.083032"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.057212"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.056643"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.056907"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.057105"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.053157"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.051014"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.051023"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.082058"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.058324"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.058334"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.058502"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.058610"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.053503"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.052300"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.050788"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.056342"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.055443"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.055934"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.057397"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.057949"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.056503"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.058480"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.056866"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.077992"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.079856"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.127639"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.123686"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.111484"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.103742"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.115002"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.112068"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.114730"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.089984"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.088777"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.089373"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.063968"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.060433"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.063442"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.061355"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.059736"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.059941"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.092277"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.093907"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.114920"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.090319"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.093476"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.092688"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.080999"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.090314"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.055325"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.056802"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.056702"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.061662"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.062618"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.062049"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.061196"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.054665"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.052062"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.053109"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.057533"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.057759"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.057915"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.057927"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.058544"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.058939"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.053322"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.056771"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.062528"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.062368"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.065073"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.070566"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.068665"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.068390"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.078448"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.078300"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.157837"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.147535"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.157698"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.078898"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.112858"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.156509"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.155835"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.153548"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.053792"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.055076"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.054642"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.056430"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.059590"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.059469"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.072901"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.073588"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.071245"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.051249"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.057135"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.061834"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.057086"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.056053"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.056813"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.057111"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.059024"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.057923"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.059108"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.059523"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.078439"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.078030"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.078095"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.088509"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.085769"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.083544"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.080905"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.107784"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.103742"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.103648"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.112238"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.140113">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.140113">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.027819"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.027304"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.017749"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.024209"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.024628"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.018404"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="77.878197">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.027292">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.027292"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.036150">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.036150"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.040254">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.034405">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.018029"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.006700"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.009676"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.005849">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.005849"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.011488">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.011488">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003739"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003790"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003959"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.314099">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.314099">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.047561"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.027005"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.023348"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.022958"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.023491"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.023268"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.023371"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.023315"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.029710"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.023356"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.023325"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.023391"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.049184">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.017038"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.013867"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.018279"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.907892">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.465650">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.049724"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.052076"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.051618"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.044184"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.063965"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.047959"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.083931"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.072193"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.183354">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.059399"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.055382"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.068573"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.822845"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.299712"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.043470"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.046353"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.046508"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.384043">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.384043">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.040875"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.045675"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.041266"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.042797"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.041374"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.043153"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.041202"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.047796"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.039904"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.102873">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.102873">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.025650"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.077223"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.395267">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.019976">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.005915"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.004575"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.004544"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.004942"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.027810">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.007090"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.007313"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.007366"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.006041"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.019955">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.005388"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.005552"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.005200"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003815"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.191892">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.010223"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.006502"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.007086"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.011198"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.009374"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.010659"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.015755"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.014931"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.009016"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.007103"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.007388"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.008991"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.010809"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.010604"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.005357"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.011828"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.008378"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.006035"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.006973"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.007738"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.005944"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.038987">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.007960"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.008060"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.007905"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.007510"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.007552"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.006923"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.006587"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.008824"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.008960"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.008941"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.009276"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.009400"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.008380"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.007328"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.007645"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.007749"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.006633"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.851242">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.184467">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.005713"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.006962"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.006955"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.006481"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.005651"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.005862"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.006351"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.006743"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.005221"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.006657"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.006886"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.006657"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.006759"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.006988"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.006787"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.006716"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.006385"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.005565"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.005204"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.006481"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.006755"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.005634"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.005876"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.005723"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.005582"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.006402"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004954"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.005716"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.005371"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.005430"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.043584">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.006443"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.005598"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.006833"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004972"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.008966"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.005895"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004877"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.031355">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.004493"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.004466"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.004469"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.004483"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.004468"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004491"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.004485"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.016851">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.004273"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.004211"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.004190"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.004177"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.020127">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.005365"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.004916"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.004920"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004926"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.017255">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.004357"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.004306"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.004287"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.004305"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.007499"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.035988">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005762"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004781"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005830"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.004060"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.005724"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.005718"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.004113"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.034005">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.005225"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.004218"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.005862"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.004069"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.005348"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.005155"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.004128"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.036318">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.005827"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.004831"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.005873"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.004130"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.005761"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005752"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.004144"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.034348">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.005263"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.004222"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.005325"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.004367"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.005795"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.005224"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.004152"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.038848">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.005832"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.005570"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.005978"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.004901"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.005862"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.005850"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.004855"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.034516">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.005917"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.004330"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.005342"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.004163"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.005251"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.005288"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.004225"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.011321"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.033959">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.005445"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.004281"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.005408"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.004168"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.005187"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.005256"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.004215"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.006682"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.035228">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.005378"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004953"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004704"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004945"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004787"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.005648"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004813"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.022401">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.004606"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.004480"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.004430"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.004424"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.004461"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.133891">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.005248"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.005055"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.005002"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.005062"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005646"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.005673"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.005792"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.005618"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.005672"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.005683"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.005513"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.005524"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.005772"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.005648"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.005735"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.005700"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.006278"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.005684"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.005119"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.005680"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.005631"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.005754"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.005719"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.005682"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.021179">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.006925"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.007390"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.006864"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.005335"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.014938">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.004913"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.004931"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.005094"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.145634">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.004378"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.005339"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.005586"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.004194"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.004216"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.004222"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.004311"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.004305"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.004173"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.005599"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.005449"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.005707"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.005453"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.005522"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.005391"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.005372"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.004148"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.004361"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.004351"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.005939"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.005528"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.004208"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.004786"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.004166"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.004757"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.006046"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.004836"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.004486"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.004354"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.004452"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.021441">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.004324"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.004223"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.004360"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.004254"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.004279"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015934">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.004002"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003982"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003978"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003972"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.023885">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003993"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003992"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003963"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003970"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.004014"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003953"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.027832">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003980"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003989"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003956"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.004003"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003945"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003963"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003996"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.019998">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003981"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003978"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.004001"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004053"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003985"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.116023">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.004503"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.004353"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.004365"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.004403"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.005000"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004952"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004971"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004993"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.005079"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.005007"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004938"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004889"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004915"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004882"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004891"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004871"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004872"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.005153"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.004398"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.004885"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.004981"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.004869"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004944"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004909"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.019400">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.006350"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.006789"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.006261"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.044234">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.004223"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003983"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.004064"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003993"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.004013"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.004007"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.004097"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003983"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003967"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003952"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003952"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011961">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003956"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003986"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.004019"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.051016">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.004635"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.004601"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004586"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.004642"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.004647"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.004616"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.004725"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.004543"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.004656"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.004704"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.004661"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.015119">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.004822"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.005146"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.005151"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.023272">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.004185"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.005022"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.005139"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.004527"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.004399"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.021609">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.004413"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.004339"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.004217"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.004266"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.004374"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.024383">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.005155"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.004767"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004937"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004773"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004751"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.023326">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.004660"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.004670"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.004642"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.004711"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.004643"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.032566">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.004037"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003982"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.004041"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.004011"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.004058"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.004028"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.004142"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.004267"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012436">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.004053"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.004141"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.004242"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.038314">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.005033"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.004715"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.004677"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.004648"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.004889"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.004767"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.004705"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.004880"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014417">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.004849"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.004798"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.004770"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.020472">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.004018"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.004027"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.004267"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.004081"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.004079"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.033160">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.004212"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.004149"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.004089"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.004087"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.004194"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.004254"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.004132"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.004044"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.307245">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.005188"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.008125"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.007887"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.008033"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.008086"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.007555"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.008196"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.008624"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.008415"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.008156"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.008036"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.008626"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.007872"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.007814"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.008073"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.007850"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.007811"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.007848"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.007856"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.007986"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.007918"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.008069"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.008066"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.008146"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.008062"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.008018"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.008037"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.007895"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.007913"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.007885"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.008902"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.007819"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.007862"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.007834"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.007870"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.007939"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.007900"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.008001"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.005072"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.009461">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004770"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.004691"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.110987">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.006235"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.006517"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.006797"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.005619"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005859"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.005683"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.006353"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005825"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.005547"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.005451"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.005531"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.005491"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.005312"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.005404"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.005341"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.005273"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.005138"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.006669"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.006942"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.306630">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.005149"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.008099"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.008038"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.008141"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.007896"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.007463"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.008045"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.008083"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.008115"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.008106"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.008066"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.008223"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.007896"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.007930"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.008240"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.007907"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.007919"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.008006"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.007981"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.007950"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.007917"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.008105"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.008138"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.008142"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.008102"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.008019"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.007877"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.007797"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.007940"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.007983"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.008006"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.007946"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.008040"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.007950"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.007953"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.008032"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.008204"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.008073"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.005153"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.009575"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.052522">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.008997"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.008887"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.008879"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.008859"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.008412"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.008488"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.408639">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.012735"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.014582"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.014927"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.012581"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.012714"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.012758"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.012696"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.012755"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.012526"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.014759"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.015008"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.014827"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.015125"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.015222"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.015335"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.015021"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.012578"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.012800"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.012582"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.014606"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.014910"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.012484"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.013712"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.012497"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.012619"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.015061"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.012828"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.012930"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.013021"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.012440"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.022302">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.004426"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.004416"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.004636"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.004390"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.004434"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.047353">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.004117"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.004054"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.005124"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.004062"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.004073"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.004070"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.004107"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.006620"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.006879"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.004247"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="69.545054">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="69.545054">
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.120354"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.108087"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.112030"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.091730"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.091131"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.092681"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.181589"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.181666"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.182252"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.092045"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.092312"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.115442"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.116977"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.110400"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.132059"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.117321"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.115376"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.110849"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.117579"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.125529"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.118306"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.111701"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.118979"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.118345"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.117890"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.110021"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.116848"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.123535"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.121369"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.117900"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.121649"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.127928"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.122794"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.116146"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.121432"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.076859"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.076174"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.075921"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.082376"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.081756"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.082643"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.792387"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="6.196250"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.950632"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.839037"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.719734"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.871105"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="6.063467"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="6.214965"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.728519"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.745299"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.182518"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.182622"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.182651"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.093607"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.093391"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.079604"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.080113"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.080423"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.079865"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.079111"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.079505"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.071939"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.069945"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.071288"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.078269"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.076460"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.078271"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.078061"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.078223"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.076796"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.077707"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.077744"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.080987"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.080791"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.081274"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.081111"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.081253"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.113798"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.077130"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.077957"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.078135"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.072985"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.070085"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.070899"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.071342"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.070961"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.071694"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.072472"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.071782"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.072618"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.078623"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.077741"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.077787"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.078158"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.136656"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.139997"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.155221"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.158788"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.167006"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.168389"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.099964"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.294690"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.269425"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.297276"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.118812"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.121683"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.125851"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.127777"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.128131"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.093942"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.094513"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.069812"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.070587"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.118102"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.079001"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.079446"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.068554"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.068836"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.069847"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.070201"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.072632"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.073215"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.076604"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.076507"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.076995"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.073609"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.074034"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.073159"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.073807"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.069482"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.069798"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.095019"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.095648"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.095900"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.070003"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.070648"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.107247"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.105334"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.105594"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.107269"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.139960"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.134578"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.134135"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.140593"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.165364"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.165419"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.146027"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.138560"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.148830"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.186972"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.144205"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.103343"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.107257"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.077447"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.076808"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.077419"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.094915"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.094530"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.095067"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.113870"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.111829"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.114727"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.076898"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.076581"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.077637"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.175146">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.175146">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.033343"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.032474"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.023109"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.030865"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.031785"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.023570"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.005191">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.005191"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.027982">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.005044"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.006359"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.004927"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.005572"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.006080"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.005041">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.005041"/>
    </testsuite>
  </testsuite>
</testsuites>

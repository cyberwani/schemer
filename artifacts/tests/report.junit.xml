<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="742" assertions="804" failures="0" errors="0" time="60.462251">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.019540">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.019540"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.028333">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.028333"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.031913">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.027160">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.014449"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005163"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.007548"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.004752">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.004752"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.009421">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.009421">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.002977"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003237"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003207"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.185031">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.185031">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.032922"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.016587"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.013770"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.013904"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.013753"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.013520"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.013409"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.013369"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.013441"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.013468"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.013394"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.013494"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.035186">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.012011"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.010024"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.013151"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.084354">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.338331">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.036589"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.037978"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.037812"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.033114"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.047163"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.034750"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.058259"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.052666"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.137682">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.045663"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.041424"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.050595"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.481012"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.022093"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.033179"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.036863"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.035194"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.268819">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.268819">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.028657"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.031940"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.028703"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.029421"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.028454"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.030032"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.028983"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.034374"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.028255"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.070365">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.070365">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.016991"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.053374"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.241598">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014511">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004111"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003458"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003458"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003484"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.013929">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004033"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003293"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003293"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003310"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.011897">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003029"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.002936"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.002967"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.002965"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.113504">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.007721"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.004796"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005030"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005289"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005041"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005071"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.007300"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.007468"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005449"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005070"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.004821"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005557"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005313"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.005348"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.003753"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006014"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005225"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004205"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005295"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005493"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004245"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.025445">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005225"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005014"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005026"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005169"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005011"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004473"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004395"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006177"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006279"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006216"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006207"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.005808"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004658"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004513"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.004890"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.004642"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004054"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.138566">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.123417">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.003864"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.004436"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.004670"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.003774"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.003767"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.003696"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.003770"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.003819"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.003688"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.004515"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.004643"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.004735"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.004645"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.004868"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.004608"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004615"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.003759"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.003799"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.003693"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004406"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004568"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.003754"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004171"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.003752"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.003635"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.004598"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.003832"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.003779"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.003803"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.003756"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.029376">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.004696"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.003797"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.004631"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.003641"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004434"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004475"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.003702"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.024235">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003530"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003529"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003512"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003512"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003435"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003419"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003298"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.012525">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003148"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003138"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003129"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003110"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015438">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004117"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.003835"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.003797"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.003689"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013569">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003396"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003537"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003457"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003179"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.005698"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.027556">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004444"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.003768"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.004488"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003012"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004410"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004413"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003021"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.026240">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004038"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003310"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004520"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003230"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.003992"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.003987"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003163"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.027785">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.004516"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003735"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004468"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003121"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004392"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.004423"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003130"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.026130">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004028"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003312"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004037"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003087"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004448"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.003976"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003242"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.028806">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004429"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.003722"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004485"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003563"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004391"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004565"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003651"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.026044">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004464"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003290"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004060"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003195"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.003988"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.003905"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003142"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.008602"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.025227">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.003998"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003098"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004037"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003191"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.003991"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.003934"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.002977"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.004588"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.025468">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.003777"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.003713"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003617"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.003583"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003591"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003608"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.003579"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.016761">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003388"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003375"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003360"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003304"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003334"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.100055">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.003818"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.003833"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.003875"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.003869"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004332"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004275"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004274"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004307"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004312"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004276"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004228"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004251"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004265"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004245"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004239"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004224"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004216"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004200"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.003865"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004238"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004234"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004220"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004194"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004265"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.015573">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005087"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005355"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005131"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004034"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.010933">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.003688"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003583"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.003662"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.107625">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003303"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.003972"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004052"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003234"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003262"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003267"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003355"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003209"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003167"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.003998"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004116"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004082"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004121"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004197"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004079"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004035"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003181"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003306"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003335"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004177"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004036"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003168"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003576"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003112"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003133"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004033"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003263"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003337"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003286"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003233"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.016261">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003276"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003241"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003270"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003257"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003217"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012062">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003035"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003011"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003003"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003013"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.017755">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003111"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.002913"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.002927"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.002924"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.002924"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.002956"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.021137">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003019"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003055"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003084"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.002953"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003020"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.002957"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003049"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.015330">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003074"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003021"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003082"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003069"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003084"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.088742">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003372"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003364"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003324"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003359"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004739"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.003813"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.003817"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.003710"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.003748"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.003817"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.003734"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.003696"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.003699"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.003715"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.003722"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.003704"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003655"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003568"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003161"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003697"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003720"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003733"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.003644"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004231"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.015536">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005113"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005364"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005059"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.033838">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003142"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003081"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003116"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003076"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003045"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003024"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003029"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003085"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003084"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003078"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003077"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009252">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003082"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003094"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003076"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.038373">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003539"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003495"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003464"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003466"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003511"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003536"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003544"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003463"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003405"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003430"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003521"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010793">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003620"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003605"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003568"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015205">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.002999"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003020"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003059"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003076"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003051"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015456">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003089"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003082"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003183"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003083"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003019"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018955">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.003689"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003987"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.003965"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003663"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003651"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017618">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003430"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003547"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003542"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003541"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003558"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.024710">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003104"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003091"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003098"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003087"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003080"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003094"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003082"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003074"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009055">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003082"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003019"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.002954"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.029481">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003540"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.004329"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003766"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003712"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003586"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003458"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003540"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003550"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010717">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003642"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003553"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003522"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.014065">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.002825"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.002804"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.002819"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.002813"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.002804"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.022604">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.002821"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.002806"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.002815"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.002827"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.002834"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.002842"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.002828"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.002831"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.230730">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.003842"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006124"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.005984"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.005850"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.005780"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.005626"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006077"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006196"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006215"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006215"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006184"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006295"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006004"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.005834"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006047"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.005818"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006056"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006121"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006099"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006071"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.005903"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.005868"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.005868"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006054"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006083"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006195"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006098"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006109"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.005969"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006088"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.005845"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.005921"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006112"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006150"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006188"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006084"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.005956"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.005895"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.003906"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007290">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003671"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003619"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.084935">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.004844"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005249"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005354"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004288"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.004451"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004349"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.004903"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.004410"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004114"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004110"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004121"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004254"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004050"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004054"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004077"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004031"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.003867"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005007"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005402"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.237758">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.003972"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.005962"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006052"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006172"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006118"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.005877"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006226"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006328"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006309"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006413"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006419"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006414"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006217"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006221"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006403"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006186"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006219"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006231"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006224"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006213"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006229"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006174"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006202"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006219"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006227"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006258"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006135"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006132"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006163"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006182"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006195"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006213"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006216"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.006207"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006220"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006224"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006219"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006216"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.003952"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.007282"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.040437">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.006887"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.006899"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.006913"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.006791"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.006441"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.006506"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.314112">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.009867"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.011425"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.011787"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.009690"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.009775"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.009793"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.009803"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.009866"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.009687"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.011294"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.011374"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.011780"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.011831"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.011592"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.011479"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.011328"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.009722"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.009868"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.009714"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.011193"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.011392"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.009441"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.010450"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.009451"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.009457"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.011683"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.009692"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.009861"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.010083"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.009734"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.017101">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003449"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003462"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003370"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003405"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003415"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.036294">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003106"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003072"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.003831"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003176"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003175"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003181"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003189"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005165"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005159"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003240"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="54.216720">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="54.216720">
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.090593"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.081913"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.077062"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.083048"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.084299"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.083810"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.077638"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.082559"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.087180"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.086212"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.082845"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.086326"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.087223"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.086696"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.083891"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.087195"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.054122"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.053655"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.053485"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.065817"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.051156"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.049795"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.049638"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.053733"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.053136"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.053319"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.134591"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.138412"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.141623"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.070527"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.071942"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.090670"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.088067"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.083497"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.088591"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.083642"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.084846"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.079768"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.084119"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.756890"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="4.846365"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.872815"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="3.787890"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.855165"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.816177"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.855284"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="4.739484"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="3.808432"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.800772"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.051930"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.052334"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.054672"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.054292"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.054268"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.049570"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.049641"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.048080"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.048610"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.049374"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.051581"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.052945"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.052926"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.067610"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.068111"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.068246"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.048856"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.048833"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.050784"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.050720"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.053818"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.053917"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.053874"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.058705"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.057799"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.058665"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.050336"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.049584"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.050094"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.055944"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.055614"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.056724"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.135330"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.169649"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.139679"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.070016"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.067946"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.053801"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.053788"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.054015"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.068190"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.069844"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.068256"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.057570"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.057300"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.057432"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.057872"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.057421"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.051076"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.051199"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.052752"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.057467"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.057256"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.056268"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.056638"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.057575"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.060651"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.057772"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.062215"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.063257"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.055650"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.056110"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.055175"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.055581"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.050370"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.050548"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.076745"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.075296"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.077239"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.111844"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.101817"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.103187"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.100671"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.105765"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.121438"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.120721"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.103054"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.105070"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.074393"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.078991"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.106605"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.100792"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.111576"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.081718"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.085213"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.086314"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.061936"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.063057"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.060166"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.090180"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.094085"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.130072"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.129114"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.077191"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.124112"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.129656"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.108080"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.103400"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.222035"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.197801"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.220628"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.081634"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.086805"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.092818"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.103329"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.138068"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.096559"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.069205"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.069226"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.068440"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.068101"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.076074"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.062098"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.060203"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.060094"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.051858"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.052205"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.132403">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.132403">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.024960"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.024212"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.017519"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.023870"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.024737"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.017105"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

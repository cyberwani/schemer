<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="68.850313">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.060066">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.060066"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.038550">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.038550"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.320233">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.218113">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.202107"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.007296"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.008710"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.102120">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.102120"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.010292">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.010292">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003372"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003383"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003537"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.282538">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.282538">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.049947"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.024823"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.021550"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.021324"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.020554"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.021049"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.021071"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.020933"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.020447"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.019317"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.019723"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.021800"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.041332">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.014801"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.012035"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.014496"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.546819">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.408126">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.043772"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.045188"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.043470"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.039176"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.056363"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.041929"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.074371"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.063857"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.167870">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.056535"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.049199"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.062136"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.684439"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.140540"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.038769"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.047971"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.059104"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.317405">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.317405">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.035659"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.039433"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.034585"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.033944"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.033034"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.035829"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.033520"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.038920"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.032481"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.076497">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.076497">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.018885"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.057612"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.270447">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015808">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004435"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003569"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003960"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003844"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.019036">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.008546"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003531"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003443"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003516"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012453">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003056"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003154"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003135"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003108"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.121431">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.008089"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005170"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005398"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005130"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005632"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005616"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.008011"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.008042"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005670"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005577"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005260"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005954"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005855"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.005883"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004141"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006469"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005541"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004686"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005318"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005486"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004503"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.026632">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005481"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005324"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005303"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005238"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005286"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004680"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004860"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.007016"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006808"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.007047"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.007897"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.007518"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.006432"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.006330"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005830"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.005478"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.005191"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.493156">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.158252">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.005376"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.006212"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.006103"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004461"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004470"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004366"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004373"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004667"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004702"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005688"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005729"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005515"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005907"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.006153"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005907"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.006224"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.006136"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.006231"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.006470"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.007357"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.005635"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004622"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004936"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004333"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004297"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005121"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004382"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004428"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004195"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004256"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.033482">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.005106"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004025"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005225"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004202"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004745"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.005527"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004652"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.028803">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.004259"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.004167"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.004096"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003979"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.004065"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004127"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.004111"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.016288">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.004085"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.004305"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.004051"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003847"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.019405">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.005052"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.004578"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.004456"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.005319"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.016033">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.004399"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003764"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.004017"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003853"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.006899"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.032666">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005207"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004398"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005283"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003733"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.005172"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.005119"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003754"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.030315">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004682"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003720"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.005120"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003635"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004685"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004712"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003761"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.032426">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.005337"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.004369"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.005487"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003440"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004975"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005098"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003720"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.030211">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004691"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003823"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.005062"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003550"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004994"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004508"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003583"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.031504">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.005057"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004156"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004562"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003863"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004476"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004553"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.004837"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.030673">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.005413"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003852"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004743"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003648"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004725"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004618"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003674"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.009837"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.030112">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004742"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003770"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004697"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003696"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004771"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004750"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003686"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.005449"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.029030">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004138"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004102"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004106"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004087"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004299"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004161"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004137"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.019702">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.004116"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.004055"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003835"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003846"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003850"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.118524">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004565"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004568"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004529"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004564"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005065"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.005105"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.005134"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.005134"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.005223"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.005080"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004961"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004953"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004941"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004955"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004927"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004991"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004929"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004937"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004545"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.005137"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.005031"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.005008"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.005240"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.005002"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.018579">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005933"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.006473"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.006173"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004744"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.012610">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.004309"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.004232"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004069"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.129046">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003850"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004743"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004903"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003817"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003856"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003732"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003810"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003804"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003700"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.005027"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.005154"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.005103"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.005371"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.005791"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004919"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004826"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003670"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003971"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003796"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004725"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004728"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003692"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.004509"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003725"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003745"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004829"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003874"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003858"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003816"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003702"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.018794">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003755"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003693"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003777"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003766"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003803"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014311">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003546"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003559"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003639"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003567"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.021788">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003572"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003532"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003887"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003749"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003545"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003503"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.025888">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003529"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003533"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003453"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003366"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003766"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.004084"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.004157"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.020535">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004296"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004191"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003964"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004045"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.004039"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.103537">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.004498"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.004384"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.004193"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.004064"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004458"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004456"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004497"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004572"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.004558"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004449"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004305"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004323"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004442"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004787"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004580"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004509"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004470"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.004366"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003806"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003997"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.004059"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003828"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004146"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.003790"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.015800">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005224"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005440"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005136"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.036118">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.002994"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003137"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003494"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003030"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003387"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003149"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003130"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003352"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003455"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003403"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003587"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010760">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003594"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003602"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003564"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.041387">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.004183"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003529"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003814"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003543"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003717"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003566"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003854"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003550"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003709"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003996"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003926"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011992">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003644"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.004051"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.004297"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017533">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003555"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003442"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003411"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003507"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003618"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018469">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003712"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003689"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003777"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003657"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003634"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.021512">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004248"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.004198"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004444"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004291"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004331"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019908">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.004116"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003938"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003994"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003992"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003868"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.024951">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003176"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003029"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.002917"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003193"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003233"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003084"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003128"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003191"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009487">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003068"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003283"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003136"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.029491">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003701"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003822"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003573"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003692"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003841"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003596"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003689"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003577"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010907">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003621"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003651"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003635"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.016114">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003136"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003248"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003099"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003144"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003487"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.027744">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003487"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003495"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003404"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003436"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003471"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003484"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003468"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003499"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.251379">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004441"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006905"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006832"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006894"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006111"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.006392"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006719"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006887"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.007089"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006699"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006237"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006346"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006281"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006871"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.007037"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006699"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006842"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006779"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006802"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006380"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006393"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006248"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006341"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006060"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006404"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006188"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006068"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006026"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006267"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006377"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006209"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006359"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006577"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006927"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006930"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006914"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006888"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006722"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.004238"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.008058">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004056"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.004002"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.095048">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.005379"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005558"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005553"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004619"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.004886"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004895"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005191"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005084"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004779"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004364"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004751"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004766"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004638"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004642"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004656"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004575"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004587"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005908"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.006218"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.271889">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004564"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.007045"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.007022"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.007040"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006947"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.006155"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006771"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006831"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006774"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.007067"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.007097"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.007405"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.007067"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.007408"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.007908"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.007257"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006843"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.007123"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.007271"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.007222"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.007217"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.007437"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.007023"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.007360"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.007342"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.007331"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.007257"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006938"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006917"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.007210"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006899"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006875"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.007301"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.006998"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006979"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.007307"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.007033"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.007018"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004630"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.008465"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.046636">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.008305"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.007865"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.007778"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.007757"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.007515"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.007416"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.383589">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.011413"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.013208"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.013090"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.010598"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.010085"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.009973"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.011900"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.011322"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.011041"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.013068"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.013315"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.013679"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.013480"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.013813"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.013377"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.013533"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.011741"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.011316"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.010908"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.013097"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.014086"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.011766"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.012830"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.011810"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.011631"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.013549"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.011321"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.018039"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.016958"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.017642"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.021687">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.004672"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.004652"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.004547"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003910"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003906"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.044791">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003667"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003854"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004698"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003653"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.004372"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.004088"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003791"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.006235"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.006431"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.004002"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="61.199990">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="61.199990">
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.075229"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.067431"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.069240"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.066548"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.065242"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.063670"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.070835"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.068741"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.070199"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.068740"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.069689"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.073520"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.072852"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.067903"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.064664"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.065538"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.065858"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.061382"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.072385"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.062222"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.058044"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.058834"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.057961"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.076971"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.085960"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.085815"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.082349"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.082454"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.081384"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.066030"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.065292"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.061692"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.065443"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.062547"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.057004"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.055897"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.057822"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.059142"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.055733"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.056492"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.057496"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.062625"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.061828"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.058306"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.071897"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.074013"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.077930"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.057428"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.056279"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.060049"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.059650"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.059698"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.060145"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.055141"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.074608"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.059431"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.100547"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.091651"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.095477"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.101408"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.099698"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.101003"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.094352"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.095981"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.094853"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.092955"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.095464"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.099974"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.101682"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.100755"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.101901"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.103692"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.100454"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.095510"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.101794"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.065325"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.067814"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.078724"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.059408"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.070709"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.121851"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.122318"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.140624"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.144192"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.146909"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.148671"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.262565"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.238664"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.264322"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.087235"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.147882"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.123075"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.097005"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.094464"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.097443"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.159167"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.152202"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.152161"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.081179"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.080806"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.166861"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.183424"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.170429"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.084819"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.084134"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.068411"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.067413"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.060917"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.116835"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.121476"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.125772"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.121419"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.129920"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.143051"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.146828"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.088612"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.093246"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.119538"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.116218"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.120264"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.127109"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.091665"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.086265"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.083800"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.089487"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.069802"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.104748"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.074238"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.062586"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.068896"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.059628"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.102674"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.105464"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.103090"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.075196"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.077217"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.107824"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.105904"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.101296"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.106577"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.108353"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.106144"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.101224"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.106059"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.352493"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.287260"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.493472"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.317894"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.403101"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.112258"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.381037"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.292655"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.235243"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.174202"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.066450"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.065889"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.065699"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.071515"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.071115"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.071752"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.068893"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.069366"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.070421"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.066939"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.065681"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.066678"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.158467">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.158467">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.030752"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.029689"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.021260"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.026782"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.028641"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.021343"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004723">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.004723"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.025217">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.004545"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.005735"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.004493"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.004988"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.005456"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004580">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.004580"/>
    </testsuite>
  </testsuite>
</testsuites>

<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="742" assertions="804" failures="0" errors="0" time="64.385173">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.022143">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.022143"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.031335">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.031335"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.038176">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.032495">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.017291"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.006066"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.009138"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.005681">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.005681"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.009864">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.009864">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003281"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003115"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003468"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.219508">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.219508">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.036935"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.019407"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.015310"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.014504"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.014414"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.014983"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.016066"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.016447"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.017052"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.017896"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.018177"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.018316"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.047122">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.016435"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.013195"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.017492"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.500528">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.394321">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.049438"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.044036"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.041476"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.036258"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.054188"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.043333"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.067049"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.058543"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.153212">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.049372"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.046154"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.057686"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.710149"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.131460"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.035363"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.038737"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.037286"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.296180">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.296180">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.031963"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.036178"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.032260"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.033195"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.032375"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.032539"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.031098"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.036595"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.029977"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.072812">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.072812">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.019112"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.053700"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.261021">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014753">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004124"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003538"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003536"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003555"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014361">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004057"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003419"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003342"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003543"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012301">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003060"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003068"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003069"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003104"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.124145">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.008312"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005256"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005446"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005448"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005449"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005425"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.008033"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.008337"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005794"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005681"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005383"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005885"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.006035"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.005913"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004243"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006844"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005696"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004670"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005691"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005857"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004746"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.028692">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005784"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005620"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005756"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005863"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005669"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004913"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004803"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006496"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006645"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006438"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006659"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.006179"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004840"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004714"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005004"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.005433"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004646"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.320927">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.135046">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.004387"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.005018"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005257"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004207"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004303"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.003968"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004049"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.003903"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.003935"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.004783"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005011"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.004946"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.004988"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005032"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005119"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004898"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004076"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004116"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004008"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004848"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004879"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004015"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004681"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004161"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004127"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005111"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004177"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004393"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004470"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004180"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.032978">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.005119"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004325"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005211"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004154"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004987"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004967"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004215"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.027056">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003925"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003909"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003809"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003770"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003794"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003916"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003933"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.014076">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003620"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003506"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003469"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003481"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.016721">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004558"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.003985"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.004131"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004047"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014111">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003452"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003571"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003554"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003534"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.006341"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.031006">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005190"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004350"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005076"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003510"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004841"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004713"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003326"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.029381">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004514"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003740"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.005110"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003623"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004461"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004585"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003348"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.030211">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.004640"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003985"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004790"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003390"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004715"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005019"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003672"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.028554">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004650"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003586"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004404"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003414"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004780"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004356"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003364"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.032634">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004839"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004224"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004901"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003906"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.005203"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.005249"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.004312"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.029055">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.005278"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003479"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004282"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003450"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004435"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004384"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003747"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.009722"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.030287">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004812"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003780"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004675"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003807"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004767"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004702"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003744"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.005478"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.026854">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004090"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004050"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004055"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.003698"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003651"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003669"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.003641"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.017636">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003542"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003517"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003530"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003533"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003514"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.113626">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004238"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004263"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004046"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004165"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004753"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004883"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004938"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004930"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004865"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004987"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004947"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004969"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004974"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004960"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.005040"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.005000"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004894"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004830"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004395"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004858"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004899"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004635"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004486"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004672"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.016960">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005534"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005982"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005444"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004360"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.012139">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.004191"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003957"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.003991"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.112434">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003449"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004034"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004143"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003239"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003567"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003502"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003491"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003430"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003462"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004302"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004413"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004211"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004194"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004316"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004266"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004092"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003249"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003352"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003503"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.003995"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004322"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003116"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003671"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003472"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003258"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004139"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003310"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003642"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003735"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003559"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.018134">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003604"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003652"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003706"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003582"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003590"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012791">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003146"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003397"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003110"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003138"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.018230">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003018"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003030"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003009"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003037"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003062"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003074"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.021963">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003133"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003027"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003103"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003133"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003123"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003345"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003099"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.016117">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003133"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003048"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003210"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003469"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003257"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.096625">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003835"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003856"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003904"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003873"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004285"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004291"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004352"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004232"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.004419"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004880"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004214"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004169"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004141"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.003942"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.003790"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.003752"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003895"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003964"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003533"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003856"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003799"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003813"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.003978"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.003852"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.015160">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.004857"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005281"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005022"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.036019">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003212"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003119"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003259"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003203"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003043"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003154"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003478"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003157"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003420"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003332"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003642"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009824">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003418"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003269"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003137"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.040337">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003607"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003578"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003570"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003590"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003756"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003644"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003692"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003720"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003656"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003789"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003735"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011639">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003852"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003876"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003911"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.016403">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003477"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003237"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003195"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003195"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003299"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.016914">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003410"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003434"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003203"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003547"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003320"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018955">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.003766"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003739"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.003904"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003752"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003794"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019629">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003930"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003785"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003882"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.004004"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.004028"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.025263">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003180"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003232"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003131"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003095"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003163"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003141"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003110"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003211"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009435">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003111"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003143"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003181"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.030242">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.004092"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003557"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.004037"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003986"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003640"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003650"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003570"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003710"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011363">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003892"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003578"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003893"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.017804">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003304"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003284"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003472"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.004179"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003565"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.025804">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003177"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003169"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003166"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003148"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003241"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003357"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003400"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003146"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.239788">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004317"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006208"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006139"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006229"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006058"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.005784"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006693"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006779"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006112"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006237"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006319"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006552"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006418"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006116"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006438"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006796"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006812"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006682"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006212"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006187"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006166"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006115"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006120"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006133"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006119"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006205"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006089"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006074"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006111"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006132"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006146"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006137"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006342"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006181"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006189"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006157"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006178"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006181"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.003925"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007576">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003708"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003868"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.091311">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.004949"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005148"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005445"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004647"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005094"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004852"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005419"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.004999"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004636"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004712"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004688"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004674"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004584"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004478"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004023"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004205"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.003968"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005277"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005514"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.255304">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004009"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006229"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006732"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006829"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006748"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.006364"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006887"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.007001"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006874"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006428"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006420"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006745"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006851"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006759"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.007050"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006881"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006850"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006969"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006943"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.007029"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006416"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006287"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006196"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006452"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006669"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006376"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006269"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006280"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006113"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006382"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006890"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006323"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006229"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.008288"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.007113"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006564"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006320"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006907"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004632"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.008555"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.044046">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.007975"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.007133"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.007283"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.007333"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.007106"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.007216"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.349079">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.011466"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.012849"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.012804"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.010889"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.011190"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.011205"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.011115"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.011225"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.010810"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.012794"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.013165"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.013165"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.012970"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.012962"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.012959"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.012438"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.010198"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.010246"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.010002"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.011775"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.012049"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.010079"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.011658"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.010642"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.010599"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.012987"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.010679"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.011656"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.011342"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.011161"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.019070">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003999"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003861"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003650"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003582"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003978"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.040880">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003714"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003814"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004542"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003442"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003385"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003294"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003614"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005521"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.006156"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003398"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="57.412513">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="57.412513">
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.073963"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.063543"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.062275"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.058120"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.056220"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.056460"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.091414"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.089079"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.083363"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.093167"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.093285"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.094862"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.088715"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.087828"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.225469"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.206916"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.226803"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.117081"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.133639"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.124639"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.123468"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.101598"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.111954"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.092749"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.093670"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.082815"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.064127"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.063283"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.058830"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.113293"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.105057"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.107192"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.121534"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.124882"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.103783"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.106253"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.073702"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.077148"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.081131"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.083217"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.083436"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.050162"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.050119"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.049998"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.101246"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.099697"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.103301"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.105522"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.079743"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.078673"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.079130"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.079754"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.071987"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.072528"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.090555"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.054220"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.052443"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.053693"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.058380"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.057237"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.057641"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.057533"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.058413"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.059953"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.060572"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.057770"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.053258"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.051677"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.053032"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.060028"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.060092"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.059735"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.059706"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.059810"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.057557"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.056932"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.057952"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.057874"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.060139"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.061765"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.059733"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.057505"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.056826"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.055606"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.051826"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.051912"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.051034"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.050945"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.050194"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.051086"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.074074"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.049826"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.053374"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.053994"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.051278"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.051386"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.056117"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.055863"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.055965"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.067205"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.067971"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.068531"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.053492"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.053682"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.082079"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.082219"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.083832"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.052599"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.052117"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.052478"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.094168"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.093157"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.098177"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.072469"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.074953"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.055513"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.048753"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.054385"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.054942"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.056094"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.086672"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.094393"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.096231"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.095702"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.097696"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.100544"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.122526"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.092634"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.100698"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.094745"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.094058"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.087706"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.087939"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.092394"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.087966"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.088107"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.134253"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.133236"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.134730"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.069805"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.067249"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.136389"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.154072"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.171512"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.076853"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.072766"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.820910"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.991044"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="4.907149"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="3.974423"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.287104"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.023338"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.174275"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.176317"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.196924"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.413103"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.063977"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.059589"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.058854"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.060572"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.059906"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.058431"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.068489"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.077611"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.080925"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.081544"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.153044">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.153044">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.030263"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.029167"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.020254"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.026717"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.027363"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.019280"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="73.529357">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.021959">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.021959"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.032600">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.032600"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.037282">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.031674">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.016725"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.006083"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.008866"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.005608">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.005608"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.010879">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.010879">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003441"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003631"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003807"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.290948">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.290948">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.047994"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.025266"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.021195"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.020821"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.022108"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.021219"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.021097"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.026928"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.021062"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.020905"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.021165"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.021188"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.042847">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.015077"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.011907"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.015863"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.674082">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.413754">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.047415"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.045143"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.045131"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.038778"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.056197"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.043274"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.072067"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.065749"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.176167">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.054438"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.048045"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.073684"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.747768"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.209714"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.040855"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.043803"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.042020"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.354922">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.354922">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.037051"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.041079"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.036996"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.038325"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.039704"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.039935"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.038682"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.045127"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.038023"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.092021">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.092021">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.025618"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.066403"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.311754">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.018682">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.005142"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.004333"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.004060"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.005147"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.017712">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.005461"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.004068"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003953"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.004230"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014987">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003806"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003902"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003571"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003708"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.154717">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.010090"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.007777"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.008015"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.008125"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.008369"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.007830"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.011460"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.009618"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.006762"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.006502"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005997"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.006756"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.006552"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.006853"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.005128"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.007756"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.006599"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.006220"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.006706"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.006423"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.005179"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.029706">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005976"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005942"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005949"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005906"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005933"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.005275"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.005360"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.007280"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.007539"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.007454"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.007348"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.007371"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.005655"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.005554"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005961"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.005893"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.005261"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.784155">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.157934">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.005006"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.005750"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005635"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004716"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004399"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004516"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004699"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004850"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004567"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005562"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005608"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005462"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005589"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005936"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005674"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.005782"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004632"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004690"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004869"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.005751"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.006373"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.005901"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.006703"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.005766"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004557"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005765"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004738"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004728"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004806"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004904"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.037140">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.006058"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004823"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005837"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004539"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005432"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.005465"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004986"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.032273">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.004755"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.004540"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.004596"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.004922"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.004638"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004437"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.004385"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.016444">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003956"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003942"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.004474"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.004072"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.020382">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.005130"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.004940"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.005350"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004962"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.017781">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.004640"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.004171"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.004443"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.004527"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.007544"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.033829">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005688"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004445"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005511"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003839"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.005273"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.005334"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003739"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.032832">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004998"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003813"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.005447"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003797"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004848"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.005918"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.004011"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.037956">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.007163"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.005036"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.005556"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003871"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.006523"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005744"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.004063"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.032580">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.005184"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.004046"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004998"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.004101"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.005675"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004805"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003771"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.036153">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.005424"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004813"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.005775"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.004675"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.005393"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.005458"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.004615"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.035528">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.005729"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.004172"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.005649"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.004417"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.005992"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.005385"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.004184"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.010782"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.031646">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004887"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.004011"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.005228"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003894"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004795"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004841"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003990"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.007202"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.035414">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.005461"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.005190"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004763"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.005198"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004613"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004962"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.005227"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.022689">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.004268"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003992"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.004263"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.004946"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.005220"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.133409">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.006910"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.006158"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.005053"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004999"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005360"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.005458"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.005696"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.005672"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.005474"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.005668"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.005419"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.005663"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.005824"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.005890"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.005410"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.005499"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.005409"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.005302"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.005070"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.005689"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.005428"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.005741"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.005424"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.005193"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.020693">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.006590"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.007350"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.006753"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.005327"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.014869">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.004922"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.004752"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.005195"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.142383">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.004342"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.005108"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.005270"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.004052"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.004121"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.004660"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.004276"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.004470"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003926"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.005098"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.005824"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.005088"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.005320"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.005662"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.005444"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004992"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.004067"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.004465"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.004123"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.005480"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.005652"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.004803"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.004795"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.004268"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.004785"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.005538"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.004286"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.004126"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.004211"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.004130"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.021365">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.004419"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.004133"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.004388"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.004146"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.004279"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.016958">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.004086"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.004440"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.004200"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.004232"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.026056">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.004565"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.004321"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.004623"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.004274"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.004159"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.004114"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.030064">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.004779"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.004119"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003794"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.004298"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.004603"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003847"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.004625"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.019629">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004160"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003898"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003930"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003885"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003756"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.117496">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.004444"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.004359"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.004292"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.004420"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.005060"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004753"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.005261"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.005399"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.005032"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004961"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004837"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.005003"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004775"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004589"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004699"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004799"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.005002"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.005400"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.004644"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.005149"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.005174"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.005457"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.005044"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004943"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.020844">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.006715"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.006847"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.007282"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.043958">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.004220"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.004418"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.004127"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003935"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003976"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003640"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003729"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.004002"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003857"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003809"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.004245"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011263">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003802"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003877"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003584"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.051008">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.004368"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.004707"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004566"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.004326"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.004320"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.004867"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.004607"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.004513"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.005125"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.004747"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.004863"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014411">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.005014"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.004844"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.004553"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.021013">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003921"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.004292"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.004575"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.004364"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003861"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019628">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003926"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003776"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.004094"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003747"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.004085"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.024321">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.005108"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.004574"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004914"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004863"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004862"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.024502">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.005075"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.005116"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.004605"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.004542"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.005164"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.032715">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.004412"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003881"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.004084"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003853"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.004214"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.004389"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003932"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003950"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012086">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003918"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.004127"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.004041"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.036631">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.004723"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.004529"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.004493"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.004333"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.004495"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.004671"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.004798"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.004589"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014264">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.005049"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.004645"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.004570"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.019302">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003826"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003921"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003824"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003787"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003944"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.031395">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.004373"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003829"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003792"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003719"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003924"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003976"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003980"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003802"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.292834">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.005339"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.008133"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.007597"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.007604"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.007783"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.007017"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.007391"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.008092"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.007657"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.007497"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.007504"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.007454"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.007438"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.007776"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.008052"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.007840"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.007882"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.007422"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.007390"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.008237"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.007385"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.007709"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.007644"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.007646"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.008016"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.007357"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.007051"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.007764"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.007519"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.007450"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.007235"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.007620"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.007312"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.007236"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.007945"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.007852"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.007743"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.007907"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.005337"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.009337">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004718"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.004619"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.108122">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.006374"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.006720"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.007580"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.005596"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005779"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.005549"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005932"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005548"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.005545"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.005004"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.005332"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.005322"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004993"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004896"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004942"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004888"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.005003"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.006524"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.006596"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.305465">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004780"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.009115"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.007514"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.007427"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.007279"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.007507"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.007882"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.007356"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.008478"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.008364"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.008306"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.007910"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.007904"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.008371"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.007866"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.007916"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.007599"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.008148"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.007868"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.007336"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.008019"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.008260"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.008265"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.008418"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.008518"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.008709"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.007772"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.007703"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.008015"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.007220"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.007426"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.007944"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.007707"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.008438"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.008048"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.007953"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.007888"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.009038"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.005198"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.009246"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.053700">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.009205"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.009170"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.009262"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.008891"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.008646"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.008526"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.403829">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.012512"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.015101"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.014385"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.012399"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.012441"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.012327"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.012279"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.012988"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.012416"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.015041"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.015487"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.015358"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.016017"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.015318"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.014204"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.014505"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.012533"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.011771"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.012249"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.013970"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.015358"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.013180"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.013683"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.012050"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.012604"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.014601"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.012488"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.012417"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.012034"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.012114"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.022059">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.004415"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.004276"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.004216"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.004846"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.004306"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.047864">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003988"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.004515"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.005015"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003879"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003858"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.004341"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.004027"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.006764"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.007393"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.004084"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="65.671864">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="65.671864">
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.118149"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.104895"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.100759"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.105822"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.104254"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.111977"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.110634"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.111141"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.117175"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.112452"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.107510"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.109391"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.108756"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.109515"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.104537"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.108184"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.071113"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.070764"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.088293"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.074920"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.073047"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.066898"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.068771"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.071327"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.068772"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.076515"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.175990"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.171482"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.167914"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.081791"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.081095"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.102635"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.101403"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.097903"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.102242"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.100122"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.103087"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.095456"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.104200"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.575882"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="6.252057"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="6.021758"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.807891"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.593703"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.501788"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.474939"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.598162"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.413036"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.543653"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.066250"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.066369"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.067106"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.073570"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.074731"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.064467"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.064683"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.061198"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.058999"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.060788"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.064076"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.066447"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.065286"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.086146"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.085400"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.088140"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.063046"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.066341"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.064837"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.066139"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.071607"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.070953"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.070123"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.078845"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.076445"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.077682"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.067513"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.101755"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.065822"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.074225"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.067824"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.067520"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.163131"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.165260"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.166415"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.083803"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.082906"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.066294"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.066481"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.064851"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.080303"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.079887"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.079932"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.074173"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.073091"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.074112"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.072659"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.071156"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.063117"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.061705"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.062620"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.068231"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.070927"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.069041"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.072794"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.071273"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.069459"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.071163"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.070935"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.071455"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.068810"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.070330"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.069940"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.105328"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.060788"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.060549"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.097686"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.095105"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.095083"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.097319"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.122997"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.117737"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.117973"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.124117"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.145640"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.148545"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.124288"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.131082"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.092080"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.090815"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.125366"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.118320"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.127911"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.103670"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.101415"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.105230"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.075092"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.069373"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.069665"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.102473"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.105005"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.151372"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.153046"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.087050"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.144732"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.141346"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.126586"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.131049"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.324450"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.250664"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.268523"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.105966"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.099314"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.102641"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.115095"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.117998"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.121227"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.088988"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.088225"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.116231"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.084253"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.084712"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.069919"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.069528"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.069551"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.062666"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.061731"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.168318">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.168318">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.032258"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.030517"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.021081"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.030823"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.031558"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.022081"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.005317">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.005317"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.025589">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.004695"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.005807"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.004597"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.005021"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.005469"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004822">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.004822"/>
    </testsuite>
  </testsuite>
</testsuites>

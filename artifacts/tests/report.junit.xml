<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="742" assertions="804" failures="0" errors="0" time="66.289190">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.019861">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.019861"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.038836">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="50" assertions="1" time="0.038836"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.038218">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.032569">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.016362"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.007207"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.009000"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.005649">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.005649"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.010493">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.010493">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003458"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003445"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003590"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.206252">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.206252">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.037562"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.019309"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.015720"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.015337"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.015345"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.015381"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.015503"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.016082"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.014116"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.014054"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.013811"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.014032"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.037085">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.012817"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.010481"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.013787"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.476819">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.359960">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.038970"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.041807"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.040000"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.034469"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.049372"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.036869"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.062378"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.056095"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.144297">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.049235"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.043028"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.052034"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="111" assertions="1" time="1.647705"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="123" assertions="1" time="1.191996"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="135" assertions="1" time="0.038211"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="147" assertions="3" time="0.054111"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="161" assertions="2" time="0.040539"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.339407">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.339407">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.042891"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.041817"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.034910"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.033289"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.035389"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.036877"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.034783"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.046049"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.033403"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.081208">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.081208">
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.061302"/>
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.019906"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.278968">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.017067">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004818"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.004064"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.004028"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.004157"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.016206">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004908"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003769"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003730"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003799"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013600">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003423"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003379"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003403"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003395"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.132520">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.009137"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005657"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005965"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005830"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005820"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005955"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.008563"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.008673"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.006239"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005989"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005804"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.006346"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.006296"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.006430"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004420"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.007253"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.006110"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004938"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.006103"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.006059"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004933"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.028908">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.006093"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005726"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005596"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005681"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005812"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.005047"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.005058"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006979"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.007028"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.007032"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.007019"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.006619"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.005227"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.005106"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005432"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.005347"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004772"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.530706">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.152197">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.006410"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.005962"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.006162"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.005863"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.006434"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004472"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004349"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004418"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004417"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005394"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005466"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005370"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005501"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005584"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005539"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.005522"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004367"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004444"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004410"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.005269"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.005416"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004346"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004888"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004359"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004330"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005481"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004503"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004570"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004494"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004457"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.035377">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.005546"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004524"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005654"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004363"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005286"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.005459"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004545"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.028583">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.004181"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.004023"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.004040"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.004049"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.004130"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004106"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.004054"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.015703">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003842"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003887"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.004007"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003967"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.018905">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.005115"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.004482"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.004621"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004687"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015709">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003944"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003961"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003903"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003901"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.006833"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.033304">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005224"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004311"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005305"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003820"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.005518"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.005364"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003763"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.030426">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004746"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003845"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.005298"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003707"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004567"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004558"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003705"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.030553">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.005054"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003798"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004781"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003473"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004786"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005044"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003617"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.029563">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004463"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003709"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004467"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003773"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.005095"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004536"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003520"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.031872">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004940"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004207"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.005100"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003959"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004704"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004859"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.004103"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.028502">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.005007"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003575"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004447"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003410"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004100"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004264"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003699"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.009199"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.028614">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004391"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003527"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004466"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003576"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004475"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004433"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003746"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.005270"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.028369">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.003958"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.003960"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003967"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004086"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004164"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004136"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004098"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.018926">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003838"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003798"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003828"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003894"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003568"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.118531">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004801"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004905"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004526"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004993"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005415"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.005251"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.005047"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.005183"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.005188"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.005194"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.005102"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.005050"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.005144"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.005121"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004962"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.005051"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.005058"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.005050"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004745"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004544"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004505"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004803"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004380"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004513"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.016699">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005566"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005707"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005426"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004426"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.012133">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.004112"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003986"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004035"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.123606">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003540"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004471"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004697"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003761"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003594"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003504"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003512"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003574"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003560"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004335"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004531"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004654"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.005033"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.005123"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004800"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004543"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003808"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.004339"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.004288"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004790"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004933"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003979"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.004238"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003846"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003787"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004273"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003676"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003571"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003496"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003350"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.017587">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003360"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003444"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003338"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003535"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003910"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013036">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003392"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003306"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003241"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003097"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.019127">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003159"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003180"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003160"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003151"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003035"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003442"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.025361">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003541"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003543"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003819"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003547"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003559"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003709"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003643"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.019126">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004198"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003610"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003655"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003782"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003881"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.106115">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.004026"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003905"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003561"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003832"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004412"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004078"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004148"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004311"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.004460"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004591"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004792"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.007409"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004800"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004211"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004411"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004081"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004533"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003892"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003922"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.004563"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.004703"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.004492"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004553"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004428"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.017038">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005721"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005736"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005581"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.039543">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003494"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003322"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003347"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003662"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003698"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003675"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003520"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003551"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003987"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003675"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003612"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010664">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003589"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003642"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003433"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.046041">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.004581"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.004488"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004256"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003758"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003810"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003913"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.004359"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.004311"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.004244"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.004299"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.004022"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012203">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003853"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003816"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.004534"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019269">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.004096"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003745"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003867"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003800"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003761"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018442">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003789"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003504"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003903"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003684"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003562"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020486">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004027"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.004053"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004138"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003802"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004466"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.021419">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.004360"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.004165"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.004147"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.004456"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.004291"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.029802">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003681"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003979"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003747"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003648"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003635"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.002985"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.004074"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.004053"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011037">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003863"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003678"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003496"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.034290">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.004123"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.004161"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.004510"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.004309"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.004384"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.004306"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.004376"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.004121"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012820">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.004306"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.004244"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.004270"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.018661">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003669"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003645"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003723"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003818"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003806"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.029757">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003768"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003931"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003689"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003473"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003246"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003616"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.004077"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003957"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.268800">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004850"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006732"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006709"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006898"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006761"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.006726"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.007092"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.007202"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.007849"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.007563"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.007636"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.007584"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.007304"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.007645"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.007798"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006756"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006714"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006658"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006617"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006690"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006803"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006543"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.007009"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.007114"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.007338"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.007494"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.007447"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006929"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006450"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006690"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006637"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006684"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006972"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.007194"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006812"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006642"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006895"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006905"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.004459"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007906">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004006"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003900"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.099350">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.005180"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.006025"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.006139"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.005030"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005140"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.005258"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005895"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005364"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004987"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004775"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004886"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004838"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004610"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004848"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004880"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004414"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004815"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.006024"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.006242"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.285071">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004649"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006699"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.007044"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.007333"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.007195"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.007109"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.007185"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.007204"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.007088"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006768"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006986"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.007084"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.007224"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.007441"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.007681"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.007280"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.007272"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.007331"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.007462"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.009074"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.009292"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.008324"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.007671"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.007528"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.007704"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.007388"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.007223"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.007386"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.007465"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.007569"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.007381"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.007325"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.007334"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.007430"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.007465"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.007583"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.007416"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.007490"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004988"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.009082"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.051652">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.008717"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.009269"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.008947"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.008511"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.008244"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.007964"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.380288">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.012657"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.013865"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.014003"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.012522"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.011289"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.010842"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.012007"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.012124"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.011436"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.013816"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.013901"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.013641"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.014276"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.013719"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.014932"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.014705"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.012115"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.012144"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.011797"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.013806"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.013499"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.011218"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.012436"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.011652"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.011807"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.013650"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.012149"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.011701"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.011399"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.011180"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.020050">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.004189"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003998"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003981"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003910"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003972"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.043382">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003879"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003749"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004676"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003650"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003638"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003707"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003820"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.006258"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.006198"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003807"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="59.097846">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="59.097846">
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.086458"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.093878"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.078990"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.140817"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.133004"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.085645"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.094732"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.102104"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.111990"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.111843"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.131924"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.139862"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.228267"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.211506"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.224109"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.086227"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.089971"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.084292"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.092082"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.091718"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.091454"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.083991"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.097373"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.056254"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.059565"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.055472"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.080861"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.063415"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.061409"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.062443"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.060398"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.051880"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.051692"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.054492"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.056297"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.061688"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.058280"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.059058"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.056595"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.055051"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.056026"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.055917"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.052194"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.053131"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.056473"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.061481"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.058560"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.059632"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.058985"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.075954"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.069447"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.094617"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.099350"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.099958"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.114003"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.113070"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.076703"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.078424"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.107785"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.130355"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.114759"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.128464"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.150705"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.105254"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.102467"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.102189"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.106649"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.082528"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.078799"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.079175"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.079002"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.053832"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.053918"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.052168"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.053013"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.051509"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.056151"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.060180"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.059485"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.062486"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.068739"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.061951"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.065191"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.084094"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.089943"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.096541"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.078354"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.077108"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.154736"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.158110"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.154867"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.066080"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.064769"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.065857"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.078749"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.077536"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.146191"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.146305"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.180232"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.402987"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.326098"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.328716"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.114137"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.106177"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.236033"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.238654"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.536519"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.049074"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.023903"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.055448"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.055006"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.055797"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.086513"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.088684"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.083231"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.091039"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.089403"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.090014"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.086403"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.091352"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.094534"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.091952"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.086616"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.091879"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.090256"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.089573"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.085345"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.088703"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.057634"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.059267"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.057736"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.051892"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.053563"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.049851"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.050107"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.054480"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.055414"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.097505"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.049679"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.050668"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.058551"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.054900"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.052960"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.055201"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.073900"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.078707"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.070007"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.051698"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.053625"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.051643"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.051351"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.087765"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.084068"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.084167"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.056656"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.058103"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.057998"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.058621"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.069859"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.070279"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.074968"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.052657"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.051185"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.058270"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.061497"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.060128"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.133491">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.133491">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.024245"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.025899"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.018396"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.024715"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.024061"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.016175"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

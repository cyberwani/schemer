<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="742" assertions="804" failures="0" errors="0" time="61.276502">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.019589">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.019589"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.028344">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.028344"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.032603">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.027933">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.014841"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005341"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.007751"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.004670">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.004670"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.009225">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.009225">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003000"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003048"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003177"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.191473">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.191473">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.032597"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.016837"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.013995"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.013907"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.013885"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.013836"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.014689"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.015491"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.014083"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.014037"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.014061"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.014055"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.036314">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.012638"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.010322"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.013354"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.146258">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.341974">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.036680"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.039374"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.037747"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.032936"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.047551"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.035446"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.059590"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.052650"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.137051">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.045875"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.041268"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.049908"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.521246"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.039976"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.033717"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.036266"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.036028"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.285677">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.285677">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.029424"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.033300"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.030107"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.030729"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.030608"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.032266"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.030644"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.038319"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.030280"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.074958">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.074958">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.018589"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.056369"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.256238">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015114">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004194"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003590"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003629"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003701"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014632">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004138"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003423"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003600"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003470"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012404">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003071"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003077"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003204"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003052"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.121649">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.008180"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005169"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005369"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005477"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005338"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005353"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.007759"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.007727"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005543"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005403"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005061"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005617"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005870"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.006111"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004085"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006845"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.006007"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004572"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005918"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005784"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004462"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.026856">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005387"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005363"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005326"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005454"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005326"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004671"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004730"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006359"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006441"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006380"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006350"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.006045"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004726"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004909"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005477"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.005031"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004465"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.209260">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.136382">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.004359"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.005021"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005570"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004475"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004028"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004272"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004220"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004096"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004267"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.004957"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005543"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005203"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005295"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005393"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.004891"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.005156"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004177"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004039"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004119"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004889"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.005552"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.003913"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004516"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.003890"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.003969"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.004948"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.003862"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.003911"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.003897"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.003954"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.032190">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.004968"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004195"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005139"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.003964"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004815"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.005009"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004099"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.025991">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003776"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003694"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003660"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003660"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003702"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003794"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003705"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.014099">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003500"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003679"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003513"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003407"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.017081">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004463"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.004096"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.004231"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004291"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015778">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003784"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.004030"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003996"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003968"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.006161"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.030426">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004743"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004022"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005115"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003462"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004769"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004839"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003476"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.027554">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004262"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003798"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004858"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003306"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004053"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004020"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003257"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.029715">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.005478"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003992"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004713"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003317"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004480"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.004499"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003236"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.026824">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.003956"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003427"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004160"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003281"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004465"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004113"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003422"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.029981">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004780"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.003839"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004551"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003770"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004721"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004585"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003735"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.027312">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004622"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003382"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004317"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003294"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004173"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004072"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003451"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.008963"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.027241">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004438"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003511"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004274"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003397"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004043"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004250"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003328"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.004816"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.025576">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.003701"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.003737"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003527"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.003640"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003627"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003723"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.003621"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.016993">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003428"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003298"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003520"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003410"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003336"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.103210">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.003937"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.003923"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.003899"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.003958"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004375"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004562"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004352"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004497"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004342"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004358"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004288"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004362"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004566"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004483"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004486"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004275"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004330"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004299"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004145"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004308"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004445"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004383"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004290"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004347"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.015963">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005186"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005697"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005080"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004057"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.011104">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.003763"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003592"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.003749"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.110509">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003343"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004027"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004139"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003295"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003207"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003260"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003317"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003340"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003386"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004071"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004175"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004248"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004204"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004353"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004315"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004103"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003487"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003459"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003299"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004026"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004351"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003294"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003627"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003298"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003407"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004181"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003420"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003393"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003313"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003171"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.016428">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003119"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003307"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003344"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003333"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003326"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012455">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003051"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003133"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003117"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003154"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.018325">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003042"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.002984"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.002912"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003107"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003137"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003143"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.022351">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003171"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003101"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003094"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003201"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003151"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003326"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003307"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.016193">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003642"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003222"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003047"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003129"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003153"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.090453">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003487"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003281"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003341"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003444"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.003876"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.003855"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.003771"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.003820"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.003885"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.003954"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.003820"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.003762"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.003888"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004009"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.003896"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.003785"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003882"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003691"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003492"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003779"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003805"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003806"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.003960"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004164"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.015593">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005124"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005489"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.004980"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.034089">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003076"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003043"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003089"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003075"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003033"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003230"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003138"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003151"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003115"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003052"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003087"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009274">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.002978"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003142"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003154"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.040013">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003598"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003623"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003650"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003695"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003733"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003792"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003612"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003720"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003582"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003474"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003534"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011404">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003726"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003815"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003863"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.016273">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003391"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003233"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003185"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003252"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003212"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015652">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003086"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003203"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003285"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003080"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.002998"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019000">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.003690"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003830"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.003910"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003903"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003667"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017835">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003600"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003607"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003489"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003585"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003554"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.025577">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003033"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003168"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003329"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003299"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003161"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003160"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003144"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003283"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009538">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003236"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003151"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003151"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.028985">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003548"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003570"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003606"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003576"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003681"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003630"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003613"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003762"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011201">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003821"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003724"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003656"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.015199">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.002996"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.002999"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.002981"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003055"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003168"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.025369">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003166"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003141"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003158"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003249"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003213"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003147"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003147"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003148"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.236401">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004037"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006080"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.005947"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006160"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.005973"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.005581"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.005991"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006187"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006213"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006381"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006242"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006298"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006165"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006161"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006342"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006132"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006174"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006179"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006218"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006250"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006250"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006320"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006233"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006283"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006242"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006250"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006129"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006124"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006190"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006184"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006178"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006174"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006189"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006243"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006253"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006170"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006229"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006072"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.003977"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007568">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003748"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003820"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.087030">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.004989"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005022"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005248"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004416"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.004508"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004561"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.004984"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.004715"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004241"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004167"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004350"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004231"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004117"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004215"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004139"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004294"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004169"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005164"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005500"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.239985">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004058"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006208"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006310"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006221"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006128"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.005897"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006391"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006340"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006293"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006345"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006369"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006421"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006238"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006231"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006462"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006182"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006335"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006311"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006092"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006058"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006142"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006272"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006276"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006254"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006290"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006308"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006212"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006159"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006275"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006254"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006271"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006305"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006304"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.006290"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006303"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006275"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006273"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006364"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004268"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.007843"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.041494">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.007314"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.007168"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.006994"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.006929"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.006489"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.006600"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.315653">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.009936"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.011210"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.011486"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.009820"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.009966"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.009880"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.009855"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.009871"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.009475"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.011368"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.011592"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.011710"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.011516"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.012038"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.011760"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.011415"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.009472"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.009629"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.009503"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.011246"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.011409"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.009797"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.010629"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.009775"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.009783"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.011781"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.009948"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.010071"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.010211"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.009501"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.017294">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003517"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003504"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003487"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003325"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003461"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.036862">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003285"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003285"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004006"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003268"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003124"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003112"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003220"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005034"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005242"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003286"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="54.850813">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="54.850813">
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.094184"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.085983"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.083606"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.086674"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.088344"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.085989"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.081633"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.089336"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.123404"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.120074"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.113093"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.112634"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.224465"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.202589"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.230790"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.118322"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.123108"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.089316"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.103101"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.075024"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.057703"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.063202"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.063135"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.060754"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.060664"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.059003"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.059701"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.059504"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.057793"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.066951"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.068973"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.139448"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.134355"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.136759"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.106088"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.103657"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.074277"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.078398"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.124325"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.119344"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.105124"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.099460"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.106973"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.080589"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.080283"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.081814"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.080909"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.081977"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.084928"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.085555"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.085023"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.078925"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.084587"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.085029"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.103588"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.079566"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.088096"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.947142"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="4.881730"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.792998"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="3.795497"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.848148"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.797027"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.781595"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="4.712877"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="3.857538"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.008035"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.053593"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.056584"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.062332"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.058542"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.055772"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.056108"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.048661"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.050229"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.068738"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.067469"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.138567"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.144535"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.172330"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.075756"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.069631"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.066150"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.068397"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.060576"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.059911"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.073310"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.075157"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.069132"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.102199"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.097562"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.096560"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.133392"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.076869"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.074851"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.078328"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.093612"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.052308"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.052511"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.052698"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.058718"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.052808"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.052690"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.057480"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.063985"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.068960"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.057328"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.063621"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.057900"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.058212"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.057052"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.056931"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.054707"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.055703"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.054767"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.054720"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.051191"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.057491"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.061720"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.058549"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.062129"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.072511"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.062409"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.071370"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.069915"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.071770"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.063605"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.055291"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.091921"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.055634"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.084171"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.085913"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.080602"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.085297"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.085786"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.097804"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.082782"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.085148"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.048963"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.064594"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.056210"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.053255"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.049710"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.059290"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.055428"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.053641"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.049803"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.051253"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.051973"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.054872"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.063664"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.060834"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.058758"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.052681"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.056192"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.071213"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.079116"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.072683"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.071830"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.073289"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.095787"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.096837"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.098777"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.068153"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.060603"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.099725"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.135750">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.135750">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.023716"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.024151"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.024640"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.023383"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.023598"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.016262"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="77.034175">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.191906">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.191906"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.068661">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.068661"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.097595">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.082068">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.060109"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.011074"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.010885"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.015527">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.015527"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.014089">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.014089">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.004406"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.004694"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.004989"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.319401">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.319401">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.054641"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.028352"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.024639"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.023375"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.023561"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.024610"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.026346"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.025822"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.022752"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.021698"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.021620"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.021985"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.085644">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.031627"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.015357"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.038660"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.826273">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.512041">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.056918"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.056031"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.064876"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.043728"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.067853"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.070412"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.076135"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.076088"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.215306">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.063587"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.089064"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.062655"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.622593"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.214613"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.041970"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.056073"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.163677"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.391721">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.391721">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.082968"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.041053"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.037515"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.037429"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.036549"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.038755"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.037383"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.043608"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.036461"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.085623">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.085623">
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.064187"/>
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.021436"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.314855">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.025964">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.013384"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.004316"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.004187"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.004077"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.017037">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004824"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003938"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.004056"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.004219"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014494">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003443"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003639"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003526"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003886"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.146855">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.009763"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005865"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.006399"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.006254"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.006677"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.006580"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.012474"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.009409"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.006753"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.006742"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.006309"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.006926"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.006989"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.007064"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004729"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.007938"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.006654"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.005513"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.006415"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.006235"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.005167"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.030848">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.006020"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.006082"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.006324"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.006073"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.006349"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.005590"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.005644"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.007561"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.007584"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.007528"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.009248"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.007166"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.005607"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.006402"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.006783"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.005782"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004763"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.816365">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.156874">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.004865"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.005510"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.006409"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.005548"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004606"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004465"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004701"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004680"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004442"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005611"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.007188"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.007186"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.006314"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005919"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005462"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.005331"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004360"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004449"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004442"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.006398"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.006191"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.005199"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.005701"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004470"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004451"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005438"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004370"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004448"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004357"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004363"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.036340">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.005390"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004408"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005436"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004302"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005281"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.006105"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.005418"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.035050">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.004921"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.004958"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.005202"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.005027"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.005065"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004882"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.004995"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.019344">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.005087"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.005018"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.004616"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.004623"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.022905">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.006289"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.005498"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.005347"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.005771"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.018922">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.004792"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.004609"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.004741"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.004780"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.008735"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.033519">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005366"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004369"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005459"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003805"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.005373"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.005310"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003837"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.030820">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004829"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003883"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.005316"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003692"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004717"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004649"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003734"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.033374">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.005347"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.004429"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.005337"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003750"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.005347"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005316"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003848"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.030941">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004873"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003848"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004829"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003723"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.005225"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004700"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003743"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.034353">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.005383"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004428"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.005440"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.004257"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.005223"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.005297"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.004325"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.030711">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.005255"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003833"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004723"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003644"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004704"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004874"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003678"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.010160"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.037067">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004665"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.004060"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.007385"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.006078"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.006167"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004775"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003937"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.006133"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.033102">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004887"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004626"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.005136"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004812"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004665"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004291"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004685"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.021627">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.004698"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.004083"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.004297"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.004402"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.004147"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.136635">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.005066"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.005169"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.005093"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.005094"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005633"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.005809"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.005650"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.005483"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.005283"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.005378"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.005295"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.005198"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.005395"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.005356"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.005559"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.005630"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.011911"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.005422"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004936"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.005343"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.005333"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.005318"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.005457"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.006825"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.024624">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.008168"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.008522"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.007934"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.006225"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.014783">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.005657"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.004526"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004600"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.140685">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003908"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.005030"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004899"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.004053"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003781"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003946"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003796"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.004111"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003790"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004783"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.005172"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004801"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.005118"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.005281"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.005064"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.005450"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.004154"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.004463"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.004844"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.005837"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.005613"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.004361"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.005199"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.004325"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.004299"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.006067"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.004896"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.004813"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.004468"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.004363"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.021343">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.004971"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.004266"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.004185"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.004035"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003886"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014850">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003737"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003696"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003724"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003693"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.022835">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003635"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003955"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003734"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003718"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003931"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003862"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.032360">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003974"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.004996"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.004845"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.004489"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.005059"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.004365"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.004632"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.024141">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004574"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.005068"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.005343"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004648"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.004508"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.114184">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.004896"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.004632"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.004610"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.004572"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.005508"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.005695"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004701"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004807"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.004567"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004688"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004821"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004495"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004441"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004457"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004376"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004422"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004536"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.004506"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.004240"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.004519"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.004712"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.005149"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.005441"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.005393"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.022218">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.007717"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.007664"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.006837"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.047172">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.004411"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.004337"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.004234"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003786"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.004238"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.004451"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.004511"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.004179"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.004422"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.004395"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.004208"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014047">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.004774"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.004861"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.004412"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.056962">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.005106"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.005155"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004995"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.004838"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.005012"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.005261"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.007842"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.005075"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.004543"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.004484"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.004651"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014983">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.005006"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.005054"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.004923"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019130">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003715"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003622"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003567"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.004154"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.004072"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019807">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.004273"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.004042"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003677"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003611"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.004204"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.024135">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004746"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.004856"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.005020"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004789"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004724"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.024505">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.005037"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.004877"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.004933"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.004706"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.004952"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.039127">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.005097"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.004880"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.004730"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.004697"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.004968"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.004903"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.004953"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.004900"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.015002">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.004953"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.004963"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.005086"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.044148">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.005727"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.005642"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.005657"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.005629"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.005535"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.005897"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.005693"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.004368"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.015819">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.004796"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.005207"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.005816"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.021112">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.004815"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.004533"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.004195"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003986"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003583"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.033883">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.004077"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.004654"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.004405"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.004577"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.004190"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003972"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003981"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.004027"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.293261">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.005445"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.008847"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.009119"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.007339"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.007180"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.006962"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.007454"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.007695"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.009410"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.007760"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.007466"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.007595"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.007459"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.007571"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.008482"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.007588"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.007581"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.007702"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.007585"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.007678"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.007640"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.007648"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.007688"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.007509"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.007518"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.007332"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.007101"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.007450"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.007440"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.007269"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.007606"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.007102"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.007345"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.007433"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.007395"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.007344"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.007359"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.007393"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.005772"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.008911">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004512"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.004399"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.106792">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.005912"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.006249"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.006491"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.005352"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005548"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.005707"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005924"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005473"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.005150"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.005084"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.005094"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.005123"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.005813"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.005474"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.005388"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.005067"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004932"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.006215"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.006796"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.289433">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.005703"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.007742"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.007976"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.007478"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.007468"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.007207"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.007489"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.009377"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.007580"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.007468"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.007391"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.007781"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.007510"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.007300"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.007592"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.007236"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.007448"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.007322"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.007464"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.007434"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.007378"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.007323"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.007349"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.007310"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.007342"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.007538"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.007337"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.007392"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.007416"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.007357"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.007368"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.007325"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.007440"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.007373"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.007290"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.007245"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.007463"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.008797"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.005424"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.010494"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.053411">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.008553"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.011265"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.008761"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.008547"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.008470"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.007815"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.423135">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.013688"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.013898"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.014181"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.011934"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.011799"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.011756"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.011676"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.011815"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.011726"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.013458"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.014698"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.014813"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.014431"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.018463"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.018104"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.016799"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.015172"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.015259"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.015486"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.017652"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.018021"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.015319"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.016561"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.011760"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.011869"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.014216"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.012022"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.012277"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.012400"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.011881"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.020453">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.004251"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003928"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.004080"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.004250"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003944"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.045780">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003732"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003929"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004837"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.005018"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003894"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003870"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003890"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.006363"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.006405"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003842"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="68.540340">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="68.540340">
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.258405"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.120344"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.111485"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.123199"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.124515"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.258557"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.235458"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.255409"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.132191"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.134860"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.140428"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.142341"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.078910"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.078316"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.079493"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.063930"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.063394"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.063211"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.072551"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.056688"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.082044"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.081313"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.084914"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.057405"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.064375"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.061313"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.062248"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.057201"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.060659"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.059428"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.059569"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.061923"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.071424"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.059226"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.059352"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.062472"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.059002"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.060663"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.062820"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.060919"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.064266"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.071157"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.079612"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.080427"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.070493"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.069144"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.077803"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.071330"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.068088"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.071503"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.068388"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.067381"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.070094"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.068731"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.089375"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.072927"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.067889"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.067591"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.077804"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.069533"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.070354"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.070684"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.078362"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.072597"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.072501"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.069969"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.075767"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.073939"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.082534"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.074235"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.083488"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.093946"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.088803"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.085638"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.131220"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.124801"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.134315"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.090033"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.090977"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.142870"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.147273"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.126229"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.130232"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.788921"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.925324"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.733497"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.439075"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.616572"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.521361"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.931571"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="6.503589"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.893501"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="5.168598"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.167635"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.379412"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.106814"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.113240"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.111945"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.102365"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.100818"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.110008"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.076392"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.072208"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.070162"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.062063"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.103170"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.093068"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.062848"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.066232"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.090853"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.086323"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.211862"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.194648"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.233262"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.150358"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.161847"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.121514"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.129660"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.100681"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.093611"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.137994"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.098147"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.078064"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.076819"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.093692"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.151659"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.117698"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.122742"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.082889"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.075594"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.073236"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.135467"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.127419"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.118871"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.122933"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.117005"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.126280"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.120146"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.118442"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.087077"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.085857"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.085802"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.076194"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.074020"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.073411"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.109615"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.103338"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.180961"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.177215"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.171332"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.139597"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.119457"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.099373"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.109216"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.120897"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.103503"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.139970"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.107510"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.089617"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.084800"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.118164"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.110394"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.113475"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.134457"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.099217"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.099506"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.243101">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.243101">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.105697"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.032496"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.022003"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.031436"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.030073"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.021396"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.005134">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.005134"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.028500">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.004912"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.006154"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.005189"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.006177"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.006068"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004966">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.004966"/>
    </testsuite>
  </testsuite>
</testsuites>

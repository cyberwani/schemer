<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="732" assertions="794" failures="0" errors="0" time="19.126935">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.032433">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.032433"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.046742">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="50" assertions="1" time="0.046742"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.054715">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.044914">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.026039"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.006958"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.011917"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.009801">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.009801"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.014459">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.014459">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.005749"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.004260"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.004450"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.258407">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.258407">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.045267"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.024751"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.017786"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.017558"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.018890"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.017695"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.017532"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.020156"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.019537"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.020744"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.018431"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.020059"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.051533">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.017230"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.014242"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.020061"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="4.363287">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.499414">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.052730"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.055475"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.053907"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.052417"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.068905"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.050327"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.087116"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.078537"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.192285">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.063941"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.055834"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.072510"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="121" assertions="1" time="1.924232"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="133" assertions="1" time="1.586596"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="145" assertions="1" time="0.051422"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="157" assertions="3" time="0.055683"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="171" assertions="2" time="0.053655"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.397071">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.397071">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.043013"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.045450"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.041373"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.042648"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.045096"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.047275"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.042968"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.045225"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.044023"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.109738">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.109738">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.027101"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.082637"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.386442">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.020939">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.006662"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.004842"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.004794"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.004641"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.018245">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.005436"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.004263"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.004225"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.004321"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015458">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003872"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003845"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003862"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003879"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.187109">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.010190"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.006473"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.006662"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.007525"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.008608"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.011090"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.022992"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.012760"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.007529"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.007051"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.007580"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.007394"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.007391"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.009466"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.006090"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.009250"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.007009"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.007303"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.008839"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.008866"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.007041"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.043283">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.008589"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.007985"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.007588"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.008451"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.010670"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.006201"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.006340"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.009659"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.009600"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.010315"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.010194"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.009855"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.007662"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.007580"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.007965"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.007928"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.008109"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="3.291617">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.176007">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.006126"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.006853"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.006759"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.006333"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.006251"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.006451"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.006290"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.006257"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.006159"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.006456"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.006198"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.006095"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.006184"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.006296"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.006174"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.005994"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004906"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.005192"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.005068"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.005863"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.006137"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004957"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.005525"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004922"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.006508"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.006137"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004992"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.005050"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004978"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004896"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.041586">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.006094"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.005110"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.007136"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004883"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005856"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.006968"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.005539"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.033006">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.004611"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.004602"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.004757"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.005107"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.004589"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004630"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.004710"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.017775">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.004379"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.004457"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.004389"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.004550"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.020930">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.005562"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.005151"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.005179"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.005038"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.017691">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.004442"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.004465"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.004397"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.004387"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.007889"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.038314">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.006099"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.005073"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.006190"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.004472"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.006055"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.006065"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.004360"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.039050">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.005456"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.004942"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.006810"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.004825"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.005973"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.005790"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.005254"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.043514">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.006756"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.005016"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.006172"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.004242"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.006970"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.009155"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.005203"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.044055">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.006732"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.005563"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.006924"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.005299"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.007500"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.006663"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.005374"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.045467">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.007671"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.005871"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.007173"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.005653"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.006646"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.007110"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.005343"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.041206">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.006955"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.005132"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.006255"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.004434"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.006048"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.006944"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.005438"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.014309"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.043802">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.006690"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.005434"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.006950"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.005573"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.006985"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.006931"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.005239"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.007697"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.041498">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.006169"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.006508"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.005992"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.006107"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.006163"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.005644"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004915"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.026701">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.004592"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.004956"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.004636"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.006433"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.006084"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.163123">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.007727"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.007666"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.006080"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.005383"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005968"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.006098"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.007171"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.007125"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.007621"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.008004"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.007436"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.006832"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.007366"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.006382"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.006190"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.006644"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.005829"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.007649"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.006425"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.006480"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.008239"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.006760"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.005825"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.006223"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.021720">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.006966"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.007784"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.006970"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.005603"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.017476">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.005657"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.005853"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.005966"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.178391">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.004512"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.005777"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.007578"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.005891"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.006756"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.006603"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.005616"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.006698"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.005151"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.006555"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.006867"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.007077"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.007174"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.007237"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.007054"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.007031"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.005077"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.005082"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.005232"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.006197"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.006468"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.005023"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.005593"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.004859"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.004915"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.006336"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.005068"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.005024"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.005000"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.004940"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.025571">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.005027"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.005503"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.005042"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.004953"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.005046"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.019554">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.004718"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.004600"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.004993"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.005243"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.032210">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.005213"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.005151"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.005265"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.005977"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.005229"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.005375"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.036485">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.005299"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.005331"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.005394"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.005373"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.005132"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.004952"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.005004"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.024512">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.005325"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004791"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.004711"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004865"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.004820"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.134067">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.005431"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.005156"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.005054"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.004692"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.005069"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.005683"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.005638"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.005790"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.005750"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.005618"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.005566"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.005467"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.006324"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.005974"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.006144"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.005810"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.005690"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.006315"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.005195"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.005163"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.005825"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.005057"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.005896"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.005760"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.021525">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.006540"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.007154"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.007831"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.050985">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.004876"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.004949"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.004689"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.004907"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.004732"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.004789"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.004673"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.004508"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.004717"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.004101"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.004044"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012165">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.004061"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.004054"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.004050"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.052135">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.004685"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.004711"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004745"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.004727"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.004674"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.004770"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.004844"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.004739"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.004745"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.004735"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.004760"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014522">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.004811"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.004897"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.004814"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.021221">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.004162"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.004110"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.004099"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.004318"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.004532"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.021627">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.004159"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.004482"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.004773"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.004109"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.004104"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.024349">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004813"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.004789"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.005020"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004897"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004830"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.024065">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.004699"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.004703"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.004696"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.005201"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.004766"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.032672">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.004154"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.004127"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.004140"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.004088"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.004026"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.004048"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.004053"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.004036"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.013074">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.004182"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.004782"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.004110"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.038709">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.005384"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.004723"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.004840"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.004672"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.004660"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.004863"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.004883"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.004684"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014415">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.004826"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.004805"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.004784"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.021570">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.004074"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.004049"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.005264"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.004106"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.004077"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.039393">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.004517"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.005284"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.004358"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.005248"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.005037"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.004945"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.004936"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.005068"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.386461">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.006423"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.009899"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.009781"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.009752"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.009518"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.009018"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.008777"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.008341"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.008445"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.008277"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.008279"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.008559"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.008332"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.008171"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.010075"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.009660"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.010134"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.010294"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.010103"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.015468"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.010320"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.010141"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.010240"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.010500"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.010457"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.011621"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.010570"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.010263"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.010459"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.010282"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.010459"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.010893"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.011022"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.012673"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.010700"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.010521"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.010569"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.010604"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.006861"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.012434">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.006306"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.006128"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.136522">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.007475"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.007910"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.008126"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.006755"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.006914"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.006900"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.006574"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.007034"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.011975"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.006506"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.006466"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.006480"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.006263"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.006269"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.006278"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.006215"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.006077"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.007950"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.008354"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.360881">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.006278"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.009356"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.009340"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.009340"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.009080"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.008706"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.009241"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.009493"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.010039"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.009745"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.010094"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.010441"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.010436"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.008888"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.008740"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.009527"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.009480"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.009539"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.009417"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.011298"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.009579"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.009756"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.009435"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.009305"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.009527"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.010399"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.009732"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.009162"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.008652"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.008199"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.008060"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.008102"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.009543"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.009329"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.009366"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.009322"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.009355"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.009470"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.006109"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.011294"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.062016">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.010533"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.010339"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.010555"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.010499"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.010112"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.009978"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.466586">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.014621"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.016805"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.017264"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.014530"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.014759"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.014646"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.014776"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.014795"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.014529"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.017191"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.017349"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.017259"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.017587"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.017507"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.017293"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.016926"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.014480"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.014667"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.014506"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.016777"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.017194"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.014490"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.015881"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.014402"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.014331"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.015654"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.014218"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.013849"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.014393"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.013906"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.031756">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.004632"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.007620"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.007706"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.005910"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.005888"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.062030">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.005182"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.005189"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.007020"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.005540"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.005553"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.005497"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.005754"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.008517"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.008511"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.005267"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="156" assertions="156" failures="0" errors="0" time="9.960678">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="156" assertions="156" failures="0" errors="0" time="9.960678">
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.124281"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.076682"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.067591"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.045937"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.045829"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.047065"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.121340"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.121338"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.133490"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.063645"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.060334"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.058928"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.067155"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.060532"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.064619"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.059132"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.058868"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.066815"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.067508"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.061336"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.060370"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.053883"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.060243"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.057949"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.101315"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.158248"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.063763"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.077827"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.067596"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.056548"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.060812"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.059817"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.061266"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.055324"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.060373"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.036591"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.036847"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.036574"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.038572"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.037931"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.041816"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.120247"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.118756"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.119484"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.064160"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.063878"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.039073"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.041095"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.039392"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.038639"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.038245"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.038499"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.038077"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.036225"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.037276"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.038588"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.037110"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.038369"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.038137"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.037653"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.037007"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.037524"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.037722"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.038511"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.058081"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.040558"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.043971"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.044044"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.042325"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.040136"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.038406"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.037749"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.039417"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.036257"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.037599"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.039035"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.037138"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.038066"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.040809"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.038011"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.044317"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.045519"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.087000"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.102063"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.078468"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.098196"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.103676"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.119937"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.108685"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.107928"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.117927"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.071257"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.223912"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.175742"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.204570"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.071432"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.074594"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.081916"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.082617"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.085760"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.064253"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.084997"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.045724"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.048273"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.045053"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.047696"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.044805"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.045939"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.039591"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.038177"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.041768"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.042781"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.043684"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.045933"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.042543"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.043613"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.042609"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.065652"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.047000"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.044071"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.041866"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.040502"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.054454"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.055224"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.056179"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.040635"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.041209"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.052014"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.050525"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.051098"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.052124"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.082039"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.077693"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.077485"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.085422"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.111102"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.111360"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.089371"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.112677"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.093798"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.099543"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.095537"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.062621"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.067168"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.038587"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.038286"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.038243"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.058652"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.059175"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.061225"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.069378"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.066063"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.082474"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.038740"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.038471"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.038701"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.159813">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.159813">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.029766"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.031308"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.020730"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.028264"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.028831"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.020914"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

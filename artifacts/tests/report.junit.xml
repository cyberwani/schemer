<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="71.088380">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.019657">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.019657"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.032104">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.032104"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.035600">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.030256">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.015479"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.006030"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.008747"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.005344">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.005344"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.010300">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.010300">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003357"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003381"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003562"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.263478">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.263478">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.042519"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.022157"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.020755"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.019356"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.019303"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.019448"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.019274"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.019626"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.020294"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.019892"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.020088"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.020766"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.042144">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.014597"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.011858"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.015689"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.544646">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.391932">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.043446"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.045039"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.045223"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.039160"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.055246"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.038460"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.064616"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.060742"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.157677">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.051580"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.047401"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.058696"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.681033"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.188430"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.037124"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.044748"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.043702"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.359980">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.359980">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.037849"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.041542"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.038207"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.038082"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.036992"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.039033"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.045982"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.048914"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.033379"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.081679">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.081679">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.019605"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.062074"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.281142">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.017393">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.005166"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.004127"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.004074"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.004026"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.016051">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004755"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003789"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003775"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003732"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013636">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003414"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003349"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003416"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003457"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.132737">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.009552"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005963"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005979"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005919"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.006273"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.006085"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.008635"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.008891"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.006328"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.006062"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005690"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.006079"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005914"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.006186"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004374"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.007366"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.006103"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004882"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.006030"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005878"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004548"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.029975">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.006147"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.006180"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.006067"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.006021"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005560"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.005017"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.005203"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.007178"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.007156"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.007074"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.007019"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.006731"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.005232"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.005191"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005451"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.005360"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004738"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.551605">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.141484">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.004467"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.005175"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005544"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004306"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004498"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004373"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004384"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004412"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004355"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005303"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005445"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005349"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005535"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005344"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005265"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.005286"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004317"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004334"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004255"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004733"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004921"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004176"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004576"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004060"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004267"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005099"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004582"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004423"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004387"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004313"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.033847">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.005353"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004355"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005578"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004397"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005116"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004949"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004099"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.027902">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003766"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003915"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003806"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003884"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.004116"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004202"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.004213"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.015467">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003919"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003866"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003828"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003854"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.018352">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004910"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.004377"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.004624"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004441"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015499">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003876"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003987"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003805"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003831"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.006901"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.033699">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005284"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004359"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005551"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.004000"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.005275"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.005295"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003935"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.031013">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004839"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003868"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.005529"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003742"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004597"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004609"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003829"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.032927">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.005244"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.004268"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.005416"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003820"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.005225"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005112"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003842"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.030970">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004875"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003790"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004704"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003806"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.005232"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004713"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003850"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.034545">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.005207"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004458"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.005432"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.004228"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.005508"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.005195"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.004517"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.031159">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.005052"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.004000"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004973"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003704"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004851"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004836"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003743"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.010397"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.030988">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004899"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003977"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004859"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003858"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004694"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004944"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003757"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.005516"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.029632">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004401"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004179"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004126"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004271"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004395"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004142"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004118"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.019916">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.004006"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.004158"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003969"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003847"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003936"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.122964">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004819"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004540"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004532"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004832"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005276"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.005069"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.005332"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.005277"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.005074"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.005401"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.005176"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.005148"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.005174"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.005301"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.005077"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.005382"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.005264"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.005128"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004991"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.005217"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.005118"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.005321"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.005220"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.005296"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.019291">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.006458"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.006528"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.006305"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.005008"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.013469">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.004397"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.004517"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004555"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.135850">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003858"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004808"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.005055"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003792"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003782"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.004048"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003929"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.004706"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.005128"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.006194"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.006330"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.005242"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.005043"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.005053"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.005074"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004925"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003817"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003915"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003748"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004758"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004965"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003779"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.004522"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.004081"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.004056"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.005039"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.004014"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.004058"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.004156"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003975"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.019605">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003980"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003926"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003970"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003941"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003788"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014278">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003614"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003569"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003536"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003559"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.021574">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003715"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003590"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003569"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003529"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003598"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003573"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.025170">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003669"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003593"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003599"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003531"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003543"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003592"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003643"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.018091">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003626"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003574"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003606"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003673"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003612"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.108811">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003981"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.004006"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.004041"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.004229"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004547"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004558"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004745"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004623"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.004750"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004572"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004826"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004771"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004636"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004627"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004631"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004623"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004690"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.004646"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.004196"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.004626"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.004592"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.004682"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004531"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004681"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.018275">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005874"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.006481"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005920"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.041356">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003874"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003699"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003775"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003754"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003792"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003680"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003812"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003669"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003704"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003889"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003708"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011280">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003734"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003864"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003682"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.048117">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.004344"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.004434"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004422"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.004405"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.004432"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.004483"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.004328"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.004302"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.004349"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.004333"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.004285"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.013145">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.004392"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.004517"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.004236"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018758">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003699"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003717"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003836"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003766"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003740"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017250">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003431"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003439"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003475"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003499"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003406"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.021491">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004092"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003951"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004830"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004388"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004230"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020011">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.004156"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003919"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.004179"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003787"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003970"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.027473">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003383"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003314"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003439"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003407"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003437"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003516"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003502"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003475"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010173">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003238"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003393"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003542"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.033023">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.004185"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003989"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.004192"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.004090"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.004073"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.004512"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003969"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.004013"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012201">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.004030"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.004100"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.004071"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.016920">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003497"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003440"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003335"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003287"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003361"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.026718">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003261"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003401"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003355"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003301"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003283"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003257"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003458"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003402"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.271259">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004534"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006809"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006853"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006920"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.007262"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.006814"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.007185"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.007759"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.007365"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.007273"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.007304"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.007318"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.007122"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.007256"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.007422"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.007202"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.007316"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.007315"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.007300"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.007580"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.007209"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.007253"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006685"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.007036"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.007003"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.007232"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.007156"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.007184"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.007122"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.007272"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.007077"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006792"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006717"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006551"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006693"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006591"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006667"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006631"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.004479"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.008091">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004065"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.004026"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.102710">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.005434"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005562"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.006169"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.005053"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005370"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.005213"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005900"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005543"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.005200"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.005149"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.005164"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.005177"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.005088"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.005048"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004956"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004970"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004859"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.006322"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.006533"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.286305">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.005512"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.007451"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.007510"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.007216"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.007498"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.006907"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.007580"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.007746"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.007543"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.007924"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.007731"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.007941"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.007927"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.007759"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.007875"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.007382"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.007434"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.007348"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.007238"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.007201"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.007321"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.007409"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.007501"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.007385"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.007442"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.007519"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.007392"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.007360"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.007580"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.007352"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.007521"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.007410"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.007249"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.007461"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.007277"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.007286"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.007143"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.007187"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004786"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.008635"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.047370">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.007965"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.008068"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.008087"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.008076"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.007693"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.007481"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.372864">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.011709"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.013755"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.013789"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.011491"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.010884"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.011602"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.011447"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.011485"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.011449"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.013381"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.013574"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.013478"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.013834"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.013860"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.013689"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.013583"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.011347"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.011611"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.011309"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.013167"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.013710"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.011338"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.012772"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.011792"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.011660"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.014212"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.011825"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.011957"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.011746"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.011407"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.020319">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.004131"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.004055"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003962"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.004073"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.004098"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.043536">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003775"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003679"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004623"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003745"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003734"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.004045"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003700"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.006016"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.006372"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003847"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="63.666415">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="63.666415">
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.067434"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.056143"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.076211"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.081267"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.086049"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.064298"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.060319"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.065553"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.057808"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.056270"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.061684"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.063576"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.056870"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.060079"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.058959"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.058417"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.059354"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.060203"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.072207"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.058790"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.119153"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.108495"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.115747"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.119198"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.088946"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.087306"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.082763"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.089679"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.067603"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.062722"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.065774"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.099281"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.108796"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.102877"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.076670"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.076897"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.071087"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.070238"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.064590"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.062042"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.060051"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.064758"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.060617"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.055021"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.056967"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.102258"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.100702"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.104342"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.118663"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.123560"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.123173"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.119145"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.092066"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.263308"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.468914"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.363020"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.284461"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.415923"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.408493"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.789724"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.843317"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.639718"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.422500"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.064030"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.065240"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.075887"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.060043"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.058641"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.068358"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.066929"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.078223"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.093742"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.087765"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.079927"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.063954"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.066713"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.067754"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.073604"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.074727"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.071006"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.072420"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.068948"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.065104"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.065624"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.064087"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.059594"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.060718"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.069191"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.066229"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.124005"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.078484"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.079594"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.083308"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.080856"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.085387"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.075503"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.082840"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.084167"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.074951"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.073347"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.108757"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.102667"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.100563"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.112981"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.099125"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.103841"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.099665"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.105632"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.061204"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.066266"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.062821"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.099335"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.092919"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.100005"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.111503"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.104280"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.094905"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.097181"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.109163"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.117747"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.115268"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.123580"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.139381"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.145674"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.091397"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.168157"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.148055"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.259486"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.234906"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.256569"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.146349"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.153918"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.104790"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.108901"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.166312"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.176163"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.169573"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.086741"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.087454"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.089507"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.093692"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.089259"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.161488"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.165665"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.148064"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.152748"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.106754"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.093489"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.128544"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.124052"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.132074"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.067431"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.067650"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.068201"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.101608"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.109677"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.103538"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.165987"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.168309"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.170088"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.083801"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.133311"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.069643"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.068607"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.068500"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.068538"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.163349">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.163349">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.031071"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.029986"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.021882"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.028846"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.029719"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.021845"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.005115">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.005115"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.026531">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.004702"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.006110"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.004536"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.005450"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.005733"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004635">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.004635"/>
    </testsuite>
  </testsuite>
</testsuites>

<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="67.157015">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.020848">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.020848"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.031641">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.031641"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.036451">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.031101">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.016390"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005976"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.008735"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.005350">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.005350"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.010277">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.010277">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003316"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003397"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003564"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.272425">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.272425">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.042182"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.024276"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.020783"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.020696"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.020573"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.020404"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.020574"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.020495"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.020499"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.020411"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.020687"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.020845"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.042307">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.014644"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.011844"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.015819"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.367775">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.390061">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.043477"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.045051"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.044703"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.038508"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.053286"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.039758"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.066760"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.058518"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.152805">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.049596"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.048385"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.054824"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.565349"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.144090"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.036240"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.039641"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.039589"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.314710">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.314710">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.034668"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.037097"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.033360"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.034018"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.032811"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.035274"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.033551"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.040989"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.032942"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.078938">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.078938">
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.060125"/>
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.018813"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.279873">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.016783">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004915"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003897"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.004014"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003957"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015633">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004622"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003665"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003656"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003690"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013230">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003406"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003241"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003253"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003330"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.129051">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.008684"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005651"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005791"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005313"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005634"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005479"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.007881"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.008445"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.006239"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.006030"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005654"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.006344"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.006316"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.006406"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004235"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.007176"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.006017"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004918"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.006020"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005997"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004821"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.028752">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005637"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005650"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005846"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005863"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005756"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004985"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.005085"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.007092"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.012271"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.007169"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.007122"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.006652"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.005339"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.005193"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005448"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.005445"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004623"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.300136">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.141739">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.004447"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.005201"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005484"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004241"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004332"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004344"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004346"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004313"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004227"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005212"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005375"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005357"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005249"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005266"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005288"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.005168"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004263"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004324"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004261"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.005202"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.005423"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004450"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004812"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004250"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004168"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005338"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004285"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004447"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004365"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004301"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.033509">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.005300"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004348"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005264"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004209"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005010"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.005074"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004304"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.026458">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003989"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003977"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003939"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003928"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003531"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003550"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003544"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013237">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003281"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003371"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003216"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003369"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.017099">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004334"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.004271"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.004267"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004227"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014968">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003723"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003622"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003849"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003774"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.006668"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.031167">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005135"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004175"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005154"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003605"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004803"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004795"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003500"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.029477">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004738"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003644"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.005046"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003522"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004405"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004561"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003561"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.031507">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.005060"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.004119"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.005095"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003537"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.005032"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005029"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003635"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.030027">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004579"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003689"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004691"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003649"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.005105"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004631"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003683"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.032718">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.005193"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004310"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.005197"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.004141"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.005006"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004993"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003878"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.028072">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004639"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003359"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004674"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003539"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004531"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004155"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003175"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.008683"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.025985">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004144"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003301"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004157"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003079"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.003968"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004048"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003288"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.004847"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.027057">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.003651"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004081"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003988"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004002"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003531"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003644"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004160"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.018056">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003881"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003791"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003362"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003571"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003451"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.103283">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004179"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.003930"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.003927"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.003952"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004400"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004344"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004381"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004387"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004528"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004348"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004484"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004354"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004285"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004545"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004455"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004333"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004279"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004444"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.003889"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004456"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004556"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004261"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004288"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004279"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.016648">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005169"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005980"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005499"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004335"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.011467">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.003914"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003738"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.003815"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.110260">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003363"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004264"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004310"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003238"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003261"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003286"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003331"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003301"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003277"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004194"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004158"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004254"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004181"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004449"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004114"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004192"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003270"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003343"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003144"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004042"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004247"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003206"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003723"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003283"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003249"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004349"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003326"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003364"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003274"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003267"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.016992">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003315"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003532"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003522"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003311"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003312"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013451">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003188"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003454"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003197"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003612"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.020478">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003612"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003506"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003473"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003511"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003367"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003009"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.022283">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003189"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003414"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003113"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003278"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003097"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003095"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003097"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.015418">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003096"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003087"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003082"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003089"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003064"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.088471">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003353"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003230"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003396"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003294"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.003792"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.003830"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.003829"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.003776"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.003826"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.003807"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.003761"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.003783"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.003748"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.003758"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.003752"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.003763"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003751"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003769"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003414"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003771"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003790"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003753"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.003758"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.003767"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014990">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.004948"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005256"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.004786"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.033817">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003086"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003021"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003105"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003109"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003111"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003096"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003057"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003074"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003046"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003029"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003083"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009345">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003136"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003102"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003107"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.039346">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003567"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003559"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003559"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003551"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003630"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003555"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003554"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003529"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003570"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003705"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003567"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011010">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003758"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003635"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003617"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015469">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003036"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003056"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003129"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003150"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003098"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015334">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003058"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003036"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003095"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003011"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003134"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018260">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.003631"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003574"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.003766"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003673"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003616"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017772">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003555"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003571"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003553"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003528"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003565"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.024683">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003141"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003125"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003062"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003057"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003060"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003048"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003108"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003082"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009349">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003119"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003104"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003126"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.031142">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003566"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003692"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003961"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003923"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.004035"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003963"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.004055"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003947"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011613">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.004031"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003798"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003784"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.016647">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003134"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003207"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003447"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003433"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003426"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.027019">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003434"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003457"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003431"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003419"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003266"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003103"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003489"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003420"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.248343">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004415"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006791"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006814"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006904"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006777"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.006366"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006834"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006952"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006841"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006863"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006777"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006829"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006657"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006670"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006843"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006711"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006572"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006653"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006639"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006666"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006655"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006619"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006157"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006212"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006183"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006212"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006102"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006093"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006094"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006168"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006148"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006163"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006157"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006181"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006179"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006174"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006176"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006197"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.003898"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007272">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003658"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003614"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.093034">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.004925"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.004957"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005444"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004445"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005010"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004782"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005467"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005027"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004694"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004703"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004630"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004650"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004517"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004563"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004496"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004587"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004450"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005734"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005953"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.253959">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004460"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006828"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006788"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006893"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006845"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.006482"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006878"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006909"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006370"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006534"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006651"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006755"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006171"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006592"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006421"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006440"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006143"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006196"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006161"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006197"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006196"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006179"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006301"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006297"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006245"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006232"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006916"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006772"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006863"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006857"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006934"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006984"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.007000"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.007000"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006976"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006964"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006940"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006986"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004602"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.008403"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.045961">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.007829"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.007821"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.007715"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.007789"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.007420"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.007387"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.348944">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.011123"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.012693"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.012608"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.010561"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.010738"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.010697"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.010878"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.011063"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.010988"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.012805"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.012803"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.012805"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.013055"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.013111"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.013116"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.012869"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.010859"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.011028"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.010758"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.012283"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.012555"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.010706"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.011491"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.010557"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.010551"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.012781"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.010892"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.010975"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.010900"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.010695"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.018031">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003819"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003681"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003748"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003383"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003400"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.036031">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003173"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003154"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.003863"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003241"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003176"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003180"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003041"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.004983"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005178"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003042"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="60.201019">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="60.201019">
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.097036"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.093742"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.077572"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.102721"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.105822"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.236242"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.214461"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.239074"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.120844"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.131163"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.150423"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.155526"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.079609"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.077332"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.075077"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.061937"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.063773"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.066069"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.079031"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.057890"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.080437"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.082336"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.082176"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.060678"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.059843"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.059795"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.060705"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.055974"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.056398"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.058178"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.058308"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.060608"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.060951"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.061170"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.060037"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.060614"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.058432"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.059240"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.059417"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.056342"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.057750"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.064893"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.063806"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.065238"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.065161"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.067616"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.067556"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.067592"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.067530"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.068140"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.064777"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.064023"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.065441"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.064952"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.086242"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.064027"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.064916"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.064846"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.065061"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.065062"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.063826"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.064362"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.064579"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.065195"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.067118"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.063557"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.063432"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.063987"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.066931"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.066763"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.067093"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.080244"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.079512"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.079845"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.124200"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.117169"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.126693"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.083592"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.088394"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.141633"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.140332"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.116318"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.107815"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.162686"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.464673"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.236401"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.303102"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.387410"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.211894"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.430741"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.345532"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.145847"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.045545"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.098713"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.094492"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.087659"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.093140"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.095227"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.093968"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.086857"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.091858"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.058874"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.060726"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.062570"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.054443"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.054866"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.056647"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.055662"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.059861"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.072699"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.073449"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.157621"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.155345"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.164755"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.127792"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.115449"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.113337"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.110974"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.084131"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.082593"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.130362"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.080568"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.057268"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.056909"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.057119"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.084983"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.083742"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.085618"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.053213"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.053150"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.056982"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.094824"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.094360"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.090628"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.095406"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.092684"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.092563"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.088984"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.092299"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.061673"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.060948"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.062082"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.057360"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.060056"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.060080"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.071809"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.078170"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.152818"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.141752"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.147190"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.116673"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.093842"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.089367"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.095614"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.092610"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.098685"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.149943"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.100125"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.079450"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.079581"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.100702"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.104751"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.122633"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.109238"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.104673"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.105791"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.168878">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.168878">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.031712"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.031016"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.023176"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.030986"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.032106"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.019882"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004637">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.004637"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.022784">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.004094"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.005204"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.004056"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.004513"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.004917"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004316">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.004316"/>
    </testsuite>
  </testsuite>
</testsuites>

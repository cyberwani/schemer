<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="73.610610">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.021540">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.021540"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.032253">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.032253"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.036199">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.031113">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.016257"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005885"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.008971"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.005086">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.005086"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.009380">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.009380">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003118"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003040"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003222"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.294018">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.294018">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.041174"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.025919"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.023533"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.022635"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.021491"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.021339"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.023453"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.024107"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.023545"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.022965"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.021509"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.022347"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.050065">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.017328"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.014279"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.018458"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.748591">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.459495">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.050928"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.055519"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.056096"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.043221"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.064092"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.046477"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.075900"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.067262"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.196182">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.061171"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.059319"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.075693"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.727298"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.235662"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.041401"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.045246"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.043306"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.354971">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.354971">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.038573"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.041384"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.037185"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.037668"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.037157"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.040991"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.038700"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.045412"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.037901"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.095719">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.095719">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.022686"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.073033"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.325068">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.025627">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.006317"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.006786"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.006554"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.005970"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.022215">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.005544"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.005556"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.005609"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.005506"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.016037">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003664"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004161"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003853"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004359"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.152478">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.010760"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.006856"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.006592"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.006554"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.007757"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.006650"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.010656"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.009685"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.007751"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.006669"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.006664"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.007239"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.007265"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.007093"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.005100"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.008118"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.006897"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.005330"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.006771"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.006767"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.005303"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.032402">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.006459"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.006321"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.006465"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.006607"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.006550"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.005439"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.005507"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.007678"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.007730"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.007655"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.007323"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.007348"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.005348"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.005517"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005804"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.005835"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.005126"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.517616">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.152256">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.004575"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.005475"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005960"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004441"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004825"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004830"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004796"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004770"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004746"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005668"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005813"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005754"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005815"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005628"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005601"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.005461"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004520"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004579"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004461"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.005273"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.005797"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004709"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.005278"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004482"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004448"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005816"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004600"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004698"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004764"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004673"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.037196">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.005963"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004737"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005968"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004397"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005475"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.005839"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004817"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.029978">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.004430"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.004346"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.004161"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.004403"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.004279"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004181"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.004177"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.015882">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003910"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003894"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003968"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.004110"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.018786">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004999"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.004584"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.004574"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004629"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015639">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003950"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003893"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003905"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003891"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.007147"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.034992">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005650"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004565"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005629"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003962"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.005577"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.005558"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.004051"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.033058">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.005064"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.004091"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.005919"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003990"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.005026"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.005008"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003960"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.034637">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.005689"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.004684"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.005549"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003844"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.005408"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005495"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003968"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.032368">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.005111"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.004000"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.005059"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003893"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.005391"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.005084"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003830"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.035187">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.005456"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004417"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.005350"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.004299"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.005528"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.005603"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.004534"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.032001">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.005536"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.004037"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004997"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003853"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004838"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004885"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003855"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.010424"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.030719">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.005080"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.004105"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004811"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003688"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004637"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004655"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003743"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.005508"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.030572">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004243"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004428"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004416"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004426"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004333"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004344"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004382"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.020350">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.004128"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.004032"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003984"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.004081"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.004125"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.117629">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004754"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004373"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004327"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004271"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004860"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004664"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.005430"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.005015"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.005042"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.005010"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004946"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004960"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004931"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004923"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004982"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004962"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.005072"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.005060"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004648"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.005087"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.005059"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.005093"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.005096"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.005064"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.018951">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.006211"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.006598"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.006142"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004851"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.013150">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.004420"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.004401"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004329"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.126641">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003946"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004738"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004942"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003761"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003799"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003759"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003769"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003949"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003706"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004795"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004843"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004815"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004879"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004908"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004813"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004817"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003711"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003775"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003693"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004663"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004766"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003727"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.004305"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003758"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003753"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004888"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003840"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003886"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003853"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003784"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.018796">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003797"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003726"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003748"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003767"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003758"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014332">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003569"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003606"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003655"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003502"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.020839">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003479"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003499"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003482"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003450"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003463"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003466"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.024289">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003477"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003470"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003471"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003487"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003472"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003458"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003454"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.017327">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003471"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003487"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003472"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003464"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003432"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.098701">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003842"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003757"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003782"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003783"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004346"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004368"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004255"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004250"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.004310"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004285"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004174"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.003958"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.003871"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.003987"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004002"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004013"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004267"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.004303"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003816"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.004250"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.004263"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.004296"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004307"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004216"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.016974">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005536"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005966"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005472"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.036283">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003511"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003432"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003454"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003382"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003435"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003190"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003310"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003159"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003089"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003096"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003225"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009724">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003227"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003106"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003391"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.044144">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.004015"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003981"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004002"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003931"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003940"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003979"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.004050"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.004041"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.004050"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.004062"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.004093"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012453">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.004193"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.004131"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.004129"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017634">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003595"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003524"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003551"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003505"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003459"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018107">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003746"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003574"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003610"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003649"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003528"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.021186">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004294"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.004203"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004333"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004218"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004138"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020539">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.004144"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.004061"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.004250"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.004124"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003960"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.026106">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003494"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003134"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003246"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003302"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003360"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003220"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003109"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003241"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009963">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003352"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003330"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003281"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.031339">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003681"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003616"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003734"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003970"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.004199"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.004097"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.004037"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.004005"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012321">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.004150"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.004086"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.004085"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.016441">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003449"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003497"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003148"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003158"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003189"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.026394">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003473"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003244"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003506"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003199"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003268"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003184"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003178"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003342"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.263927">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004299"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006586"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006594"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006621"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006268"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.006369"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006873"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006873"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006958"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006322"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006450"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006571"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006293"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006978"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.007163"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006851"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.007123"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006936"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006620"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006905"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006907"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006899"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006524"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.007058"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006931"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.007152"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006883"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006947"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.007049"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006846"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.007406"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.007498"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.007252"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.007586"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.007311"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.007193"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.007086"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.007196"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.004549"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.008132">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004135"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003997"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.100000">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.005233"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.006060"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.006363"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.005047"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005262"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.005579"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005673"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005225"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004667"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004898"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.005079"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004850"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004734"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004710"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004832"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004645"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004555"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005912"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.006675"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.285693">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.005058"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006872"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.007047"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.007651"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.007580"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.006924"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.007474"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.008883"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.008700"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.007783"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.007533"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.007308"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.007197"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.007163"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.007500"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.007198"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.007222"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.007209"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.007266"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.007204"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.007634"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.007281"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.007263"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.007847"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.007429"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.007269"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.007519"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.007755"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.007204"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.007019"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006964"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.007086"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.007283"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.008288"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.008110"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.007711"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.007266"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.007283"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004710"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.008714"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.047887">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.008173"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.008064"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.008103"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.008119"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.007716"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.007712"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.369358">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.011885"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.013315"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.013340"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.011248"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.011426"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.011429"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.011351"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.011453"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.011273"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.013174"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.013327"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.013497"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.013520"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.013573"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.013366"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.013205"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.011218"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.011516"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.011401"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.013390"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.014148"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.011536"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.012760"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.011387"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.011219"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.013592"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.011690"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.011866"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.011908"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.011345"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.019742">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.004003"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003943"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003921"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003936"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003939"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.042350">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003698"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003636"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004467"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003749"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003665"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003617"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003628"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005890"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.006177"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003823"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="65.917387">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="65.917387">
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.071887"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.067978"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.064168"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.079280"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.079455"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.163194"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.159555"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.159042"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.085658"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.261847"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.234850"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.255448"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.099315"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.102704"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.140084"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.143206"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.124169"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.123825"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.149790"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.143757"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.106157"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.109780"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.112982"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.102358"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.100961"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.099649"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.094038"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.101515"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.105023"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.103856"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.099427"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.104841"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.103550"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.105416"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.102866"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.104175"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.119967"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.114830"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.114225"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.118639"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.089883"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.091224"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.086746"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.087681"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.057455"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.058828"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.059201"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.078614"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.079088"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.104203"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.105978"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.106338"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.057544"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.058145"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.084507"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.065826"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.066324"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.096997"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.093759"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.097443"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.101573"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.098885"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.095743"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.102017"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.099429"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.100822"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.089030"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.098808"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.548004"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="6.113704"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="6.296603"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.556611"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.702885"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.595661"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.903676"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.688845"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.397933"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.548008"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.073223"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.067144"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.069437"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.115305"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.085779"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.068019"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.067522"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.070352"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.070341"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.072445"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.068761"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.073371"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.071907"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.070141"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.071039"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.073377"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.064351"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.061157"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.064051"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.070691"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.072432"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.070247"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.068215"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.069177"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.062757"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.064379"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.070971"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.073687"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.079725"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.068805"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.066437"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.065889"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.080916"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.083565"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.125057"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.064773"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.063909"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.058512"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.059602"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.062170"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.061686"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.059959"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.062024"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.089449"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.064799"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.065449"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.062251"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.059418"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.125675"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.064309"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.075420"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.064286"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.078107"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.073419"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.076479"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.068990"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.068125"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.069410"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.086122"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.083825"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.167636"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.170827"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.173544"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.090312"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.096170"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.124347"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.131350"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.147137"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.146831"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.130117"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.164823"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.130237"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.083100"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.083112"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.081584"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.070182"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.071915"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.071491"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.070495"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.087805"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.085642"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.086388"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.073644"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.073101"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.071576"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.100666"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.098073"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.098954"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.168988">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.168988">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.032947"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.031038"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.022491"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.029723"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.030383"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.022406"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.005414">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.005414"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.028240">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.005204"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.005734"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.005249"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.006127"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.005926"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.005161">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.005161"/>
    </testsuite>
  </testsuite>
</testsuites>

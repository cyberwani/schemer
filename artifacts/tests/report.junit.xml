<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="67.415074">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.025195">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.025195"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.033743">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.033743"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.037907">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.032320">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.017007"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.006249"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.009064"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.005587">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.005587"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.011163">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.011163">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003740"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003484"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003939"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.289903">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.289903">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.044891"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.028536"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.023467"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.026626"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.021750"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.021262"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.020920"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.019843"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.020528"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.020551"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.020609"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.020920"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.043374">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.015195"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.012139"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.016040"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.494859">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.412239">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.044468"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.045379"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.045406"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.039538"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.057828"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.042943"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.072027"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.064650"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.162756">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.054119"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.049307"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.059330"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.684282"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.120811"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.036016"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.040137"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.038618"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.329903">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.329903">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.035437"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.039596"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.035211"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.035910"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.034810"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.037424"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.034959"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.041254"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.035302"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.080570">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.080570">
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.060905"/>
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.019665"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.262991">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015614">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004631"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003604"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003850"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003529"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014300">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004047"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003350"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003551"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003352"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012421">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003319"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003035"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003049"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003018"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.122625">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.008029"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.004924"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005108"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005400"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005615"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005243"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.007701"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.007971"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.006119"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005567"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005811"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005984"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005741"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.005763"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.003753"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006924"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005860"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004884"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005915"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005763"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004550"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.027488">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005659"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005404"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005447"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005393"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005585"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004938"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004735"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.007087"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.007311"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.007299"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006986"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.006733"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.005031"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.005078"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005281"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.005402"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004662"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.447215">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.136334">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.004424"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.004729"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005411"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.003979"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004300"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.003916"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004083"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004356"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004354"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005187"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005410"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005557"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.004873"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.004758"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.004627"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004919"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004028"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.003967"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.003917"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004753"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004828"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.003881"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004263"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004281"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004340"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005554"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004437"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004422"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004438"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004343"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.034110">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.005385"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004459"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005502"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004225"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005291"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004906"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004342"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.028392">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003989"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.004023"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003930"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003921"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.004221"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004118"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.004190"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.015416">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003940"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003842"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003830"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003804"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.018564">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004526"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.005641"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.003977"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004420"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015178">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003824"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003809"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003744"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003801"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.006268"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.030353">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004786"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004176"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.004809"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003383"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004844"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004851"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003504"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.028639">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004564"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003545"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004935"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003388"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004312"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004500"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003395"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.032208">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.004863"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.004078"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.005153"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.004725"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004837"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.004872"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003681"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.029665">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004795"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003823"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004224"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003901"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004883"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004266"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003773"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.032799">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004775"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004311"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.005000"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003817"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004800"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004880"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.005216"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.031710">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004969"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003552"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.005710"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.004019"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.005018"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004644"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003798"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.010134"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.031329">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.006231"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003851"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004802"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003664"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004505"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004629"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003647"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.005473"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.028881">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004171"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004116"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004107"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004139"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004100"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004130"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004118"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.018429">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003860"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003613"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003443"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003767"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003746"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.117322">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004465"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004508"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004501"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004534"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005005"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004981"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.005051"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.005171"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.005023"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.005035"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004883"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004943"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004778"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004864"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004912"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004781"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.006420"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004932"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004182"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004603"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004894"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004948"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004933"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004975"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.018612">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.006127"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.006462"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.006023"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004706"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.012736">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.004263"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.004219"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004254"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.118077">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003721"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004610"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004736"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003626"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003649"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003406"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003673"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003675"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003585"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004636"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004708"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004423"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004558"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004785"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004131"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004116"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003429"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003715"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003282"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004180"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004311"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003461"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003938"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003346"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003370"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004670"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003356"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003632"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003620"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003730"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.018496">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003815"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003707"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003660"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003611"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003703"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014152">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003565"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003522"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003547"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003518"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.020482">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003485"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003449"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003515"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003426"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003417"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003190"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.024656">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003234"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003474"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003457"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003503"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003568"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003989"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003431"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.017108">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003434"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003506"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003224"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003479"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003465"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.097036">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003872"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003579"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003559"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003856"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004335"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.003862"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.003897"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.003912"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.003956"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.003965"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004135"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.003866"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004006"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004094"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.003949"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004315"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004334"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.004447"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003949"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.004312"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.004350"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.004360"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004201"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.003924"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.016649">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005290"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005874"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005485"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.037842">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003556"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003502"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003475"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003417"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003363"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003496"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003417"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003389"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003496"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003484"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003247"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010008">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003162"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003431"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003415"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.043331">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.004092"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003923"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004190"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.004114"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.004047"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.004095"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003776"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003801"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003938"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003690"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003665"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011714">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003810"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003901"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.004003"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017103">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003435"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003168"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003301"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003593"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003606"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017702">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003505"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003518"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003579"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003529"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003571"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020993">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004189"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.004144"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004331"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004176"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004153"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020024">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003951"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.004033"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003967"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.004017"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.004056"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.027960">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003589"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003479"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003486"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003383"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003464"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003524"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003525"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003510"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010488">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003521"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003515"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003452"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.032507">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.004056"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003951"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.004049"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.004069"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.004084"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.004113"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.004099"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.004086"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012561">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.004194"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.004163"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.004204"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.017961">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003597"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003572"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003590"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003656"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003546"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.028321">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003552"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003534"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003526"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003544"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003546"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003543"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003573"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003503"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.263545">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004688"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.007026"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006744"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006385"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006386"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.005949"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006589"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006418"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006795"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.007053"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.007098"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.007242"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006909"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006788"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.007138"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006755"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006864"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006756"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006816"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.007497"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.007455"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.007759"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.007385"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006811"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006830"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006755"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006827"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006770"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006887"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006974"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006856"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006937"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006895"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006851"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006899"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006817"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006972"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006498"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.004471"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.008333">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004209"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.004124"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.095658">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.005503"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005654"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005904"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004872"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005732"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.005063"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005510"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005067"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004716"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004714"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004440"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004509"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004273"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004454"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004534"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004505"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004432"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005774"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.006002"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.270882">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004433"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006955"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006886"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006418"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006239"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.005951"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.007047"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006580"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006645"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006733"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.007154"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.007294"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006923"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.007093"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.007254"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.007124"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.007207"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.007209"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.007365"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.007288"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.007129"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.007060"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.007010"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006999"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006986"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006924"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006851"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.007020"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.007358"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.007229"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.007475"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.007173"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.007113"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.007081"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.007084"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.008150"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.007648"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.007958"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004836"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.008856"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.050706">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.008487"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.009540"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.008223"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.008577"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.008053"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.007826"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.364533">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.011381"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.013139"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.013029"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.010677"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.011310"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.011693"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.011632"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.011830"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.011528"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.013561"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.013749"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.013323"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.013457"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.013444"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.013405"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.013339"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.011322"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.011488"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.011178"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.013083"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.013174"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.011188"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.011976"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.011046"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.011027"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.013258"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.011316"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.011432"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.011323"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.011225"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.020124">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.004003"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003822"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.004028"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.004187"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.004084"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.042147">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003713"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003602"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004556"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003623"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003659"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003599"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003578"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005932"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.006125"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003760"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="60.181914">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="60.181914">
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.110143"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.105276"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.085814"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.117799"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.114464"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.241660"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.232508"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.257112"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.129075"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.131919"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.133339"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.136662"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.078189"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.074819"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.076110"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.061701"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.062899"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.064585"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.073867"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.058241"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.082844"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.078191"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.082713"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.061948"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.062605"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.062992"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.063669"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.058996"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.058055"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.055371"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.054909"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.061774"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.060792"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.060056"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.055044"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.059655"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.058531"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.058881"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.059941"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.056932"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.058441"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.066520"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.067547"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.068738"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.068434"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.070669"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.070198"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.067494"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.065294"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.069059"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.064964"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.060834"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.061237"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.061478"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.090476"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.066447"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.064488"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.063881"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.064219"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.064870"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.066511"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.068044"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.065067"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.063451"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.069080"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.066340"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.066068"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.065324"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.068745"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.068361"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.069146"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.081595"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.079239"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.079802"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.124014"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.114325"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.118383"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.082716"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.095303"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.144153"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.129329"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.109584"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.114463"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.353816"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.355660"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.481289"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.095083"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.045237"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.226890"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.216562"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.185347"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.114696"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.092503"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.095667"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.097050"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.090858"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.097112"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.099192"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.096029"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.089492"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.095601"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.064802"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.066834"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.067626"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.060489"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.057632"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.060635"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.061923"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.060549"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.076565"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.081299"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.158541"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.160272"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.159110"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.125922"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.112026"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.114554"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.117993"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.091192"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.094380"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.127923"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.095906"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.067242"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.066496"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.072823"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.105313"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.094092"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.097860"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.059315"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.059074"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.064166"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.105687"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.113522"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.096065"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.100146"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.100351"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.105880"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.099924"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.107220"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.070138"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.073107"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.075134"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.080154"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.072197"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.068353"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.084969"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.092817"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.169653"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.176553"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.168891"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.106144"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.104273"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.099690"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.104085"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.103438"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.103732"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.148733"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.109730"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.084847"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.084935"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.109157"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.110142"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.102581"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.090531"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.092485"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.091603"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.144488">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.144488">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.026804"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.027251"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.019111"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.025783"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.026428"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.019111"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004564">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.004564"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.023049">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.004056"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.005210"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.004170"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.004595"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.005018"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004236">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.004236"/>
    </testsuite>
  </testsuite>
</testsuites>

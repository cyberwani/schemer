<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="116.625706">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.033611">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.033611"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.051363">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.051363"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.048213">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.041515">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.021142"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.008288"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.012085"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.006698">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.006698"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.013117">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.013117">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.004259"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.004310"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.004548"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.391861">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.391861">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.061949"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.034433"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.030141"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.029298"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.030253"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.028890"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.029605"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.030569"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.028840"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.029310"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.029280"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.029293"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.056750">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.019590"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.016020"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.021140"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="5.940280">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.633888">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.066265"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.067735"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.068707"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.061007"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.089721"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.068585"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.111415"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.100453"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.264365">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.086708"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.081517"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.096140"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="2.847144"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="2.005538"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.060015"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.064441"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.064888"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.551791">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.551791">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.056862"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.066744"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.059837"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.058183"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.057691"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.062311"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.061276"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.071605"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.057282"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.138181">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.138181">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.031887"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.106294"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.374805">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.022800">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.006439"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.005792"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.005251"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.005318"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.020851">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.006027"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.004863"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.004821"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.005140"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.017720">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004431"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004393"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.004381"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004515"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.174552">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.011883"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.007355"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.007944"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.007825"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.007790"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.008163"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.011605"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.011335"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.008256"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.007929"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.007456"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.008441"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.008336"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.008488"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.005735"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.009524"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.007865"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.006426"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.007978"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.007874"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.006344"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.040062">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.007827"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.007895"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.008207"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.008259"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.007874"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.007069"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.007123"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.010646"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.009481"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.010381"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.009449"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.009780"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.006705"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.006713"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.007859"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.007529"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.006085"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="3.294267">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.190716">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.006223"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.006781"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.007134"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.006060"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.005758"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.005639"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.006066"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.005824"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.005515"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.006728"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.007135"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.007390"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.007117"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.007571"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.006919"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.006742"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.005652"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.005664"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.005664"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.006674"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.006978"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.005457"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.006440"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.005966"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.005575"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.007486"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.006318"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.006313"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.006191"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.005736"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.045317">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.007190"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.006134"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.007449"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.005428"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.006735"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.006759"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.005622"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.036886">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.005166"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.005393"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.005777"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.005254"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.005136"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.005082"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.005078"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.019157">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.004794"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.004791"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.004808"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.004764"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.022801">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.006059"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.005586"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.005593"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.005563"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.019585">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.004919"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.004896"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.004902"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.004868"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.009020"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.041331">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.006625"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.005485"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.006713"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.004602"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.006566"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.006587"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.004753"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.038981">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.006072"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.004841"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.006720"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.004648"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.005991"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.006001"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.004708"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.042762">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.006694"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.005482"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.006750"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.004691"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.006585"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.007586"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.004974"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.039911">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.006155"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.004856"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.006068"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.004714"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.006480"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.005932"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.005706"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.045791">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.007284"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.005511"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.007215"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.005290"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.007011"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.006675"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.006805"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.038956">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.006758"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.004896"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.006073"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.004666"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.005939"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.005902"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.004722"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.013401"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.038227">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.005997"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.004824"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.006015"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.004699"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.006002"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.005985"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.004705"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.006891"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.036565">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.005225"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.005201"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.005198"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.005228"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.005269"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.005229"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.005215"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.024606">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.004908"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.004957"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.004948"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.004914"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.004879"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.150048">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.005738"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.005784"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.005710"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.005752"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.006476"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.006400"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.006461"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.006482"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.006491"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.006464"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.006307"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.006407"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.006359"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.006342"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.006318"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.006322"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.006416"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.006326"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.005727"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.006311"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.006424"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.006366"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.006374"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.006291"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.023712">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.007755"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.008278"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.007679"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.006075"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.017047">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.005718"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.005893"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.005436"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.168014">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.004879"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.005973"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.006120"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.004825"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.004805"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.004835"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.004834"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.004916"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.004766"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.006023"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.006179"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.006175"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.006187"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.006304"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.006164"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.007418"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.006124"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.006221"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.005131"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.006552"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.006049"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.004755"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.005475"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.004891"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.004933"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.007374"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.005247"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.005160"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.004919"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.004779"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.023887">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.004816"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.004733"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.004798"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.004775"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.004765"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.018243">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.004519"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.004532"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.004564"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.004628"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.027453">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.004531"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.004509"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.004531"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.004557"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.004725"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.004600"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.032592">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.004687"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.004752"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.004801"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.004511"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.004519"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.004730"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.004592"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.022496">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004518"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004475"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.004504"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004524"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.004475"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.131824">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.004992"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.005003"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.004959"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.004937"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.005644"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.005701"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.005722"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.005680"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.005709"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.005779"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.005595"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.005574"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.005568"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.005553"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.005616"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.005545"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.005537"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.005595"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.005075"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.005587"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.005643"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.005641"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.005607"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.005562"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.022461">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.007382"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.007828"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.007251"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.049767">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.004540"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.004586"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.004614"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.004481"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.004507"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.004508"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.004484"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.004531"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.004516"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.004477"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.004523"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.013497">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.004495"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.004492"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.004510"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.060233">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.005511"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.005443"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.005677"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.005253"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.005281"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.005296"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.005685"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.005739"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.005791"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.005288"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.005269"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.016112">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.005393"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.005369"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.005350"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.025030">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.005656"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.005345"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.004672"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.004707"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.004650"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.023701">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.004598"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.004597"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.004688"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.004722"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.005096"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.030102">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.006243"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.006325"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.005895"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.006143"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.005496"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.028074">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.005752"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.005698"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.005547"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.005374"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.005703"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.036375">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.004589"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.004539"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.004524"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.004535"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.004559"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.004515"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.004576"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.004538"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.013592">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.004540"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.004513"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.004539"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.045283">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.005403"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.005705"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.005273"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.006310"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.005776"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.005793"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.005293"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.005730"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.017213">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.005894"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.005903"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.005416"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.022958">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.004664"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.004538"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.004533"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.004568"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.004655"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.037585">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.004610"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.005500"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.004598"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.004581"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.004587"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.004550"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.004570"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.004589"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.359495">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.006261"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.009129"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.009204"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.009297"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.009059"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.008452"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.009216"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.009272"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.009806"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.009508"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.009659"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.009496"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.009117"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.009136"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.009873"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.009185"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.009507"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.009575"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.009490"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.009449"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.009167"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.009256"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.009200"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.009268"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.009141"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.009691"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.009395"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.009019"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.009510"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.009853"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.009622"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.009196"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.009554"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.009652"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.009859"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.009621"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.009632"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.009309"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.005858"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.010627">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.005338"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.005289"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.133573">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.007180"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.008103"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.008318"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.006622"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.007521"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.007580"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.008004"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.007211"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.006494"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.006204"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.006304"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.006670"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.006138"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.006439"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.006092"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.006493"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.006029"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.007793"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.008377"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.366685">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.005971"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.009274"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.009281"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.009655"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.009124"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.008587"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.009190"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.009333"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.009932"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.009450"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.009439"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.009860"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.009698"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.009262"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.009979"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.009739"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.009676"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.009394"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.009873"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.009357"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.009726"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.009258"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.009320"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.009805"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.009741"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.009757"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.009315"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.009335"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.009439"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.009485"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.009354"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.009991"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.010004"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.010026"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.010281"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.010001"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.009957"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.009384"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.006432"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.011387"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.064681">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.011087"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.010625"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.011344"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.011297"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.010193"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.010135"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.493641">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.015335"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.017659"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.018235"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.015210"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.015238"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.015256"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.015254"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.015290"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.014999"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.017761"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.018032"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.018013"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.018420"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.018371"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.018258"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.018176"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.015364"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.015347"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.015035"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.017607"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.018030"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.015236"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.016741"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.015268"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.015182"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.018118"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.015533"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.015805"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.015694"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.015174"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.025243">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.005040"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.005057"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.005012"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.005088"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.005046"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.054655">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.004707"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.004682"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.005862"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.004751"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.004669"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.004667"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.004611"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.007987"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.007966"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.004753"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="105.428136">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="105.428136">
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.190470"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.175290"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.188529"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.200647"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.145971"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.143779"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.142352"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.138300"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.099354"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.096272"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.093625"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.122276"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.121789"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.250384"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.254543"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.263345"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.113820"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.109801"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.120517"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.433388"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.390177"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.416544"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.223142"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.237690"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.190446"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.195033"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.144822"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.160894"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.160144"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.215780"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.228806"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.124963"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.128964"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.122928"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.200019"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.187884"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.214361"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.133153"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.145715"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.238083"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.236860"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.199347"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.205145"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.092933"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.091137"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.096517"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.127945"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.126426"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.137474"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.123924"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.128023"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.170497"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.176110"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.178609"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.129995"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.101893"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.105295"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.111647"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.102197"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.105044"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.105293"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.108057"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.098533"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.094228"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.092287"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.109557"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.108439"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.111949"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.108556"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.116236"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.093452"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.091822"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.099434"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.110353"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.104232"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.113531"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.104549"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.168331"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.159545"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.156220"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.158549"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.156203"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.160286"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.152964"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.161648"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.106033"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.106910"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.101089"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.112269"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.171413"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.212511"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.163007"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.173704"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.163912"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.171375"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.168144"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.165536"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.150958"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.152610"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.154257"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.095841"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.098067"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.108656"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.106346"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.111825"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.090234"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.089482"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.132902"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.131694"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.132880"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.092922"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.096563"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.098253"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.093682"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.093785"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.097849"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.097498"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.101192"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.103397"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.104690"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.127981"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.127531"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.265151"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.256353"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.266055"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.169301"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.207080"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.157397"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.167503"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.159284"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.158012"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.151434"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.166717"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.114115"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.108847"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.110320"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.102578"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.102836"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.104698"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.113452"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.120528"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.118512"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.108186"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.106628"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.105834"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.104308"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.103740"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.102126"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="7.484518"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="9.543597"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="9.488796"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="7.417694"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="7.404301"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="7.508940"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="9.438695"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="9.509708"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="7.494370"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="7.546094"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.158874"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.153960"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.157470"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.093924"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.100209"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.103672"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.105979"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.104070"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.255968">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.255968">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.046072"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.050029"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.036008"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.047813"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.045376"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.030670"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.006192">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.006192"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.035102">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.006370"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.007887"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.006508"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.006742"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.007595"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.006070">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.006070"/>
    </testsuite>
  </testsuite>
</testsuites>

<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="742" assertions="804" failures="0" errors="0" time="71.630801">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.019773">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.019773"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.031496">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.031496"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.036049">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.031355">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.015759"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.007062"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.008534"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.004694">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.004694"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.010852">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.010852">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003382"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003292"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.004178"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.218640">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.218640">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.036986"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.017016"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.016144"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.014670"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.016756"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.018152"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.016791"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.016983"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.016445"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.015609"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.016984"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.016104"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.041540">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.014236"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.011796"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.015508"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.498512">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.393757">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.045474"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.045311"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.043274"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.037802"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.053893"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.040499"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.067558"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.059946"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.147886">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.048212"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.043919"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.055755"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.653650"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.179711"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.040105"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.042182"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.041220"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.316962">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.316962">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.033542"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.037162"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.033279"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.034068"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.034063"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.036131"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.034213"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.040472"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.034032"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.082120">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.082120">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.020356"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.061764"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.296792">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.016928">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.005000"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.004054"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.004024"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003850"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015782">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004449"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003804"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003780"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003749"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015554">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003423"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003600"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.004460"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004071"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.139773">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.010099"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005734"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.006299"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005917"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005955"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005987"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.009250"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.009381"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.006121"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.006329"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005838"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.006491"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.006703"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.006870"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004820"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.007873"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.006536"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.005316"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.006346"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.006597"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.005311"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.032249">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.006447"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.006485"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.006496"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.006499"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.006322"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.005493"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.005491"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.008101"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.007638"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.008412"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.007587"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.007132"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.005435"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.005370"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005585"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.005448"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004814"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.513964">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.146993">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.004579"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.005421"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005851"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004719"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004671"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004536"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004374"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004534"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004567"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005413"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005468"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005578"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005479"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005457"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005425"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.005191"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004279"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004384"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004394"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.005739"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.006025"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004424"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004847"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004303"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004387"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005422"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004415"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004387"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004411"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004313"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.033566">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.005371"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004416"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005307"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004196"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005040"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.005155"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004081"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.026679">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003588"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003669"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003614"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003816"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.004019"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004011"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003962"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.014948">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003702"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003784"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003714"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003748"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.018040">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004763"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.004497"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.004468"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004312"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015121">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003809"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003731"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003797"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003784"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.006093"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.030399">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004888"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.003922"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005053"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003340"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004850"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004785"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003561"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.030272">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004529"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003840"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.005237"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003687"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004636"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004586"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003757"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.033376">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.005351"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.004496"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.005325"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003855"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.005177"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005280"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003892"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.031282">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004710"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003849"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004937"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003934"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.005119"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004979"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003754"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.035625">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.005627"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004756"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.005302"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.004636"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.005580"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.005302"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.004422"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.031646">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.005388"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.004011"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.005121"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003776"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004745"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004746"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003859"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.010236"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.030394">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004776"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003864"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004824"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003750"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004717"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004697"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003766"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.005532"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.029004">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004171"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004137"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004143"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004119"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004125"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004143"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004166"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.019416">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003892"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003867"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003983"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003817"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003857"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.119420">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004484"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004523"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004483"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004522"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005059"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.005009"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.005013"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004973"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.005010"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.005613"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.006214"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.005025"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004968"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004921"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.005119"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.005165"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004966"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004995"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004541"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004928"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004915"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004915"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004897"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.005161"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.018531">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005969"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.006355"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.006207"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004932"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.013090">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.004273"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.004406"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004411"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.125140">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.004051"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004587"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004970"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003669"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003955"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003711"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003959"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003762"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003765"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004921"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004745"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004850"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004796"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004678"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004724"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004655"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003663"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003730"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003668"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004589"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004530"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003656"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.004233"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003656"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003676"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004965"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003755"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003797"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003720"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003704"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.018541">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003735"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003640"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003709"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003700"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003757"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014187">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003556"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003572"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003518"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003541"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.020885">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003523"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003478"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003501"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003463"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003458"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003462"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.024447">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003477"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003491"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003508"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003490"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003486"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003476"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003519"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.017470">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003497"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003482"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003509"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003490"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003492"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.101624">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003828"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003893"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003885"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003861"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004394"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004378"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004425"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004380"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.004398"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004387"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004274"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004303"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004246"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004271"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004277"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004276"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004281"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.004267"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003876"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.004340"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.004466"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.004267"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004320"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004331"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.016688">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005464"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005863"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005361"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.037643">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003547"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003312"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003398"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003374"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003400"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003395"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003331"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003456"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003472"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003501"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003457"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010542">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003577"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003539"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003426"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.043980">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003946"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.004045"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003995"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.004013"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003689"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.004055"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003953"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.004040"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.004211"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003994"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.004039"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012489">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.004223"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.004102"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.004164"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017438">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003509"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003543"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003426"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003452"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003508"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017154">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003425"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003416"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003491"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003443"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003379"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020694">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004023"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003879"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004345"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004213"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004234"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020251">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.004080"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003868"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.004096"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.004124"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.004083"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.028186">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003610"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003561"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003495"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003512"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003468"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003510"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003495"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003535"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010502">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003496"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003499"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003507"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.032822">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.004147"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.004104"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.004076"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.004106"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.004235"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.004175"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003838"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.004141"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012776">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.004290"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.004196"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.004290"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.018642">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003721"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.004060"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003676"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003622"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003563"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.028132">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003574"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003519"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003465"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003540"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003467"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003467"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003569"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003531"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.265774">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004568"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006921"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.007140"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.007139"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006968"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.006508"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006852"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006987"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006972"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.007068"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.007251"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.007287"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.007041"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.007602"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.008142"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.007001"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006630"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006887"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006447"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006781"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006695"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006750"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006544"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006464"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006572"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.007679"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.007910"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.007594"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006957"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006848"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006657"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006390"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006638"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006686"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006540"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006597"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006505"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006556"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.005000"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.008671">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004368"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.004303"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.100345">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.005487"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005937"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005941"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.005016"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005234"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.005031"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005499"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005044"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004785"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004771"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004825"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004857"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.005250"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.005252"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004839"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004685"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004704"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005936"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.007252"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.301835">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.005120"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.007274"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.007869"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.007728"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.008248"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.008194"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.007677"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.009054"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.008097"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.007929"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.007681"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.007661"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.007124"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.007447"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.007466"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.007141"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.008013"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.007232"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.008039"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.008286"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.007873"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.007590"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.007544"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.007516"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.007769"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.007691"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.008640"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.008596"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.008486"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.008456"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.009202"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.007118"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.007126"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.007109"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.007082"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.007218"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.008096"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.009325"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.006119"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.008726"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.046222">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.008003"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.008049"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.008047"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.007902"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.007196"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.007025"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.361675">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.010952"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.012176"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.012413"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.010427"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.012902"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.011523"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.011208"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.012972"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.010910"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.012859"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.013152"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.013089"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.014179"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.013387"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.013142"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.013061"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.010993"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.011291"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.011035"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.012890"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.013106"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.010809"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.012091"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.010901"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.011013"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.013145"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.011597"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.011722"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.011508"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.011222"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.019961">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003968"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003962"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.004048"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003987"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003996"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.045925">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003735"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.004423"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004612"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003949"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003664"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003939"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003675"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.006268"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.006928"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.004732"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="64.391082">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="64.391082">
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.111889"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.110575"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.109520"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.099577"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.101334"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.110853"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.095223"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.100453"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.136453"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.137179"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.115604"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.114616"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.244459"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.220995"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.246999"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.125424"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.122727"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.100239"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.108377"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.080345"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.063441"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.062875"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.063717"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.060721"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.060574"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.061001"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.061331"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.058149"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.059659"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.074089"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.074509"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.144915"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.143809"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.155315"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.109701"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.115712"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.079259"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.084536"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.139459"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.123834"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.116474"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.109387"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.121766"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.094124"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.095567"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.095685"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.098985"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.093393"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.094570"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.100512"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.100713"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.096096"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.108479"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.114758"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.138486"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.097350"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.099751"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.349450"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.623780"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.710180"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.582008"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.649076"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.724483"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.762524"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.829238"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.761228"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.447691"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.067623"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.063645"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.059394"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.066142"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.070088"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.067438"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.062416"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.057271"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.078286"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.079733"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.156089"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.155025"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.156241"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.062952"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.063260"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.063729"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.081091"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.075638"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.077471"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.078816"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.079278"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.079823"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.119235"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.114121"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.112779"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.148796"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.089163"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.089325"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.088153"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.097470"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.059610"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.059925"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.059406"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.061054"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.059835"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.060984"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.074414"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.066458"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.068217"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.066154"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.067430"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.067366"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.067490"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.067298"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.068215"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.065586"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.065685"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.065354"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.065157"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.061574"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.058657"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.073643"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.083624"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.075005"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.066786"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.068613"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.082669"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.082511"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.089147"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.067216"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.067978"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.108745"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.070592"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.101599"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.105381"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.096506"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.103200"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.100903"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.098279"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.092933"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.100394"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.057576"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.057139"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.062096"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.062023"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.059154"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.058740"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.062821"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.061973"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.059489"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.058967"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.061671"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.064250"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.064421"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.065085"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.064316"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.061045"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.060370"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.079507"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.080136"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.081200"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.078857"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.079534"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.109243"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.112818"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.112992"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.068792"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.067156"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.122428"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.173019">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.173019">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.037381"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.032365"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.022567"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.031831"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.028331"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.020544"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="68.918436">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.019221">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.019221"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.028687">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.028687"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.032565">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.027931">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.014643"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005436"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.007852"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.004634">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.004634"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.009248">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.009248">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.002983"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003107"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003158"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.244930">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.244930">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.038519"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.021694"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.018607"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.018632"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.018464"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.018401"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.018333"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.018308"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.018513"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.018387"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.018670"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.018402"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.037582">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.013122"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.010463"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.013997"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.443536">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.376408">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.039754"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.043296"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.044215"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.035206"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.050557"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.037302"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.065576"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.060502"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.146769">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.049481"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.044134"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.053154"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.601850"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.199468"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.036282"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.041768"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.040991"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.338011">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.338011">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.036157"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.040041"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.036070"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.037023"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.035912"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.038016"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.036750"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.042487"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.035555"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.083662">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.083662">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.020767"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.062895"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.276016">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.016991">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.005001"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.004015"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003994"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003981"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015875">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004625"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003741"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003721"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003788"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013588">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003403"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003393"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003394"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003398"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.131085">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.008945"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005629"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005904"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005889"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.006299"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005996"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.008706"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.008755"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.006176"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005993"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005522"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.006009"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.006328"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.006352"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004398"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006974"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.006017"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004948"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005786"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005667"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004793"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.028716">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005787"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005835"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005547"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005726"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005821"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.005152"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.005092"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006994"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.007056"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006922"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006965"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.006595"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004941"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004764"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005325"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.005322"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004633"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.327666">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.133923">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.004239"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.005082"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005283"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004245"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004302"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004078"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004057"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004340"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004195"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005140"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005386"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005226"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005117"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005090"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.004850"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004699"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.003909"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004051"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004015"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004695"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004941"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.003929"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004415"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.003948"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.003933"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.004810"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.003985"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004059"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.003963"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.003941"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.030588">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.004746"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.003982"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.004789"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.003835"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004671"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004722"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.003843"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.025378">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003502"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003545"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003806"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003674"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003499"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003700"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003652"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013870">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003644"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003317"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003623"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003286"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.016231">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004555"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.003945"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.003938"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.003793"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013631">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003303"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003499"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003526"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003303"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.005893"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.030054">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004685"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.003900"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.004783"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003574"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.005038"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004641"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003433"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.027687">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004230"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003675"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004719"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003219"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004057"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004288"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003499"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.029639">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.004649"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003952"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004716"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003351"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004782"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.004764"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003425"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.027685">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004240"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003485"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004265"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003355"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004649"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004266"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003425"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.030463">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004653"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.003931"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004665"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003864"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004773"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004809"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003768"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.028183">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004815"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003717"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004349"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003353"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004243"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004216"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003490"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.009120"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.027347">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004280"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003429"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004339"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003393"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004253"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004233"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003420"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.004960"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.029207">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004285"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004216"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004164"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004145"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004126"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004124"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004147"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.019397">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003914"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003859"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003839"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003912"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003873"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.114839">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004510"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004455"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004517"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004651"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005040"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.005031"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.005037"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.005030"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.005025"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004983"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004922"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004917"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004935"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004936"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004922"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004913"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004935"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004905"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004438"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004567"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004508"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004637"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004490"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004535"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.017223">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005597"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005958"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005668"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004409"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.012786">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.004258"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.004274"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004254"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.123243">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003697"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004498"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004757"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003619"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003764"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003680"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003743"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003767"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003515"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004661"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004701"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004776"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004465"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004823"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004719"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004699"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003693"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003595"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003706"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004543"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004759"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003723"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.004300"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003784"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003719"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004765"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003740"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003590"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003745"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003697"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.018355">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003740"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003610"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003677"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003675"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003653"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013876">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003531"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003514"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003415"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003416"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.020326">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003342"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003515"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003500"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003420"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003166"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003383"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.024405">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003522"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003500"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003499"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003444"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003521"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003474"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003445"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.017255">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003238"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003495"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003495"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003477"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003550"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.097256">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003617"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003843"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003870"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003676"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004414"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004391"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004388"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004391"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.004260"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004051"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004295"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004297"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.003959"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.003950"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004008"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004305"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003981"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003934"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003635"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003999"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003990"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.004043"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.003976"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.003983"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.015834">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005106"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005527"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005201"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.034752">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003302"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003205"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003220"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003147"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003224"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003263"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003110"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003050"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003116"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003057"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003058"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009473">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003070"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003354"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003049"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.039313">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003632"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003640"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003542"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003546"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003572"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003580"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003545"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003562"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003545"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003547"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003601"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011235">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003654"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003849"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003732"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017028">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003137"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003311"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003554"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003548"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003478"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.016241">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003520"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003439"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003128"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003060"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003094"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018659">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.003682"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003607"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004123"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003682"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003565"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017665">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003551"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003482"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003619"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003490"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003523"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.024989">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003074"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003058"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003284"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003091"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003063"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003028"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003053"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003338"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009027">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003033"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.002932"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003062"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.030454">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003785"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003917"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003742"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003970"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003778"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003777"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003799"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003686"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011516">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003815"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003858"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003843"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.016790">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003278"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003254"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003321"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003498"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003439"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.027883">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003480"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003436"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003430"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003522"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003519"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003509"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003484"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003503"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.254496">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004369"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.007492"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006876"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006428"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006232"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.005884"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006164"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006213"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006845"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006898"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006817"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006970"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006690"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006617"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006957"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006776"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006228"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006138"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006330"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006895"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006761"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006748"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006158"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006147"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006195"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006190"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006010"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006177"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006142"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006940"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.007026"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.007064"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.007060"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.007050"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.007104"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.007111"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.007176"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.007111"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.004508"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.008260">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004164"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.004096"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.095992">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.005429"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005873"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.006020"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004970"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005181"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.005128"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005552"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005199"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004853"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004877"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004799"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004801"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004632"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004606"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004598"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004570"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.003967"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005273"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005663"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.250495">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004347"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006463"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006282"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006283"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006178"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.005900"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006414"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006524"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006512"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006588"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006637"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006624"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006395"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006382"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006638"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006364"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006419"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006402"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006433"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006398"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006427"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006322"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006516"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006418"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006410"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006242"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006184"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006099"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006238"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006331"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006484"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006496"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.007301"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.007478"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.007323"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.007192"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.007118"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.007105"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004628"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.008587"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.046442">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.008034"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.007909"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.007630"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.007903"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.007513"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.007453"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.338424">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.011278"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.012770"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.013019"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.010837"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.010972"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.010939"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.010937"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.010848"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.010071"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.012022"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.012371"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.012331"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.012313"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.012372"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.012173"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.012642"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.010329"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.010455"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.010373"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.011979"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.012056"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.010163"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.011187"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.010177"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.010280"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.012014"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.010332"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.010555"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.010475"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.010154"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.018207">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003695"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003682"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003629"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003596"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003605"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.038677">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003365"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003357"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004139"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003397"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003414"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003388"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003379"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005347"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005523"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003368"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="61.877967">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="61.877967">
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.102460"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.094199"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.093416"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.098699"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.094928"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.095119"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.089954"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.094485"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.128202"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.129859"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.105809"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.108203"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.234677"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.210304"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.233656"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.121110"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.124168"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.091333"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.108579"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.076566"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.061282"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.060386"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.060605"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.057919"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.057764"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.057960"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.058425"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.058121"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.058369"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.072343"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.072561"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.140840"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.144564"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.144671"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.109091"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.111778"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.081431"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.089577"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.128902"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.130291"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.113639"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.107725"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.115791"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.088179"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.090186"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.091637"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.088294"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.086440"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.096009"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.100410"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.101505"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.093997"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.102898"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.111769"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.125282"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.086245"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.088091"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.989284"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.296862"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.437359"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.153990"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.226153"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.297722"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.428933"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.862821"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.458906"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.544638"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.109818"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.062558"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.062344"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.085200"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.068518"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.068312"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.077262"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.059169"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.092479"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.089214"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.284707"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.164491"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.162836"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.070995"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.064865"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.064180"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.078665"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.069496"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.069865"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.083739"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.081308"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.082877"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.155075"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.118261"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.149629"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.120294"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.112069"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.090139"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.090025"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.090980"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.072762"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.063406"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.061975"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.065085"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.059299"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.060657"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.066407"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.066368"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.068445"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.067176"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.072569"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.074212"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.075743"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.076720"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.074353"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.079791"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.079826"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.072110"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.068297"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.065153"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.062537"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.062714"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.071882"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.066843"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.068075"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.068633"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.085939"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.091903"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.091337"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.081216"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.117615"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.069674"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.067558"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.102443"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.104999"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.096714"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.102881"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.102996"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.102483"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.104582"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.107501"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.062623"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.060264"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.073113"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.065771"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.063494"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.061370"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.077790"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.062748"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.058898"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.059144"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.061873"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.062223"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.065444"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.066022"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.068552"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.067304"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.067083"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.084737"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.082502"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.082459"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.081196"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.081100"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.109398"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.111269"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.111015"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.071491"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.112776"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.068687"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.163321">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.163321">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.031065"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.029048"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.021444"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.029856"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.030366"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.021542"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004988">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.004988"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.026239">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.004779"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.005789"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.004560"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.005376"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.005735"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004799">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.004799"/>
    </testsuite>
  </testsuite>
</testsuites>

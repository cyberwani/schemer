<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="748" assertions="811" failures="0" errors="0" time="65.508732">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.021365">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.021365"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.029827">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.029827"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.033760">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.028980">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.016002"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005328"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.007650"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.004780">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.004780"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.009222">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.009222">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.002945"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003075"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003202"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.236505">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.236505">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.037381"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.020834"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.018212"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.017890"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.017778"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.017688"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.018013"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.017686"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.017678"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.017786"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.017642"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.017917"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.036759">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.012761"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.010356"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.013642"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.266307">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.361744">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.037907"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.039200"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.039211"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.039512"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.052107"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.037366"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.061424"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.055017"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.142198">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.047411"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.043355"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.051432"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.576468"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.077980"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.034165"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.037244"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.036508"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.328153">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.328153">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.033645"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.036515"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.038024"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.037161"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.036190"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.035802"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.031749"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.040760"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.038307"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.080867">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.080867">
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.062760"/>
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.018107"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.254798">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014604">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004299"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003288"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003494"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003523"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014308">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004070"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003321"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003324"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003593"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.011542">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003058"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.002857"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.002743"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.002884"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.122968">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.008449"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005332"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005630"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005623"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005874"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.006331"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.008574"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.007925"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005713"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005669"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005628"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005878"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005930"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.006015"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.003843"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006355"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005167"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004348"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005158"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005266"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004260"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.026055">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005182"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005015"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005217"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005041"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005600"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004776"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004752"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006452"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006737"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006791"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006793"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.006338"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004845"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004460"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.004727"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.004617"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004033"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.307412">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.123980">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.003826"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.004439"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.004749"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.003740"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.003800"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004101"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004151"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004034"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.003769"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.004491"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.004697"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.004596"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.004625"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.004805"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.004589"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004591"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.003719"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.003791"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.003737"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004454"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004555"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.003749"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004214"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.003674"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.003532"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.004620"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.003783"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.003821"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.003650"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.003679"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.029439">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.004583"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.003805"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.004711"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.003696"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004439"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004442"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.003764"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.024593">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003514"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003491"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003540"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003523"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003512"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003490"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003523"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013277">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003388"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003303"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003282"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003304"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015358">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004134"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.003811"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.003654"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.003759"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013545">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003373"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003397"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003365"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003410"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.005644"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.027780">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004437"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.003728"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.004548"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003204"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004391"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004412"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003060"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.026331">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004040"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003303"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004620"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003142"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.003975"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004031"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003220"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.028073">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.004458"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003832"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004554"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003061"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004425"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.004455"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003288"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.026159">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.003877"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003372"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004085"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003112"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004364"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004111"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003238"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.029207">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004450"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.003828"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004701"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003681"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004396"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004469"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003682"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.026298">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004454"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003331"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004077"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003192"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004003"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004033"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003207"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.008912"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.027099">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004008"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003327"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004141"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003573"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004516"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004330"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003204"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.004613"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.024940">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.003588"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.003425"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003604"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.003561"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003605"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003573"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.003585"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.016898">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003425"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003375"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003340"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003382"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003376"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.109351">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.003968"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.003984"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.003861"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.003868"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004209"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004298"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004539"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004562"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004666"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004538"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004929"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004529"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004679"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004751"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004641"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004624"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004741"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.005266"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004821"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004851"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004738"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004706"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004785"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004797"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.017810">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005904"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.006188"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005718"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004036"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.011713">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.003940"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003919"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.003854"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.113010">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003150"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004363"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004578"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003197"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003277"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003208"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003249"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003276"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003159"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004011"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004319"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004092"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004166"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004749"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004536"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004526"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003516"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003674"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003523"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004471"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004530"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003566"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003641"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003222"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.002949"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004161"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003240"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003380"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003710"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003571"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.017950">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003595"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003522"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003600"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003665"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003568"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013430">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003367"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003357"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003394"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003312"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.019926">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.002868"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003329"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003355"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003458"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003370"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003546"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.073512">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.009351"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.014245"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.006589"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.010807"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.010123"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.009255"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.013142"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.041501">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.007932"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.009099"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.015928"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004956"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003586"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.113030">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.004092"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.004322"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.004313"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.004344"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004988"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.005185"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.006294"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.005331"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.005164"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004961"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004637"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004558"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004124"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004365"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004383"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004570"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004423"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.005806"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.005300"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.004619"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.004642"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.004415"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004178"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004017"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014938">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.004949"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005111"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.004878"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.032958">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003159"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003084"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003072"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003001"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.002901"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.002979"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003008"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.002976"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.002872"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.002815"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003091"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009760">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003104"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003265"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003391"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.042470">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003915"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003851"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003795"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003897"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003928"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003886"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003790"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003814"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003870"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003836"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003888"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011506">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003951"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003935"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003620"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015534">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003201"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003002"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003115"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003120"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003096"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015742">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003134"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003105"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003208"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003116"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003179"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018285">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.003621"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003605"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.003763"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003666"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003630"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017529">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003400"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003465"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003549"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003557"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003558"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.023679">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003119"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003100"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003148"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.002991"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.002884"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.002806"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.002802"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.002829"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.008913">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.002819"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.002987"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003107"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.028163">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003592"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003531"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003535"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003503"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003481"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003443"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003540"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003538"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010827">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003621"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003616"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003590"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.015410">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003081"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003105"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003082"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003091"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003051"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.023197">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003113"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003039"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.002923"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.002836"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.002793"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.002842"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.002808"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.002843"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.231215">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.003757"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.005864"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.005804"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.005969"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006073"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.005511"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006113"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006202"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006041"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006088"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.005911"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006124"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006113"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.005979"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006347"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006044"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006111"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006090"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006086"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006116"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006108"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.005877"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006069"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006123"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.005951"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006144"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006053"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006051"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006200"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.005943"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006127"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.005876"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006149"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006015"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006089"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006128"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006081"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006009"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.003879"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007328">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003631"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003697"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.090046">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.004987"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.004931"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005389"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004456"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.004658"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004415"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.004882"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.004396"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004236"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004108"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004077"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004273"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004076"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004347"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004382"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004975"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004796"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.006207"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.006455"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.255538">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004551"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.005944"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006233"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006240"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006799"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.006239"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006759"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006829"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006942"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006805"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006842"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006964"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006792"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006525"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.007011"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006658"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006754"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006761"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006818"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006295"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006821"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006846"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006881"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006915"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006766"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006993"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006829"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006677"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006712"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006794"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006777"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006857"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006804"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.006806"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006746"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006185"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006210"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006226"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.003931"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.007227"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.040619">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.006993"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.006951"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.006818"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.006782"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.006551"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.006524"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.323948">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.009737"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.011178"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.011289"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.009351"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.009526"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.009508"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.009577"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.010015"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.010579"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.012390"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.011105"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.011384"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.011675"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.012434"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.012573"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.011289"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.010509"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.010873"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.010268"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.012728"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.013178"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.010566"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.010642"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.010563"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.010486"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.011584"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.009629"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.010044"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.009891"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.009377"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.016551">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003232"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003336"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003345"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003310"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003328"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.038611">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003115"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003254"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004133"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003204"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003228"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003249"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003378"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005561"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005936"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003553"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="58.735252">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="58.735252">
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.076404"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.067033"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.069324"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.123431"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.125801"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.080236"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.094836"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.091874"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.105728"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.103001"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.125935"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.135068"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.225959"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.204874"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.239630"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.090574"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.088264"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.083864"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.100831"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.086096"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.085416"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.081344"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.088756"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.057646"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.057482"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.057898"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.061131"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.061254"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.063853"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.067195"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.061649"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.054266"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.051828"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.054124"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.059301"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.056881"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.065297"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.067764"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.060919"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.064506"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.067780"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.056225"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.052985"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.057857"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.059172"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.068281"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.063610"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.065152"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.067407"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.080226"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.069948"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.094617"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.102458"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.100348"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.146217"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.114105"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.082447"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.085025"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.112965"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.108139"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.113938"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.128537"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.130991"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.103954"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.099437"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.101647"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.103740"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.077730"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.076239"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.078418"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.078712"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.053920"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.054529"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.053924"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.058412"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.055786"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.054254"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.060366"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.062186"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.061705"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.065764"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.063237"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.064765"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.096167"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.093222"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.095768"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.078865"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.079359"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.157086"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.168303"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.140055"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.058116"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.057982"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.058718"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.073415"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.069739"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.141959"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.145548"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.148923"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.281774"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.348549"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.545232"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.516700"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.053684"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.983023"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.114033"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.032652"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="3.978732"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.954265"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.058433"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.059107"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.058699"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.091628"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.092792"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.087006"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.093328"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.091479"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.098193"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.093377"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.098034"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.096472"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.096291"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.091920"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.096703"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.095942"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.096404"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.091779"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.096770"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.107949"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.063412"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.063634"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.056041"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.056484"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.053922"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.053959"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.058506"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.061828"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.059470"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.052843"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.052855"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.056774"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.057107"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.056270"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.056441"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.080066"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.087736"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.074471"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.054367"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.054068"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.055505"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.060246"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.092581"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.106905"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.086789"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.058616"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.058198"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.058429"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.058372"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.071717"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.072832"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.077813"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.056627"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.057192"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.063771"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.109113"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.061690"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.141672">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.141672">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.026636"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.025774"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.019139"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.025385"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.026182"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.018556"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004056">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.004056"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.022778">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.004149"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.005094"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.003987"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.004578"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.004970"/>
    </testsuite>
  </testsuite>
</testsuites>

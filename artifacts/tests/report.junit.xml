<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="62.300263">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.020004">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.020004"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.031986">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.031986"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.032818">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.028097">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.014840"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005402"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.007855"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.004721">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.004721"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.009167">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.009167">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.002982"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003039"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003146"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.252908">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.252908">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.038365"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.021985"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.018785"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.018532"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.018619"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.018769"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.019374"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.019470"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.019750"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.019843"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.019689"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.019727"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.040374">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.014040"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.011285"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.015049"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.212067">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.388629">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.042008"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.043419"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.043278"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.037356"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.054271"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.040141"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.067403"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.060753"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.155645">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.051777"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.046895"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.056973"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.523118"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.036535"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.034380"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.037573"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.036187"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.294486">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.294486">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.031899"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.035467"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.031433"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.032003"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.031134"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.032838"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.031728"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.037143"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.030841"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.072983">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.072983">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.018072"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.054911"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.246045">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014753">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004305"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003379"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003523"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003546"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014090">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004059"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003343"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003351"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003337"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012374">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003374"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003074"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003118"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.002808"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.116508">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.007900"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005164"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005077"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005087"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005476"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005342"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.007636"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.007608"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005440"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005218"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005250"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005645"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005448"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.005490"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.003780"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006405"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005301"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004294"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005386"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005161"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004401"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.025653">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005083"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005119"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005167"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005049"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005235"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004449"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004557"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006248"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006311"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006219"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006218"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.005708"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004571"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004780"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.004727"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.004728"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004150"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.260482">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.126064">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.003893"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.004685"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.004665"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.003810"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.003949"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.003755"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.003971"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004044"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.003717"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.004441"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.004680"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.004754"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.004774"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.004899"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.004749"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004499"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.003726"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004036"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.003806"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004508"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004682"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.003802"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004220"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.003721"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.003974"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.004784"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.003960"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.003945"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.003900"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.003715"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.029769">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.004555"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.003880"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.004740"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.003676"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004599"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004451"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.003868"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.025029">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003515"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003731"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003588"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003556"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003697"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003515"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003427"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013231">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003341"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003309"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003310"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003271"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015665">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004209"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.003796"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.003787"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.003873"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013448">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003370"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003361"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003365"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003352"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.005964"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.028796">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004685"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.003714"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.004735"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003220"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004607"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004588"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003247"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.026437">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004045"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003296"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004518"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003208"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004195"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.003955"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003220"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.028376">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.004725"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003746"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004531"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003374"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004423"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.004386"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003191"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.026920">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004077"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003430"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004083"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003230"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004650"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004179"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003271"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.030100">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004624"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.003983"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004671"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003809"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004596"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004614"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003803"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.027489">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004616"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003499"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004251"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003487"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004134"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004129"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003373"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.009042"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.026913">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004254"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003480"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004208"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003261"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004104"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004128"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003478"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.004834"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.026368">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.003770"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.003757"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003687"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.003751"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003779"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003697"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.003927"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.017894">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003670"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003585"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003594"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003525"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003520"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.107547">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004302"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004065"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004047"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004053"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004606"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004470"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004504"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004621"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004660"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004617"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004550"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004483"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004572"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004537"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004508"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004512"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004758"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004508"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004281"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004708"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004639"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004480"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004521"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004546"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.017147">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005531"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.006020"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005596"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004457"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.011925">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.003935"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003986"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004004"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.117008">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003460"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004389"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004765"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003523"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003742"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003709"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003827"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003625"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003445"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004597"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004735"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004645"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004336"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004654"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004321"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004561"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003395"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003394"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003280"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004195"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004259"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003484"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003809"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003446"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003388"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004323"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003401"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003560"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003398"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003342"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.017226">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003523"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003391"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003412"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003485"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003415"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013111">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003216"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003256"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003386"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003253"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.019611">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003276"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003258"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003357"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003185"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003361"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003174"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.022617">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003158"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003164"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003208"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003316"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003284"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003212"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003275"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.016370">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003156"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003241"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003604"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003187"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003182"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.094401">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003554"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003582"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003502"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003489"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004229"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004080"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004024"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004016"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.003980"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.003925"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004124"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004086"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.003980"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.003947"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.003997"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.003899"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003845"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003893"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003555"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003912"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003955"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.004067"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004414"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004346"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.016006">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005388"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005551"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005067"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.035471">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003211"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003153"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003220"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003218"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003125"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003177"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003293"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003267"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003181"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003305"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003321"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009687">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003230"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003202"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003255"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.041948">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003816"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003918"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003793"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003769"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003830"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003913"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003849"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003773"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003710"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003704"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003873"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011440">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003888"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003834"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003718"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.016649">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003339"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003192"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003347"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003429"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003342"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.016475">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003278"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003212"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003376"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003323"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003286"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019085">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.003784"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003930"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004091"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003649"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003631"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017782">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003560"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003567"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003559"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003545"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003551"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.023912">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003161"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003010"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.002875"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.002817"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.002870"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.002988"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003090"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003101"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009143">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003112"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003008"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003023"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.028169">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003532"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003522"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003550"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003563"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003551"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003351"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003464"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003636"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010975">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003687"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003636"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003652"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.015299">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003129"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003119"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003101"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003030"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.002920"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.024614">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.002858"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.002855"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.002982"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003089"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003228"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003354"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003132"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003116"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.286098">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.003906"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006066"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.005836"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006267"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.007789"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.008339"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.008651"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.009011"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.008742"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.007831"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.008213"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.007822"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.007947"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.007776"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.008048"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.009067"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.007703"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.007547"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.007737"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.007663"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.007509"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.007927"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.008316"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.007998"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.008253"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.008332"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.007848"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.008057"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.008236"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.009568"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006136"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.005901"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006150"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006052"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.005887"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.005913"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006001"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006156"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.003897"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007539">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003655"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003884"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.091998">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.004864"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005030"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.006448"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.005331"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005423"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.005159"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005771"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005112"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.005020"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004848"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004550"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004101"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004034"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.003999"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004022"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.003950"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.003929"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005022"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005384"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.237923">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.003954"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006175"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.005905"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006049"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.005935"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.005782"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.005898"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.005974"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006015"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006022"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006055"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006253"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006226"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006067"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006079"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.005903"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006069"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006614"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006139"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006797"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.007382"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.007018"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006412"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006464"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006444"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006384"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006217"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006226"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006251"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006199"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006207"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006218"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006217"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.006238"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006023"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.005951"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006026"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006171"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.003965"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.007420"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.040936">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.006972"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.006923"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.006925"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.006887"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.006680"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.006549"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.314119">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.009587"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.011086"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.011383"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.009706"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.009620"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.009771"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.009552"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.009520"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.009506"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.011260"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.011473"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.011330"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.011605"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.011587"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.011467"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.011160"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.009486"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.010269"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.009885"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.011470"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.011673"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.009757"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.010765"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.009715"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.009795"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.011791"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.010008"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.010155"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.009978"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.009759"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.017273">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003477"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003474"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003422"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003475"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003425"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.036763">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003222"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003183"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.003965"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003204"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003165"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003185"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003151"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005028"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005383"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003277"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="55.662726">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="55.662726">
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.098737"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.097689"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.089696"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.088946"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.090084"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.089639"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.100937"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.107451"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.127804"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.130337"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.105302"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.110941"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.225828"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.200384"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.226390"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.116877"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.135595"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.091281"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.108186"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.076860"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.060443"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.060003"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.060319"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.056831"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.056724"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.057333"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.057792"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.057259"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.057774"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.071281"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.071476"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.137313"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.136289"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.146073"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.123567"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.120331"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.086016"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.082658"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.123263"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.123059"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.113154"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.107169"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.115412"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.086805"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.086763"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.087471"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.087314"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.085356"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.087790"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.088083"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.087247"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.081674"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.092961"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.088970"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.114027"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.086257"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.092207"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.951253"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.248208"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.974091"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="3.836685"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.872396"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.893883"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.775808"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="4.831304"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="3.896961"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.823143"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.052691"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.052015"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.051664"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.056348"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.058122"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.057738"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.050137"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.051117"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.074126"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.073420"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.146249"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.142887"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.144888"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.059691"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.059206"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.058965"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.064003"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.065007"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.064890"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.072390"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.071985"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.072876"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.108652"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.104910"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.141457"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.104568"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.078670"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.078255"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.078253"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.078977"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.052106"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.051967"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.052279"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.052270"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.050822"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.051586"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.056570"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.055959"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.056870"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.056568"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.059699"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.060838"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.062555"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.062287"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.063219"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.060081"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.059560"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.060033"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.060211"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.056085"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.053730"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.054974"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.061026"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.059296"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.059911"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.060307"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.073426"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.073520"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.073920"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.060237"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.103577"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.063850"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.057382"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.087113"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.088328"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.082991"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.089557"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.088238"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.087097"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.082882"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.088168"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.049212"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.049558"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.053101"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.053927"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.050164"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.050718"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.053047"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.053491"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.050109"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.050475"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.051976"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.052635"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.055318"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.055396"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.055997"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.050851"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.051702"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.069473"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.070031"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.070831"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.069278"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.069601"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.093340"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.094875"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.095482"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.058871"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.101516"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.059339"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.133954">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.133954">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.024862"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.024271"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.017978"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.024052"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.024958"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.017833"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004125">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.004125"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.022163">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.003935"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.005124"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.003890"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.004489"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.004725"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.003975">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.003975"/>
    </testsuite>
  </testsuite>
</testsuites>

<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="742" assertions="804" failures="0" errors="0" time="59.388843">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.019051">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.019051"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.027189">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.027189"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.031837">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.027220">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.014359"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005354"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.007507"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.004617">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.004617"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.009094">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.009094">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.002943"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003014"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003137"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.184244">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.184244">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.033740"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.017369"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.013606"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.013246"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.013256"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.013257"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.013240"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.013254"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.013252"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.013234"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.013538"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.013252"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.034567">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.011911"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.009705"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.012951"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.042326">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.329314">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.035312"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.036551"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.036676"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.032213"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.045588"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.033750"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.057363"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.051861"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.135171">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.045282"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.040755"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.049134"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.464856"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.009619"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.033035"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.036003"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.034328"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.267417">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.267417">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.028624"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.031785"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.028295"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.029170"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.028348"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.029966"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.029036"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.033960"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.028233"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.068942">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.068942">
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.052221"/>
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.016721"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.241288">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014511">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004055"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003430"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003510"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003516"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.013796">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004049"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003158"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003300"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003289"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.011932">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003027"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003022"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.002919"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.002964"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.113795">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.007635"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.004798"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005287"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005156"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005030"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005005"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.007215"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.007448"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005150"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005023"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.004859"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005555"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005563"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.005536"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.003777"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006270"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005302"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004175"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005168"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005544"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004299"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.025470">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005051"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005068"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005278"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005095"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.004978"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004383"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004363"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.005905"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006103"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006106"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006155"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.005886"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004609"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004398"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.004757"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.004869"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004250"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.144310">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.124301">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.003998"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.004594"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.004633"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.003750"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.003763"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.003826"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.003763"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.003794"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.003715"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.004432"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.004634"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.004797"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.004654"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.004672"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.004786"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004468"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.003742"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.003792"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.003742"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004376"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004728"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.003795"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004142"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.003733"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.003754"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.004862"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.003801"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.003941"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.003886"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.003728"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.029896">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.004819"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.003795"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.004690"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.003705"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004625"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004443"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.003819"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.024423">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003529"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003486"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003478"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003516"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003483"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003430"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003501"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013172">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003332"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003292"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003308"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003240"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015553">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004167"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.003808"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.003788"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.003790"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013356">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003303"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003364"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003373"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003316"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.005745"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.028240">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004621"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.003717"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.004698"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003202"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004547"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004379"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003076"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.026253">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004010"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003275"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004562"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003195"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004013"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.003963"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003235"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.028067">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.004591"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003735"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004457"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003207"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004531"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.004390"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003156"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.026160">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004024"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003318"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004078"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003194"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004350"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.003976"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003221"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.028913">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004421"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.003735"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004452"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003628"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004403"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004387"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003887"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.027165">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004678"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003627"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004283"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003218"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004138"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.003979"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003242"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.008837"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.025863">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004199"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003298"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004025"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003196"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.003972"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.003949"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003224"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.004794"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.025099">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.003582"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.003746"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003563"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.003552"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003534"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003566"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.003556"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.016647">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003381"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003310"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003216"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003366"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003374"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.101888">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004088"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.003852"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.003913"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.003903"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004456"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004273"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004498"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004296"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004480"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004280"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004372"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004239"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004367"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004220"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004361"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004214"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004377"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004237"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.003997"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004227"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004379"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004230"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004420"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004209"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.015868">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005289"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005580"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.004999"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004014"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.011011">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.003689"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003648"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.003674"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.107884">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003299"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.003944"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004067"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003215"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003248"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003166"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003255"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003290"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003212"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004050"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004072"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004109"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004100"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004176"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004064"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004020"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003148"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003293"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003334"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004064"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004058"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003225"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003732"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003229"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003229"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004059"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003312"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003285"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003359"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003270"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.016175">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003321"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003266"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003259"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003089"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003240"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012212">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003117"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.002917"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003095"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003083"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.018016">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.002945"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.002841"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003043"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003072"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003076"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003039"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.021039">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.002966"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.002911"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003018"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003074"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003097"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.002940"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003033"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.015405">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003097"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003092"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003082"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003086"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003048"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.087814">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003286"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003341"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003359"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003359"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.003806"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.003776"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.003783"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.003790"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.003784"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.003785"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.003710"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.003721"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.003708"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.003717"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.003698"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.003718"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003708"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003727"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003389"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003734"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003763"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003727"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.003728"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.003697"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014783">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.004757"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005301"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.004725"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.033753">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003138"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003073"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003077"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003080"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003058"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003014"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003020"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003019"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003084"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003106"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003084"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009240">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003090"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003078"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003072"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.038619">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003452"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003404"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003523"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003513"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003518"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003551"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003520"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003534"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003544"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003522"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003538"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010799">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003610"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003591"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003598"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015240">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003039"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.002991"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003059"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003106"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003045"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015385">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.002973"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003071"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003173"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003109"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003059"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018105">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.003537"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003620"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.003746"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003624"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003578"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017659">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003536"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003506"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003530"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003536"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003551"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.024649">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003089"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003069"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003065"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003087"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003084"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003062"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003075"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003118"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.008976">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003026"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.002979"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.002971"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.028217">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003617"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003526"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003545"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003454"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003523"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003542"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003503"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003507"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010790">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003599"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003598"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003593"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.015363">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003095"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003105"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003095"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003056"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003012"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.024647">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003116"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003094"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003034"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003047"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003120"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003086"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003078"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003072"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.231637">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.003817"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.005810"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.005777"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.005824"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.005819"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.005441"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.005857"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006074"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006049"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006071"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006107"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006269"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006071"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006059"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006260"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006039"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006100"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006095"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006087"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006114"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006107"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006085"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006099"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006123"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006123"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006130"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006044"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006049"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006112"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006117"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006109"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006087"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006118"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006057"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006129"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006172"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006156"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006171"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.003910"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007265">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003653"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003612"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.084792">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.004910"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.004940"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005120"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004331"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.004443"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004317"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.004954"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.004370"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004146"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004088"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004123"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004136"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004027"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004030"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004076"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004036"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004137"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005142"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005466"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.237005">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.003958"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006095"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006073"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006160"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006104"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.005825"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006189"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006280"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006297"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006299"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006277"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006385"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006241"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006205"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006384"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006104"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006160"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006200"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006207"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006213"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006212"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006204"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006226"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006205"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006228"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006151"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006006"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006038"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006168"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006204"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006176"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006185"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006220"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.006234"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006235"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006235"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006237"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006193"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.003992"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.007379"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.040754">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.006955"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.006790"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.006753"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.006883"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.006856"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.006517"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.311786">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.009931"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.011274"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.011328"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.009397"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.009691"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.009755"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.009764"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.009815"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.009670"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.011207"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.011590"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.011363"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.011363"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.011500"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.011401"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.011249"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.009647"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.009803"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.009720"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.011139"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.011331"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.009453"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.010540"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.009708"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.009685"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.011368"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.009643"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.009895"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.009845"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.009712"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.016983">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003447"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003419"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003386"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003320"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003411"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.036673">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003211"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003199"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.003963"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003179"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003190"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003219"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003059"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.004936"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005427"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003290"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="53.195943">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="53.195943">
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.072224"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.064102"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.065057"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.109005"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.112390"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.070215"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.082411"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.084958"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.096955"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.099866"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.117718"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.127855"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.218052"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.193281"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.213424"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.082249"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.082949"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.077500"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.082407"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.099972"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.087982"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.080540"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.084825"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.059200"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.053251"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.053877"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.057552"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.055710"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.055611"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.055492"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.055734"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.050375"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.053430"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.049187"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.053990"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.053006"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.053407"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.053534"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.053408"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.053318"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.053478"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.053793"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.050272"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.048460"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.050939"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.058226"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.053084"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.054287"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.053833"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.065932"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.066462"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.090149"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.090747"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.090715"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.100250"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.121179"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.072914"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.076471"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.103724"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.098306"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.105929"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.118622"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.118291"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.099836"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.095216"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.095396"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.101731"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.075767"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.073790"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.073854"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.074858"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.049318"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.049016"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.049299"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.049792"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.049447"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.049741"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.053109"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.053280"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.053240"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.058090"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.057413"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.057969"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.080053"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.078510"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.080105"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.066938"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.066521"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.134524"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.134427"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.134636"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.079532"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.055817"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.056115"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.067082"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.066549"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.133186"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.132881"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.133877"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.739154"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.732228"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="4.684241"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="3.742308"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.784115"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.791752"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="4.790042"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.770940"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="3.750081"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.765131"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.053652"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.053332"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.054036"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.083606"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.084743"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.079401"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.084204"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.085284"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.083321"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.079013"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.084219"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.087808"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.087466"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.083083"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.086716"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.087415"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.087560"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.082849"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.086655"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.055915"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.055730"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.055777"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.083635"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.051398"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.048779"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.049197"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.054742"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.053606"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.053847"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.047604"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.048170"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.051539"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.052059"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.051514"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.051869"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.067292"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.068066"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.068349"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.049215"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.049346"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.048278"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.048550"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.080978"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.079162"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.080952"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.055009"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.054730"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.054650"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.054503"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.067171"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.067177"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.067222"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.048365"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.048795"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.054695"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.055218"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.055488"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.122634">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.122634">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.023036"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.022601"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.016036"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.022041"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.023042"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.015878"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

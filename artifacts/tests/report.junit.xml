<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="62.111714">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.020134">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.020134"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.029025">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.029025"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.033070">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.028386">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.014932"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005507"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.007947"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.004684">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.004684"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.009442">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.009442">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003003"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003150"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003289"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.250082">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.250082">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.039031"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.022601"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.018967"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.019027"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.018744"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.018804"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.018683"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.018864"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.018897"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.018659"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.019072"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.018733"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.038422">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.013145"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.010751"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.014526"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.276032">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.375463">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.039711"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.041263"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.041196"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.035364"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.051381"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.038125"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.066290"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.062133"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.158823">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.052888"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.050356"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.055579"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.548751"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.077214"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.035975"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.038152"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.041654"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.314212">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.314212">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.036143"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.039375"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.035641"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.035057"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.031886"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.033431"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.032115"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.038156"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.032408"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.077891">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.077891">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.019347"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.058544"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.264448">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015744">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004724"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003761"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003550"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003709"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015729">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004707"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003745"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003698"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003579"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012835">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003178"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003195"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003203"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003259"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.126818">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.008688"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005613"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005798"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005838"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005806"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005514"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.008077"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.008418"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.006131"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.006108"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005784"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005991"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005822"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.005895"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004275"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006855"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005746"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004718"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005512"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005562"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004667"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.027076">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005649"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005372"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005291"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005348"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005416"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004798"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004843"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006730"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006912"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006404"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006536"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.006103"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004786"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004814"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005113"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.004918"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004289"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.330501">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.139733">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.004170"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.004742"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005325"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004018"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004037"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004095"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.003916"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004024"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.003939"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.004789"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005142"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.004955"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005024"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.004943"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005042"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004870"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004463"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004616"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004322"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.005153"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.005315"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004315"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.005049"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004659"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004462"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005639"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004538"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004666"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004959"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004545"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.034938">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.005608"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004506"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005450"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004387"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005391"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.005261"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004335"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.027841">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.004100"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003965"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003954"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003919"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003931"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004017"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003955"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013793">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003500"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003374"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003448"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003471"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.016703">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004397"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.004132"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.004120"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004054"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014645">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003699"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003620"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003569"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003757"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.006588"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.029678">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005114"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004130"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005022"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003238"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004477"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004437"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003260"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.026958">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004364"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003327"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004509"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003264"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004007"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004245"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003242"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.028230">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.004596"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003748"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004504"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003224"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004445"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.004436"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003277"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.027121">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004381"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003401"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004330"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003242"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004539"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004006"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003222"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.029322">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004590"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.003751"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004685"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003669"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004492"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004457"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003678"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.026545">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004464"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003303"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004230"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003239"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004031"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004022"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003256"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.008976"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.026059">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004116"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003287"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004114"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003251"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004009"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004013"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003269"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.004827"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.025508">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.003639"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.003612"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003617"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.003608"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003863"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003573"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.003596"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.017125">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003441"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003527"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003309"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003385"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003463"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.102135">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004066"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.003931"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.003976"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.003917"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004349"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004511"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004355"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004351"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004407"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004330"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004438"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004262"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004431"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004281"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004288"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004275"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004263"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004267"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.003919"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004289"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004260"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004422"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004263"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004284"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.017112">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005453"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005933"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005726"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004755"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.012544">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.004329"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.004104"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004111"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.110708">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003416"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004115"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004300"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003279"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003310"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003324"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003291"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003270"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003241"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004113"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004168"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004254"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004336"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004421"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004314"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004102"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003254"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003414"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003343"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004003"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004178"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003256"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003684"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003347"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003336"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004211"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003324"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003388"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003454"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003262"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.016809">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003422"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003298"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003283"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003417"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003389"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012252">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003121"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003122"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003064"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.002945"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.019927">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.002882"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003108"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003471"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003483"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003501"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003482"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.023941">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003413"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003405"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003411"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003438"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003427"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003439"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003408"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.016483">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003427"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003397"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003373"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003409"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.002877"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.099119">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003367"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003835"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003800"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003822"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004380"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004298"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004244"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.003956"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.003938"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004373"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004312"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004221"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004285"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004217"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004143"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004173"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004203"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.004288"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003850"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.004258"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.004286"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.004302"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004290"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004279"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.016204">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005413"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005766"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005025"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.035048">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003145"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003094"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003121"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003132"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003110"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003070"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003081"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003114"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003171"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003527"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003482"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010608">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003525"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003531"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003552"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.043370">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.004074"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.004066"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004051"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003978"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003901"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003949"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003914"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003939"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.004040"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003898"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003560"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011071">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003737"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003656"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003678"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015689">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003184"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003106"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003147"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003127"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003125"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.016051">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003105"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003128"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003214"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003127"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003477"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020731">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004105"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.004092"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004275"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004170"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004089"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019108">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003923"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003588"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003585"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.004040"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003972"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.026083">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003446"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003422"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003070"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003133"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003285"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003353"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003380"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.002994"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009592">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003119"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003368"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003105"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.028571">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003759"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003560"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003491"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003551"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003571"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003573"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003473"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003593"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010932">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003648"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003618"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003666"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.015563">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003118"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003125"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003117"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003080"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003123"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.024340">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003066"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003099"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003092"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003052"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003005"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.002849"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003055"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003122"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.241749">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.003919"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006148"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006148"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006189"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006081"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.005814"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006152"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006239"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006267"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006231"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006227"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006339"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006140"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006938"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.007244"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.007003"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.007049"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.007008"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006934"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006914"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006653"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006130"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006165"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006161"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006211"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006200"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.005943"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006095"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006043"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006077"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006171"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006089"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006102"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006193"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006187"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006074"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006164"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006227"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.003879"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007286">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003670"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003616"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.085308">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.004717"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005136"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005360"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004301"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.004438"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004334"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.004782"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.004607"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004198"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004088"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004317"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004135"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004049"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004030"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004056"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004034"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004116"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005229"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005381"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.273949">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.006057"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.007092"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.007042"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.007028"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.007025"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.006636"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.007058"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.007255"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.007185"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.007165"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.007163"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.007364"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.007018"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.007004"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.007263"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.007132"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.007058"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.007294"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.007243"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.007222"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.007257"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.007284"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.007277"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.007181"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.007100"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.007123"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.007003"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006993"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.007053"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.007046"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.007038"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006968"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.007002"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.007124"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.007140"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.007156"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.007165"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.007123"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004612"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.008522"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.046919">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.008061"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.007948"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.007964"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.007958"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.007509"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.007479"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.362574">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.011328"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.012977"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.013243"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.011099"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.011323"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.011311"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.011353"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.011269"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.011064"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.013017"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.013406"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.013348"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.013529"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.013450"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.013215"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.013185"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.011101"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.011303"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.011117"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.012982"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.013406"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.011279"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.012411"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.010695"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.010590"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.012557"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.010476"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.010744"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.013173"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.012623"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.019436">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003929"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003870"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003864"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003872"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003901"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.041422">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003687"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003632"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004430"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003644"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003703"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003593"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003550"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005852"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005971"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003361"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="55.304762">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="55.304762">
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.062282"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.053760"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.073446"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.072593"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.073399"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.058159"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.059974"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.058899"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.053077"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.055914"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.058039"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.060449"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.058288"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.059635"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.057260"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.058613"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.061414"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.065512"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.080799"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.064365"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.120986"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.113324"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.112899"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.114643"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.080537"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.076430"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.083401"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.078567"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.058115"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.058332"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.058813"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.108646"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.118578"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.099619"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.068491"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.068759"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.062087"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.059519"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.060166"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.055161"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.055130"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.055274"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.058425"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.056211"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.069175"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.096966"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.089434"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.082355"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.087448"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.085995"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.091358"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.081975"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.087975"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.798010"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.740133"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="4.775022"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.079144"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.876983"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.791405"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="4.888518"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.943309"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="3.813601"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.819283"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.056862"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.057304"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.057817"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.050296"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.051615"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.060972"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.060119"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.059949"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.070358"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.070810"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.070475"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.052948"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.051277"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.061101"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.062688"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.057625"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.062190"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.056770"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.053046"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.051362"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.053046"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.052316"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.051047"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.052035"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.057835"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.056507"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.092789"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.057878"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.059910"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.063780"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.067212"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.063572"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.065799"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.058864"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.057106"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.063993"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.064383"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.095107"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.092398"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.083955"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.096897"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.093990"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.092200"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.087431"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.094303"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.069333"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.068069"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.063666"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.099663"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.089571"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.089165"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.092509"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.092465"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.087666"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.093186"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.091728"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.091348"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.088010"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.092021"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.104813"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.106119"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.074522"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.156318"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.123527"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.223671"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.212563"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.258416"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.125567"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.125586"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.087981"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.091632"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.138819"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.143514"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.138974"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.069395"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.069734"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.069946"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.069533"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.070270"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.124547"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.124465"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.104376"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.107945"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.076445"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.079954"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.159843"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.103779"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.111809"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.056628"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.056781"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.056630"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.084535"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.082713"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.087341"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.141017"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.140984"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.141728"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.069801"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.117965"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.058044"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.057252"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.057341"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.057523"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.134056">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.134056">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.025427"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.024790"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.017610"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.023694"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.024360"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.018175"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.003941">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.003941"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.021728">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.003923"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.004883"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.003875"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.004307"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.004740"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.003968">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.003968"/>
    </testsuite>
  </testsuite>
</testsuites>

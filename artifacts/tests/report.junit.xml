<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="65.839112">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.021189">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.021189"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.028717">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.028717"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.033659">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.028948">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.015637"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005441"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.007870"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.004711">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.004711"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.009185">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.009185">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.002981"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003045"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003159"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.241382">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.241382">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.038756"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.021880"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.018887"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.017924"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.018042"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.018544"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.018040"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.017964"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.017946"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.017644"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.017733"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.018022"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.037719">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.013181"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.010714"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.013824"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.010709">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.357825">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.038918"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.040091"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.040354"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.033865"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.049188"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.037239"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.063183"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.054987"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.139364">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.045257"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.042475"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.051632"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.414534"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="0.994028"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.033133"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.036090"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.035735"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.305418">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.305418">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.031797"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.035112"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.032424"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.034020"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.035198"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.033777"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.033586"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.037671"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.031833"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.074210">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.074210">
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.055754"/>
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.018456"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.258078">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015249">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004515"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003623"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003554"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003557"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015450">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004224"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.004397"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003358"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003471"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012327">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003090"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.002988"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003044"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003205"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.126967">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.008148"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005042"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005345"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005434"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005342"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005175"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.007536"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.007730"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.006440"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.006165"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005887"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.006625"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.006459"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.006629"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004810"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.007628"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.006290"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004797"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005605"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005460"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004420"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.024991">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005049"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.004929"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005085"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.004965"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.004963"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004384"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004544"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006190"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006240"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006180"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006166"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.006007"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004706"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004633"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.004839"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.004825"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004381"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.277292">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.139093">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.003901"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.004668"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.004845"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.003713"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004087"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.003744"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.003937"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004030"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004212"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.004660"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.004655"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.004734"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005362"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005491"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005932"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.005494"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004714"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004354"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004377"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.005234"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.005528"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004525"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.005048"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004121"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004155"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005478"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004524"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004622"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004385"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004563"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.031087">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.004872"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.003939"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.004907"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.003842"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004680"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004836"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004011"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.026189">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003971"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003680"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003870"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003888"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003553"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003550"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003677"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013424">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003420"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003327"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003349"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003328"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015643">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004155"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.003854"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.003812"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.003822"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013508">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003351"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003318"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003446"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003393"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.005791"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.029912">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004444"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.003779"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.004713"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003442"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004567"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004706"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.004261"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.029297">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004246"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003335"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004753"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003599"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004664"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004919"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003780"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.033947">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.005304"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.004519"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.005125"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003775"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.005584"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005585"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.004055"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.031735">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.005206"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.004046"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.005107"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003967"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.005556"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004219"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003634"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.029282">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004490"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.003824"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004626"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003690"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004427"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004546"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003679"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.027076">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004466"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003308"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004197"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003221"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004185"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004019"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003680"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.008853"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.025816">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004066"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003236"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004108"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003246"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004033"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004029"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003098"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.004635"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.025903">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.003568"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.003581"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003634"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.003855"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003809"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003751"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.003705"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.017233">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003457"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003415"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003574"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003389"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003398"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.103179">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.003975"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.003886"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.003979"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.003898"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004554"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004586"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004563"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004570"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004584"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004540"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004439"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004265"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004260"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004309"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004276"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004294"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004283"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004261"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.003947"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004278"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004428"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004285"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004435"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004285"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.016912">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005302"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005580"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.006030"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004081"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.011503">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.003726"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003658"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004119"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.112350">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003390"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004042"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004177"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003322"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003294"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003275"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003336"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003313"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003243"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004222"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004390"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004420"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004244"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004337"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004335"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004393"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003445"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003403"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003261"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004167"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004367"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003408"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003857"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003589"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003427"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004236"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003382"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003382"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003321"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003371"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.016681">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003403"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003306"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003314"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003378"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003280"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012469">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003127"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003114"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003116"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003112"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.019053">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003118"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003115"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003127"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003340"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003213"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003140"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.021988">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003119"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003131"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003157"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003116"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003128"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003173"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003164"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.015991">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003118"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003216"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003282"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003213"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003162"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.094682">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.004356"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003612"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003457"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003447"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.003922"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004070"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004139"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004047"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.004062"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004016"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004056"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.003968"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004732"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.003978"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.003921"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.003918"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003850"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003820"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003426"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003760"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003785"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003918"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004221"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004200"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.016284">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005394"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005803"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005087"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.034965">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003383"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003175"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003155"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003185"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003152"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003116"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003104"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003240"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003206"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003133"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003116"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009449">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003120"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003158"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003171"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.041609">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003797"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003859"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003770"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003702"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003807"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003874"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003885"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003749"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003695"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003725"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003746"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011509">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003805"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003823"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003881"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.016145">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003188"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003140"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003142"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003466"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003209"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.016067">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003178"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003238"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003294"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003186"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003171"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019461">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.003681"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003874"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004083"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003908"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003915"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018787">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003765"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003724"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003721"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003837"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003740"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.025614">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003224"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003123"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003135"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003138"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003257"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003300"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003192"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003245"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009799">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003172"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003360"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003267"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.029827">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003717"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003731"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003761"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003776"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003681"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003725"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003723"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003712"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011659">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003869"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003876"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003914"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.016075">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003164"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003297"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003212"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003221"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003181"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.025596">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003159"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003407"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003247"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003142"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003141"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003190"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003171"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003139"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.243636">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004006"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006193"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006165"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.007041"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006414"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.005896"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006182"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006257"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006412"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006414"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006383"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006479"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006335"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006348"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006454"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006472"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006325"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006213"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006259"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006468"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006324"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006272"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006333"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006362"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006307"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006316"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006269"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006260"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006197"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.007100"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006373"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006287"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006411"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006536"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006395"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006226"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006531"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006270"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.004150"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007542">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003830"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003712"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.090432">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.005104"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005325"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005607"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004575"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.004705"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004796"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005181"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.004771"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004711"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004230"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004425"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004622"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004241"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004218"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004276"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004262"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004230"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005449"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005704"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.247994">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004140"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006428"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006352"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006538"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006337"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.006300"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006411"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006593"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006598"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006723"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006511"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006692"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006471"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006454"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006845"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006259"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006604"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006462"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006600"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006589"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006337"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006356"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006371"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006336"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006409"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006418"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006430"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006428"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006333"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006346"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006449"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006395"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006412"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.006467"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006480"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006688"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006625"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006499"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004308"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.008101"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.042532">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.007317"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.007190"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.007122"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.007203"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.006946"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.006754"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.336765">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.010172"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.011602"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.012122"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.010093"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.010035"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.010127"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.010013"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.010160"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.010278"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.012921"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.012699"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.012615"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.011856"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.012620"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.011957"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.011723"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.010865"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.010961"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.010704"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.012488"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.012840"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.011052"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.011949"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.010572"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.010169"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.012289"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.010427"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.010632"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.010500"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.010324"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.018882">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003658"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003630"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003854"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003876"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003864"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.041250">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003601"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003596"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004345"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003390"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003580"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003602"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003606"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005813"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005996"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003721"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="59.365997">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="59.365997">
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.103594"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.104502"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.085220"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.117300"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.119008"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.252060"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.226937"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.244594"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.130723"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.128578"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.135170"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.138981"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.079258"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.075684"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.088798"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.063166"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.059744"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.060998"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.058425"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.055808"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.077903"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.078052"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.080946"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.057362"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.061922"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.061958"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.061162"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.059006"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.058161"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.057897"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.059895"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.063041"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.061696"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.056065"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.056456"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.058363"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.056494"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.057059"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.058005"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.057333"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.058150"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.063184"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.062674"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.064378"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.062724"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.067586"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.066269"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.065113"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.066301"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.065981"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.079321"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.061517"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.066793"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.063273"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.063869"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.063660"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.064420"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.068043"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.067847"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.065214"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.061612"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.066363"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.068804"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.069163"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.070002"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.066187"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.064220"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.062006"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.067368"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.069136"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.067947"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.079307"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.081001"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.077012"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.121244"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.113899"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.121101"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.083884"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.087337"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.134178"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.134895"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.116106"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.121059"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.037222"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.053018"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.005876"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="3.976377"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.194372"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.173654"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.461490"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.267906"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.099028"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.202298"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.092462"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.094419"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.088581"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.095019"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.093133"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.113414"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.107572"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.113260"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.074458"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.075349"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.075660"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.066358"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.066160"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.066733"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.058585"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.059235"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.077795"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.079850"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.153182"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.154784"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.154865"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.116209"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.114377"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.111234"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.120043"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.093300"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.137321"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.093644"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.096389"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.069839"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.067108"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.067898"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.099521"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.096881"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.102352"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.060980"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.061198"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.061444"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.107467"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.107086"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.102541"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.104760"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.107233"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.103454"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.100933"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.104849"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.071687"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.070185"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.071354"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.065713"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.067175"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.065356"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.079857"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.084875"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.155175"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.148130"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.161609"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.101261"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.099050"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.096655"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.102700"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.100758"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.142533"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.096378"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.100935"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.083170"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.078639"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.105950"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.106214"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.108482"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.095505"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.092912"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.096091"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.143816">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.143816">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.026759"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.026227"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.019147"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.025726"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.026405"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.019552"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004593">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.004593"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.023057">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.004298"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.005154"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.004072"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.004586"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.004947"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004090">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.004090"/>
    </testsuite>
  </testsuite>
</testsuites>

<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="742" assertions="804" failures="0" errors="0" time="61.918142">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.020219">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.020219"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.029569">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="49" assertions="1" time="0.029569"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.041697">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.034797">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.016617"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.007457"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.010723"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.006900">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.006900"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.010456">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.010456">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003442"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003406"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003608"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.208740">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.208740">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.037448"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.019002"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.015707"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.015297"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.015285"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.015121"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.015171"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.015156"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.015148"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.015173"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.015110"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.015122"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.040545">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.013832"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.011434"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.015279"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.382584">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.382939">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.039728"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.045877"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.042286"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.037096"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.052798"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.038942"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.066303"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.059909"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.155630">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.051996"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.047221"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.056413"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="111" assertions="1" time="1.655161"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="123" assertions="1" time="1.079235"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="135" assertions="1" time="0.034706"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="147" assertions="3" time="0.037667"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="161" assertions="2" time="0.037246"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.293361">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.293361">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.032077"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.033630"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.030313"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.030680"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.029930"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.033225"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.032710"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.038570"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.032227"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.079880">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.079880">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.019611"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.060269"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.273924">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.016766">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004771"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003991"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003969"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.004035"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015818">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004739"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003646"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003687"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003746"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013477">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003414"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003372"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003365"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003326"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.129625">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.008907"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005655"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005980"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.006042"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.006014"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005812"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.008537"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.008776"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005954"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005817"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005526"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.006122"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.006128"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.006218"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004223"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006567"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005842"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004800"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.006026"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005855"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004823"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.029167">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005806"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005745"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005742"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.006004"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005870"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.005086"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.005054"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006972"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.007087"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006939"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006889"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.006440"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004989"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.005036"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005218"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.004856"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004505"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.326502">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.140708">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.004391"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.005119"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005403"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004253"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004290"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004311"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004236"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004282"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004245"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005114"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005365"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005295"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005338"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005330"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005235"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.005137"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004183"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004288"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004212"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.005101"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.005232"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004292"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004722"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004200"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004256"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.005213"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004363"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004413"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004412"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004478"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.035049">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.005493"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004536"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.005514"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004386"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005216"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.005362"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004542"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.028585">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.004106"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.004139"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.004104"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.004070"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.004023"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004096"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.004047"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.015167">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003909"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003788"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003696"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003774"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.017772">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004790"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.004374"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.004304"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004304"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015100">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003781"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003765"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003747"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003807"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.006661"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.032571">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005155"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004367"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005258"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003722"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.005152"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.005208"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003709"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.030346">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004638"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003733"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.005152"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003818"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004661"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004637"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003707"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.032298">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.005242"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.004277"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.005367"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003637"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004956"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005161"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003658"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.029729">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004716"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003718"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004610"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003556"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004845"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004646"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003638"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.032796">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.005209"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004297"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.005125"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.004048"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.005032"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004950"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.004135"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.028431">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004774"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003479"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004639"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003368"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004190"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004318"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003663"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.009962"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.027688">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004380"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003495"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004363"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003301"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004211"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004278"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003660"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.005269"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.028456">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004035"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004117"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004072"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004061"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004057"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004043"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004071"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.019077">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003834"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003813"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003829"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003791"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003810"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.110178">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004428"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004408"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004418"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004624"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005018"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004969"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004959"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004643"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004464"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004468"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004476"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004413"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004776"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004869"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004860"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004905"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004518"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004474"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004086"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004562"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004391"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004441"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004586"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004422"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.016446">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005332"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005868"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005246"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004208"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.011250">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.003761"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003790"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.003699"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.114604">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003446"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004616"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004726"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003618"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003673"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003657"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003653"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003388"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003235"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004238"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004305"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004269"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004571"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004792"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004667"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004404"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003323"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003320"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003427"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004154"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004253"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003422"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003653"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003157"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003144"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004067"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003230"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003265"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003580"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003351"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.017089">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003451"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003411"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003410"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003408"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003409"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012953">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003293"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003217"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003203"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003240"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.019501">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003302"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003289"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003239"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003276"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003187"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003208"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.023115">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003292"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003260"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003238"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003336"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003482"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003289"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003218"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.016290">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003226"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003217"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003292"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003306"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003249"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.096168">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003593"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003590"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003592"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003790"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004268"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004266"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004295"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004264"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.004249"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004251"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004163"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004153"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004143"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004119"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004122"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004065"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003963"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003931"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003552"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003949"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003973"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003952"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004014"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.003910"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.015484">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005105"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005315"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005064"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.035789">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003288"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003196"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003101"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003450"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003451"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003446"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003127"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003265"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003130"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003188"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003147"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010087">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003322"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003360"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003405"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.042945">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003955"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003913"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003925"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003893"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003885"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003885"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003898"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003907"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003868"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003880"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003935"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011258">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003694"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003599"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003965"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.016006">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003316"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003182"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003183"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003161"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003164"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.016262">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003203"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003154"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003276"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003232"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003397"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020286">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.003915"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003964"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004205"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003981"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004221"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020586">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.004133"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.004121"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.004204"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.004082"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.004046"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.027963">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003535"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003483"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003470"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003462"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003452"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003596"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003471"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003494"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010413">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003483"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003461"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003469"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.032335">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.004062"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.004033"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.004046"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.004019"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.004041"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.004042"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.004055"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.004037"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012403">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.004138"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.004126"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.004139"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.017434">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003504"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003485"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003488"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003473"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003484"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.025941">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003135"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003157"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003272"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003244"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003227"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003236"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003419"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003251"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.258524">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004043"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006199"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006629"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006738"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006805"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.006467"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006334"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006413"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006487"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006474"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006548"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006454"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006310"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006263"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.007104"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006842"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006898"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006872"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006872"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006885"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006997"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006871"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006898"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006899"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006918"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006919"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006851"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006836"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006898"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006978"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006889"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006900"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006902"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006910"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006920"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006922"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006914"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006966"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.004499"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.008594">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004330"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.004264"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.099334">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.005650"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005927"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.006179"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.005097"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005353"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.005178"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005703"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005264"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004886"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004886"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004854"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004954"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004729"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004776"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004654"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004672"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004536"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005859"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.006177"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.238680">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004604"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.007060"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006210"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006292"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.005993"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.005731"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006211"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006352"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006113"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006166"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006276"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006728"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006445"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006445"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006415"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006337"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006271"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006382"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006279"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006003"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006309"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006258"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006205"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.005965"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006173"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006257"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006144"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.005993"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006028"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006071"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.005932"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.005932"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006183"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.006251"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006243"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006243"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006242"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.005977"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.003961"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.007411"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.040668">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.007042"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.006896"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.006911"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.006745"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.006513"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.006561"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.319175">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.009778"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.011221"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.011512"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.010013"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.010107"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.010135"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.009814"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.009915"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.009610"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.011203"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.011954"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.012043"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.011955"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.011581"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.011491"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.011216"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.009576"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.009750"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.009945"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.011164"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.011478"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.009732"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.010409"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.009462"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.009695"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.011729"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.009716"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.011281"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.010980"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.010710"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.017460">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003799"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003356"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003476"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003423"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003406"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.043998">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003242"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.002979"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.003849"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003174"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.010756"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003501"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003210"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005028"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005195"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003064"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="55.082665">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="55.082665">
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.074136"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.071563"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.092316"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.089632"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.091220"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.102539"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.095062"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.081736"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.085618"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.086541"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.086116"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.083255"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.086067"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.055635"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.055254"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.055551"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.082757"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.084067"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.078556"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.100743"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.086626"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.087719"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.088916"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.097278"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.075708"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.075495"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.074975"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.939000"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.688070"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="4.692530"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="3.781052"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.963033"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.785889"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.108021"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.014989"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="3.908828"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.005447"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.116580"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.114853"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.085265"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.088985"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.223211"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.197712"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.228762"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.130284"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.130547"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.075316"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.103062"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.105669"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.084168"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.082373"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.080675"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.054442"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.054555"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.058197"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.060352"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.050755"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.049224"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.050210"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.087360"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.057299"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.056961"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.058980"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.058772"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.051711"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.049154"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.052681"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.057465"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.056790"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.057225"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.057098"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.058536"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.056848"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.057675"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.056070"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.073537"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.076116"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.125392"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.121011"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.106033"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.101129"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.108680"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.106293"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.105197"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.081582"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.081257"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.085613"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.063446"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.060613"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.060671"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.056242"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.054902"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.054965"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.085282"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.090315"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.111091"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.086261"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.086124"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.087052"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.084925"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.084778"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.050204"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.049919"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.052462"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.055330"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.054697"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.055092"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.055026"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.050985"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.052805"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.051379"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.055823"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.057122"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.057132"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.057796"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.058962"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.057194"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.050806"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.052148"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.057907"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.054422"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.055154"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.060189"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.058402"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.059082"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.067745"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.068092"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.140095"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.144031"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.143293"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.071977"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.107948"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.141424"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.141142"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.148914"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.055346"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.055484"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.056182"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.056318"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.059263"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.060071"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.077511"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.071773"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.071397"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.050349"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.051229"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.054870"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.054807"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.055418"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.049632"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.049504"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.053324"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.052666"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.051246"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.051578"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.067866"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.068068"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.068432"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.078242"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.076159"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.078445"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.077074"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.102004"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.097617"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.117151"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.112670"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.128000">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.128000">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.023956"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.024175"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.016546"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.022701"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.023703"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.016919"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="737" assertions="804" failures="0" errors="0" time="18.191809">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.031049">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.031049"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.054448">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="50" assertions="1" time="0.054448"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.052377">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.043584">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.022536"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.008512"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.012536"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.008793">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.008793"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.013298">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.013298">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.004348"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.004385"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.004565"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.299356">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.299356">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.055015"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.027652"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.022405"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.021935"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.021744"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.021519"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.021797"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.020784"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.021335"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.022193"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.021406"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.021571"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.058794">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.019888"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.016716"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.022190"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="11" assertions="20" failures="0" errors="0" time="0.641451">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="6" assertions="12" failures="0" errors="0" time="0.357684">
        <testcase name="testResolver with data set #0" assertions="2" time="0.058320"/>
        <testcase name="testResolver with data set #1" assertions="2" time="0.063405"/>
        <testcase name="testResolver with data set #2" assertions="2" time="0.058037"/>
        <testcase name="testResolver with data set #3" assertions="2" time="0.054029"/>
        <testcase name="testResolver with data set #4" assertions="2" time="0.070941"/>
        <testcase name="testResolver with data set #5" assertions="2" time="0.052952"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="2" assertions="2" failures="0" errors="0" time="0.134059">
        <testcase name="testResolveResolvableRecursive with data set #0" assertions="1" time="0.072240"/>
        <testcase name="testResolveResolvableRecursive with data set #1" assertions="1" time="0.061819"/>
      </testsuite>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="106" assertions="1" time="0.049080"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="118" assertions="3" time="0.052776"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="132" assertions="2" time="0.047852"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.394697">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.394697">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.040804"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.049103"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.042296"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.043441"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.040979"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.043712"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.041757"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.052830"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.039775"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapperTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapperTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="1" assertions="3" failures="0" errors="0" time="0.061506">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapperTest::testMapper" tests="1" assertions="3" failures="0" errors="0" time="0.061506">
        <testcase name="testMapper with data set &quot;spec-example.json&quot;" assertions="3" time="0.061506"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ScopeMappedReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ScopeMappedReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="11" assertions="20" failures="0" errors="0" time="0.788084">
      <testsuite name="Eloquent\Schemer\Reference\ScopeMappedReferenceResolverTest::testResolver" tests="6" assertions="12" failures="0" errors="0" time="0.428247">
        <testcase name="testResolver with data set #0" assertions="2" time="0.067651"/>
        <testcase name="testResolver with data set #1" assertions="2" time="0.067869"/>
        <testcase name="testResolver with data set #2" assertions="2" time="0.071924"/>
        <testcase name="testResolver with data set #3" assertions="2" time="0.061940"/>
        <testcase name="testResolver with data set #4" assertions="2" time="0.092364"/>
        <testcase name="testResolver with data set #5" assertions="2" time="0.066499"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ScopeMappedReferenceResolverTest::testResolveResolvableRecursive" tests="2" assertions="2" failures="0" errors="0" time="0.164429">
        <testcase name="testResolveResolvableRecursive with data set #0" assertions="1" time="0.086426"/>
        <testcase name="testResolveResolvableRecursive with data set #1" assertions="1" time="0.078003"/>
      </testsuite>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ScopeMappedReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ScopeMappedReferenceResolverTest.php" line="106" assertions="1" time="0.065482"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ScopeMappedReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ScopeMappedReferenceResolverTest.php" line="118" assertions="3" time="0.066669"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ScopeMappedReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ScopeMappedReferenceResolverTest.php" line="132" assertions="2" time="0.063257"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.379692">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.022185">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.006232"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.005316"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.005276"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.005361"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.020769">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.005990"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.004973"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.004907"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.004899"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.018041">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004566"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004511"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.004495"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004469"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.175980">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.011737"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.007601"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.007941"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.008123"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.008053"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.008139"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.011234"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.011082"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.008281"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.008149"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.007675"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.008412"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.008513"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.008485"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.005793"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.009719"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.007895"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.006450"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.008150"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.008055"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.006493"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.041769">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.008342"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.008403"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.008267"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.008377"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.008380"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.007187"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.006906"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.010537"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.009818"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.009750"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.010449"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.010637"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.006780"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.006788"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.007608"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.008317"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.006170"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="3.418619">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.197709">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.006133"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.006919"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.007780"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.006054"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.006198"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.006161"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.005651"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.006119"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.006075"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.006971"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.007333"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.007159"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.007737"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.007798"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.007608"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.006951"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.006257"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.005852"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.006040"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.006971"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.006993"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.006226"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.006816"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.006028"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.005695"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.007337"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.006182"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.006287"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.006270"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.006107"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.048419">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.008033"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.006162"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.007651"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.006056"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.006823"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.007434"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.006260"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.036622">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.005254"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.005223"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.005248"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.005205"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.005268"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.005253"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.005171"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.019540">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.004902"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.004907"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.004885"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.004846"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.023543">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.006257"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.005788"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.005777"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.005721"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.020057">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.005100"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.004999"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.004998"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.004960"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.009907"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.044126">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.008145"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.005622"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.006960"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.004736"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.006841"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.006952"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.004870"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.040339">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.006304"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.005043"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.006955"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.004756"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.006280"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.006219"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.004782"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.043188">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.006944"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.005698"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.007061"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.004831"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.006875"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.006869"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.004910"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.040672">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.006335"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.005075"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.006313"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.004784"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.006876"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.006392"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.004897"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.044606">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.006957"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.005793"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.007015"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.005539"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.006837"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.006891"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.005574"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.040210">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.006933"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.004960"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.006276"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.004816"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.006217"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.006152"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.004856"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.014127"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.039304">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.006288"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.004895"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.006255"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.004759"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.006099"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.006218"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.004790"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.007217"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.038031">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.005451"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.005453"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.005363"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.005473"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.005374"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.005428"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.005489"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.025233">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.005032"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.005074"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.005126"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.004984"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.005017"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.155203">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.005846"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.006012"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.005912"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.005850"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.006595"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.006703"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.006635"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.006722"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.006728"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.006615"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.006616"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.006538"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.006612"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.006501"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.006574"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.006585"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.006596"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.006590"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.005983"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.006587"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.006665"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.006521"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.006564"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.006653"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.024549">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.008087"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.008534"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.007928"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.006268"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.017834">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.006212"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.005598"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.006024"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.165323">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.005008"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.006190"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.006336"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.004897"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.004813"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.004916"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.004954"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.004964"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.004900"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.006240"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.006437"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.006317"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.006374"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.006448"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.006479"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.006359"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.004888"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.004970"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.004764"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.006155"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.006308"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.004868"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.005613"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.004936"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.004883"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.006412"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.004904"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.005053"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.005021"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.004915"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.024631">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.004933"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.004908"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.004959"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.004917"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.004914"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.018436">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.004609"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.004602"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.004622"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.004603"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.027916">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.004712"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.004651"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.004661"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.004604"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.004628"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.004661"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.032622">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.004689"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.004682"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.004651"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.004645"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.004670"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.004649"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.004636"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.023145">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004673"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004604"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.004613"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004595"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.004660"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.136749">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.005208"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.005160"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.005127"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.005188"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.005897"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.005902"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.005850"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.005859"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.005804"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.005912"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.005778"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.005768"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.005808"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.005822"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.005825"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.005769"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.005743"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.005847"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.005197"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.005815"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.005815"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.005846"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.005771"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.006038"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.023382">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.007681"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.008079"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.007622"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.051615">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.004734"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.004700"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.004721"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.004678"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.004650"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.004704"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.004714"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.004685"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.004645"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.004671"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.004713"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014187">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.004809"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.004700"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.004678"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.064007">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.006050"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.006016"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.005859"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.005545"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.005655"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.006089"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.006370"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.005845"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.005464"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.005619"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.005495"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.018127">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.006006"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.006126"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.005995"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.023710">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.004757"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.004808"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.004780"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.004703"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.004662"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.023656">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.004657"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.004668"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.004789"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.004797"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.004745"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.031245">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.005966"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.005982"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.006729"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.006069"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.006499"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.029478">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.006131"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.005900"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.005556"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.005996"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.005895"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.037801">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.004775"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.004732"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.004783"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.004656"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.004655"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.004775"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.004715"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.004710"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014210">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.004740"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.004722"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.004748"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.046834">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.005902"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.005841"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.005915"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.005928"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.006003"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.005905"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.005475"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.005865"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.018686">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.006163"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.006003"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.006520"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.023594">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.004701"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.004793"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.004741"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.004671"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.004688"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.037920">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.004705"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.004657"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.004774"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.004852"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.004751"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.004746"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.004746"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.004689"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.390811">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.006510"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.010471"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.010173"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.010229"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.010131"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.008948"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.010192"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.010421"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.010471"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.010193"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.010539"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.010403"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.010425"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.010180"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.010329"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.010316"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.010367"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.010299"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.010303"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.010134"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.009856"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.010155"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.010125"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.010232"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.010438"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.010302"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.010114"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.010009"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.009575"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.010182"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.010407"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.010369"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.010006"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.010342"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.010126"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.010563"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.010409"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.009908"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.006659"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.011007">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.005544"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.005463"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.142197">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.007943"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.008172"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.009107"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.007304"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.007786"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.007435"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.008219"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.007399"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.006905"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.006945"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.006890"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.006943"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.006768"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.006925"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.006802"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.006936"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.006451"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.008360"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.008908"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.389135">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.006178"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.009888"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.010401"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.009990"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.010055"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.009062"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.010025"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.010658"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.010589"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.010174"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.010478"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.010368"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.010281"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.010126"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.010242"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.010070"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.010358"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.010124"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.010117"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.010406"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.009755"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.010178"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.009880"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.010114"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.010019"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.010437"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.010185"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.010186"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.009857"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.010400"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.010598"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.010308"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.010171"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.010445"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.010181"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.010228"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.010117"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.009961"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.006525"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.012037"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.068222">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.011997"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.011416"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.011815"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.011347"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.010991"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.010656"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.499857">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.016261"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.017805"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.018442"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.015265"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.015393"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.015592"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.015252"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.015479"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.015198"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.018115"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.018393"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.018763"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.019136"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.019170"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.018610"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.018078"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.015517"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.015445"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.015069"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.017897"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.018291"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.015167"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.017029"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.015209"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.015180"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.018156"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.015465"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.015757"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.015499"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.015224"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.025266">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.005069"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.005074"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.005044"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.005054"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.005025"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.056109">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.004841"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.004740"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.006030"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.004750"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.004678"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.004685"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.004782"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.008302"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.008433"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.004868"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="156" assertions="156" failures="0" errors="0" time="11.798167">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="156" assertions="156" failures="0" errors="0" time="11.798167">
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.139993"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.130800"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.083082"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.088638"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.082201"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.107740"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.111614"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.246491"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.219598"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.253073"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.132640"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.136231"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.058323"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.057828"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.059250"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.101225"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.100873"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.102199"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.082426"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.088862"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.057561"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.056153"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.056764"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.173609"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.193653"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.176477"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.087750"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.088446"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.058428"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.055137"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.051198"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.072123"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.069961"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.071071"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.081076"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.079420"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.084631"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.102111"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.094079"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.094063"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.100109"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.064822"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.063073"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.063650"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.065809"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.049369"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.048836"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.049657"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.073515"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.070508"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.064592"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.075842"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.071680"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.073102"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.064166"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.073889"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.047637"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.071029"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.047857"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.050120"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.145927"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.149842"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.149453"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.076509"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.074476"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.074511"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.073170"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.069446"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.074841"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.074129"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.073534"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.067894"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.075697"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.048205"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.046560"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.048730"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.045822"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.045712"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.045475"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.049360"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.050814"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.057471"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.057298"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.050341"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.046945"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.045987"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.047211"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.047444"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.047143"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.046158"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.047553"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.080197"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.046464"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.046426"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.046212"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.046396"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.046749"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.048869"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.045094"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.045536"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.048696"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.046938"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.048252"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.047605"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.048348"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.045010"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.047498"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.056502"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.057083"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.053980"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.054287"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.070980"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.072863"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.075132"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.049889"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.050438"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.056216"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.056902"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.055337"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.054837"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.049394"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.049152"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.052806"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.052969"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.093785"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.055345"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.058385"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.048372"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.047309"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.047678"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.114304"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.119492"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.148904"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.143579"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.113600"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.109457"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.118104"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.077278"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.085751"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.082784"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.079683"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.087176"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.072347"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.080399"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.067114"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.075296"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.074649"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.072658"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.066959"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.074690"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.049304"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.048906"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.049561"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.050666"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.050893"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.050964"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.200271">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.200271">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.037943"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.037596"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.026054"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.035846"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.036508"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.026324"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

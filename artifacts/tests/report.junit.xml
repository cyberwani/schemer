<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="742" assertions="804" failures="0" errors="0" time="59.439864">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.020135">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.020135"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.027640">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.027640"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.032262">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.027619">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.014758"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005337"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.007524"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.004643">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.004643"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.009100">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.009100">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.002976"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003000"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003124"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.183864">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.183864">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.032558"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.016469"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.013734"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.013461"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.013428"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.013449"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.013482"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.013469"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.013472"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.013376"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.013483"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.013483"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.035423">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.012097"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.010151"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.013175"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.074823">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.337718">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.036430"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.037634"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.037582"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.032922"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.047167"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.034738"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.058418"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.052828"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.136827">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.045652"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.041304"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.049871"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.481884"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.013058"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.033662"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.036531"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.035143"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.269778">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.269778">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.028663"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.031938"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.028569"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.029267"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.028515"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.030376"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.029328"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.034509"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.028613"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.069787">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.069787">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.017284"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.052503"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.243454">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014931">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004113"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003551"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003736"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003531"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014283">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004061"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003599"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003300"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003323"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012096">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003068"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003034"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.002971"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003023"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.114630">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.007763"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.004852"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005274"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005258"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005234"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005242"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.007421"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.007589"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005187"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005068"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005089"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005601"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005329"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.005340"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.003810"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006100"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005054"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004342"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005307"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005381"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004389"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.025917">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005334"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005248"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005121"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005005"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005209"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004648"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004397"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.005932"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006061"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.005991"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006134"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.005633"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004568"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004633"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.004632"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.004903"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004065"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.169692">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.126559">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.003847"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.004696"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.004798"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.003894"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.003821"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.003912"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.003861"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.003811"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.003906"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.004435"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.004702"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.004586"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.004639"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.004942"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.004780"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004716"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004009"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.003798"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.003747"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004622"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004748"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.003811"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004284"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.003824"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.003755"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.004825"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004093"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.003858"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004092"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.003747"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.030285">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.004567"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004047"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.004589"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.003999"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004421"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004585"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004077"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.025012">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003533"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003534"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003524"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003686"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003515"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003508"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003712"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013312">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003349"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003316"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003325"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003322"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015904">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004123"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.003969"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.003975"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.003837"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013607">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003423"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003396"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003392"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003396"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.005877"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.028800">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004641"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.003952"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.004539"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003331"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004404"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004673"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003260"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.026917">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004035"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003480"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004467"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003488"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004000"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004002"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003446"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.028584">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.004427"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003961"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004479"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003194"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004440"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.004527"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003556"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.026605">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004046"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003344"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004062"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003199"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004565"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.003996"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003393"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.029161">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004442"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.003892"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004472"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003644"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004423"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004409"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003879"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.026767">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004431"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003524"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004063"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003217"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004000"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004013"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003519"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.008579"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.026579">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004338"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003346"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004048"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003208"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004227"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.003994"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003418"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.004660"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.025639">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.003769"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.003589"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003703"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.003595"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003591"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003795"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.003597"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.017205">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003393"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003673"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003373"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003378"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003388"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.103200">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.003884"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004154"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004117"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004102"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004444"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004301"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004319"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004479"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004504"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004328"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004519"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004239"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004259"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004481"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004257"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004481"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004268"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004233"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004087"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004232"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004414"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004519"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004254"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004325"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.015786">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005109"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005433"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005244"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004288"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.011158">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.003727"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003709"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.003722"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.110277">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003575"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.003958"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004196"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003245"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003268"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003343"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003485"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003410"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003242"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004016"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004271"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004181"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004241"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004275"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004108"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004322"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003253"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003281"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003241"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.003979"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004048"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003465"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003651"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003251"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003270"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004111"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003596"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003356"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003378"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003261"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.016733">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003322"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003546"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003302"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003288"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003275"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012441">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003123"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003115"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003099"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003104"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.018839">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003109"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003112"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003107"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003311"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003104"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003096"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.021744">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003111"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003095"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003371"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003096"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003096"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003049"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.002926"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.014765">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.002832"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.002812"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.002937"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003082"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003102"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.088635">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003381"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003365"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003377"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003405"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.003798"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.003809"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.003805"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.003820"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.003806"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.003811"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.003729"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.003733"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.003740"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.003747"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.003759"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.003700"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003937"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003752"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003414"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003760"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003759"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003775"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.003717"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.003736"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014666">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.004804"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005106"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.004756"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.032819">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003124"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003096"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003088"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003078"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003021"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.002917"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.002829"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003042"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.002966"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.002844"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.002814"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009108">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.002912"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003084"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003112"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.039037">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003549"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003564"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003516"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003541"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003545"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003543"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003556"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003568"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003561"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003527"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003567"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011058">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003633"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003791"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003634"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015801">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003332"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003124"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003090"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003142"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003113"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015829">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003150"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003194"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003209"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003142"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003134"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018580">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.003633"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003611"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.003775"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003842"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003719"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018016">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003579"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003623"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003572"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003562"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003680"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.024750">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003164"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003053"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003114"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003058"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003115"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003061"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003118"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003067"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009264">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003101"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003034"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003129"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.028976">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003558"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003562"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003556"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003799"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003565"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003635"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003592"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003709"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010978">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003654"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003683"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003641"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.015665">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003139"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003134"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003108"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003140"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003144"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.024965">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003152"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003153"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003131"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003132"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003069"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003124"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003074"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003130"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.232388">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.003895"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006068"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006031"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.005973"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.005828"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.005521"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006054"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.005923"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006186"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006070"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006245"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006341"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006026"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006072"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006243"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006064"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006151"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006042"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006053"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006183"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006055"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006138"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006169"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006044"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006058"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006218"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006192"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.005899"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006067"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006027"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006055"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006010"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006063"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006038"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006082"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006039"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006063"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006107"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.004096"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007633">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003801"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003832"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.086854">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.004841"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005059"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005344"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004416"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.004651"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004548"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.004931"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.004505"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004340"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004278"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004229"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004332"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004200"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004162"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004246"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004233"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004128"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005138"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005273"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.235587">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004160"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006182"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006134"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006096"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006025"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.005756"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006030"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006303"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006227"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006266"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006204"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006316"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006138"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006119"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006328"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006129"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006118"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006087"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006123"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006150"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006135"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006154"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006154"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006126"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006176"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006244"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006097"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006073"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006097"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006147"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006211"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006155"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006148"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.006113"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006144"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006155"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006167"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006153"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004046"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.007574"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.041726">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.007041"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.007115"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.007095"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.007097"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.006734"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.006644"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.316686">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.009795"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.011188"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.011566"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.009869"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.009687"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.009702"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.009745"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.009780"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.009610"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.011362"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.011851"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.011607"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.011717"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.012716"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.012710"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.012096"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.009617"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.009862"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.009520"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.011191"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.011388"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.009482"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.010605"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.009699"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.009709"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.011448"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.009892"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.010007"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.009804"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.009461"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.017189">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003468"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003440"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003428"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003422"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003431"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.036623">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003232"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003196"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.003913"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003184"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003192"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003186"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003209"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.004966"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005260"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003285"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="53.177123">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="53.177123">
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.091307"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.081599"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.077263"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.082668"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.082129"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.083200"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.077813"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.082926"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.086315"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.085867"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.082135"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.085628"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.086268"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.086476"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.081752"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.085411"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.053947"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.053974"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.053475"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.068404"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.050000"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.049392"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.049664"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.053518"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.053277"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.053079"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.134206"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.133666"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.133872"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.066338"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.066348"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.084603"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.082891"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.078746"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.083688"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.082739"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.084652"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.078530"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.083229"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.723267"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="4.765350"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.736985"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="3.827172"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.749745"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.720941"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.649896"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="4.727192"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="3.728251"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.768818"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.052026"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.052234"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.053748"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.054299"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.058173"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.049443"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.049708"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.047786"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.047957"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.048542"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.048777"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.051674"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.051540"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.067073"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.067938"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.068103"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.048687"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.048590"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.050366"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.050573"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.053349"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.053510"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.053266"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.058689"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.057364"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.057917"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.049809"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.049360"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.049805"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.055589"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.055463"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.055693"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.132971"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.162060"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.133902"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.066971"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.066689"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.052997"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.052847"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.053058"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.066811"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.066685"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.067230"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.056587"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.056688"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.057419"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.057794"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.056826"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.050279"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.048762"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.051013"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.054592"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.053687"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.055352"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.054263"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.054988"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.054192"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.055549"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.054461"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.055283"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.054150"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.055780"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.055639"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.052179"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.049984"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.049828"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.076476"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.076362"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.075120"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.110233"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.100808"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.096517"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.098011"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.101727"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.120236"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.119995"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.102249"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.104142"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.074454"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.076441"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.105961"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.100549"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.107585"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.085958"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.083585"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.085624"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.059813"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.059378"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.057612"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.085173"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.087927"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.121013"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.125184"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.076413"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.117874"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.116470"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.100657"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.101903"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.217918"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.197824"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.220396"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.081465"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.080754"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.085006"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.091396"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.132557"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.092708"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.068924"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.068960"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.069777"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.066793"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.068816"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.056037"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.056301"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.056772"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.050201"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.049890"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.126784">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.126784">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.023794"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.022892"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.016945"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.022808"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.023560"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.016785"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

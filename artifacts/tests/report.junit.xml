<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="61.625116">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.019648">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.019648"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.028941">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.028941"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.032979">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.028260">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.014489"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005399"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.008372"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.004719">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.004719"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.009498">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.009498">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.002970"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003375"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003153"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.246699">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.246699">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.038385"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.022026"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.018894"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.018530"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.018344"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.018431"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.018404"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.018095"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.018574"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.019350"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.019023"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.018643"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.037815">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.013448"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.010687"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.013680"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.189307">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.363705">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.039823"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.040899"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.040250"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.035242"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.050593"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.037803"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.062376"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.056719"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.145852">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.048622"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.044247"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.052983"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.528059"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.043626"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.034544"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.037334"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.036187"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.299682">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.299682">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.031743"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.035468"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.031897"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.032976"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.031828"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.033676"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.032629"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.037847"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.031618"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.074031">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.074031">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.018410"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.055621"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.247147">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015178">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004333"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003681"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003542"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003622"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014206">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004084"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003374"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003335"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003413"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012710">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003296"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003043"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003312"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003059"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.118089">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.008067"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005156"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005386"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005398"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005379"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005958"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.007790"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.007512"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005633"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005195"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.004988"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005603"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005454"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.005664"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.003864"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006421"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005160"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004290"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005448"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005424"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004299"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.025525">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005078"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005031"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005138"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005008"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005270"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004441"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004429"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006229"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006239"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006158"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006107"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.005653"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004441"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004437"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.004615"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.004632"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004058"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.155636">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.123982">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.003848"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.004425"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.004725"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.003739"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.003787"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.003765"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.003764"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.003811"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.003733"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.004487"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.004655"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.004772"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.004645"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.004906"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.004595"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004634"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.003730"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.003814"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.003678"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004429"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004550"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.003773"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004163"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.003645"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.003750"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.004602"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004056"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.003979"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.003774"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.003747"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.029771">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.004847"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.003827"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.004593"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.003716"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004549"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004484"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.003755"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.024627">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003527"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003515"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003520"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003519"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003511"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003518"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003517"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013004">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003324"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003212"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003200"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003268"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015531">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004135"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.003751"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.003821"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.003824"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013396">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003386"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003387"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003371"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003252"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.005768"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.028711">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004647"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.003743"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.004702"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003231"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004805"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004472"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003111"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.026480">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004090"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003327"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004607"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003222"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004013"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.003987"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003234"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.028327">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.004549"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003750"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004636"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003234"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004450"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.004443"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003265"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.026510">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004206"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003340"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004093"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003135"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004418"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004080"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003238"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.029279">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004526"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.003756"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004595"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003650"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004628"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004431"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003693"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.026354">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004493"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003292"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004084"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003183"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004128"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004023"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003151"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.008757"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.025905">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004071"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003253"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004104"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003214"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004015"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004007"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003241"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.004817"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.025036">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.003591"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.003602"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003551"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.003586"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003585"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003526"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.003595"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.016641">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003403"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003398"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003381"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003287"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003172"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.102069">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.003890"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.003884"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.003901"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.003902"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004490"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004323"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004455"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004338"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004503"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004342"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004412"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004254"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004460"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004251"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004413"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004263"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004395"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004259"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.003929"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004265"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004322"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004278"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004264"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004276"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.016093">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005389"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005597"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005107"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004072"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.011072">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.003742"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003702"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.003628"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.108016">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003308"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004000"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004221"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003261"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003308"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003147"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003086"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003337"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003277"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004058"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004195"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004106"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004277"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004175"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004068"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004049"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003153"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003148"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003205"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.003997"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004031"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003111"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003687"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003233"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003247"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004129"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003342"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003356"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003304"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003200"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.016022">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003169"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003044"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003274"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003264"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003271"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012139">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003077"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.002938"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003034"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003090"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.018058">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003108"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003039"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.002937"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.002881"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.002999"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003094"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.021494">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003108"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003105"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003101"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003091"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003030"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003027"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003032"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.014986">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003017"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003011"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003031"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003014"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.002913"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.088172">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003387"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003379"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003379"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003318"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.003859"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.003809"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.003844"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.003766"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.003813"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.003801"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.003705"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.003726"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.003749"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.003745"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.003669"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.003755"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003755"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003752"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003299"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003750"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003732"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003760"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.003680"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.003741"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014916">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.004844"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005100"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.004972"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.033966">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003142"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003105"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003108"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003111"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003105"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003066"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003068"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003048"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003073"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003068"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003071"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.008852">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.002996"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.002954"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.002902"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.038866">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003598"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003546"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.003536"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003527"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003543"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003554"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003513"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003413"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003560"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003558"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003518"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010859">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003602"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003628"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003629"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015430">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.002997"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003112"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003129"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003124"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003068"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.015515">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003052"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003022"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003192"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003125"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003124"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018149">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.003612"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003563"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.003767"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.003668"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003539"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017705">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.003570"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.003590"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003553"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003438"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003554"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.024526">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003140"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003104"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003092"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003062"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003059"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003066"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.002992"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003011"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.008924">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.002991"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.002926"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003007"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.028423">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003587"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003537"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003551"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003538"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003569"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003563"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003527"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003550"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011001">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003644"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003641"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003716"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.015488">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003123"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003093"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003103"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003108"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003061"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.024080">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003053"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.002997"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003016"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.002999"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003027"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003016"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.002992"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.002980"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.235848">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.003920"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006169"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.006149"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006122"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006052"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.005786"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006129"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006228"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006238"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006254"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006235"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006348"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006144"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006126"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006311"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006104"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006149"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006143"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006152"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006155"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006147"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006174"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006170"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006165"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006220"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006190"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006097"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006104"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006150"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006045"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006155"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006183"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006204"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006209"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006181"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006214"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006214"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006201"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.003910"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007297">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003681"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003616"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.084898">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.004744"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.004960"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005340"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004283"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.004442"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004496"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.004736"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.004429"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004107"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004095"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004114"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004126"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004090"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004019"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004074"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004204"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.003981"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005224"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005434"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.238659">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004003"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006162"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006219"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006277"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006139"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.005862"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006226"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006301"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006316"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006320"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006306"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006434"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006042"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006118"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006350"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006049"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006182"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006202"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006240"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006251"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006237"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006242"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006253"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006258"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006294"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006329"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006167"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006175"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006213"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006265"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006233"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006251"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006271"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.006303"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006278"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006311"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006270"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006335"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.003975"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.007481"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.040904">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.006903"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.006976"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.006926"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.006863"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.006478"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.006758"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.315499">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.009963"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.011218"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.011411"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.009469"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.009728"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.009814"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.009856"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.009892"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.009737"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.011339"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.011448"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.011475"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.011673"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.011704"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.011566"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.011535"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.009874"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.009989"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.009841"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.011298"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.011501"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.009869"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.010772"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.009621"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.009510"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.011577"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.009929"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.010086"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.009964"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.009840"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.016851">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003486"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003455"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003405"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003286"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003219"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.036410">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003223"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003208"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.003927"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003142"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003070"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003020"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003078"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005011"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005419"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003312"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="55.117881">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="55.117881">
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.057454"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.050311"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.068380"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.068861"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.069457"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.054383"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.054264"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.054947"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.048325"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.048877"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.052758"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.053361"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.051595"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.051802"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.050068"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.050447"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.052554"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.053139"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.064382"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.051085"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.103174"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.099398"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.099057"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.103532"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.078454"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.078118"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.077205"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.080418"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.060191"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.061223"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.061183"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.099516"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.094513"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.094636"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.068624"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.069061"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.064126"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.067730"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.070167"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.059187"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.055988"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.055789"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.052266"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.052956"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.059235"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.097258"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.098096"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.089565"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.091063"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.090132"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.093135"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.088224"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.098035"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.879765"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.754825"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="4.910601"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="3.853478"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.830791"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="3.824076"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="4.955241"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="4.952853"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="3.832922"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="3.843826"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.057141"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.057685"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.058256"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.050744"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.050817"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.059827"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.058970"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.058916"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.068868"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.068918"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.069429"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.052323"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.051868"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.052786"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.057054"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.056543"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.057241"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.057135"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.053297"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.051245"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.052172"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.052831"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.051355"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.052354"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.057877"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.056898"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.091142"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.058350"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.060517"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.060357"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.060194"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.060099"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.060706"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.057458"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.057075"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.057737"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.057616"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.088168"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.089473"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.083730"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.089212"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.089389"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.087998"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.083711"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.089292"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.056286"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.056208"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.056404"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.084530"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.082809"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.085278"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.095609"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.095867"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.088874"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.092484"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.092494"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.092647"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.088675"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.092601"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.103444"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.106104"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.074705"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.150844"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.120757"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.225968"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.205551"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.230419"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.129715"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.131788"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.093751"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.092962"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.147678"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.145630"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.144380"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.073091"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.072984"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.074320"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.073748"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.073972"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.131530"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.133861"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.117166"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.114389"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.081295"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.084069"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.116453"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.108397"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.116464"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.059547"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.057118"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.057285"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.085139"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.083581"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.085929"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.142582"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.143283"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.143693"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.070648"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.109262"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.058890"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.058037"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.057602"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.058227"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.135895">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.135895">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.025800"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.025317"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.018086"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.023979"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.024494"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.018219"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004050">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.004050"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.021874">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.003941"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.004960"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.003900"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.004331"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.004742"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004033">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.004033"/>
    </testsuite>
  </testsuite>
</testsuites>

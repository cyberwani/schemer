<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="742" assertions="804" failures="0" errors="0" time="67.224156">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.022810">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.022810"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.032782">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.032782"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.038508">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.032575">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.017070"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.006367"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.009138"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.005933">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.005933"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.010687">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.010687">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003383"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003752"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003552"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.211225">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.211225">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.038526"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.019094"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.015689"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.015435"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.015262"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.015137"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.015217"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.015393"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.015365"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.015386"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.015353"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.015368"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.040536">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.014068"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.011400"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.015068"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.596986">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.389766">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.041888"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.043783"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.043417"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.038028"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.054343"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.040172"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.067379"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.060756"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.167150">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.054677"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.050472"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.062001"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.725133"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.183057"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.038733"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.043852"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.049295"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.311066">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.311066">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.033479"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.037312"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.033951"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.034543"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.033249"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.035327"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.033880"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.038691"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.030634"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.077139">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.077139">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.018176"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.058963"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.257033">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.015905">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.004671"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003820"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003740"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003674"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014564">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004330"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003452"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003373"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003409"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012487">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003108"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003194"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003090"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003095"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.121573">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.008274"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005228"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005637"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005514"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005387"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005495"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.007626"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.008227"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005789"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005463"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005197"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005846"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005819"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.005855"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004002"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006516"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005420"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004539"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005671"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005496"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004572"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.027215">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005521"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.005412"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005517"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.005384"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.005381"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004796"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004709"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006504"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006556"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006406"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.006362"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.006151"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004700"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004708"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.004976"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.005032"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004389"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.539281">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.132117">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.004052"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.004676"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005119"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004017"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004040"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.003967"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.003988"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004301"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.003998"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.004862"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005111"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005041"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005157"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.004975"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.004942"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004745"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004053"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004051"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.003921"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004756"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004921"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004004"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004404"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.003944"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.003966"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.004920"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004052"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.004068"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004079"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.003987"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.031666">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.005007"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004077"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.004955"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004058"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004811"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004695"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004063"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.026101">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003930"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003912"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003547"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003733"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003579"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003703"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003698"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013973">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003638"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003468"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003497"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003370"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.016689">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004611"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.004000"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.003975"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004103"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014124">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003535"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003453"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003594"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003542"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.006798"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.032450">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005211"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004309"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005208"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003666"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.005156"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.005197"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003703"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.030323">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004682"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003783"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.005274"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003634"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004686"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004618"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003646"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.032669">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.005154"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.004296"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.005215"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003687"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.005432"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005176"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003709"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.029360">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004674"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003791"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004780"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003434"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004559"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004484"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003638"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.032961">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004755"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004001"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004912"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.004060"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.005175"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.005296"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.004762"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.033985">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.005368"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.004407"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.006246"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.004031"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004913"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.005059"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003961"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.010544"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.030633">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004800"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003959"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004755"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003881"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004723"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004732"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003783"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.005524"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.029743">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004254"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004230"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004310"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004207"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004266"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004257"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004219"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.020049">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003936"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003961"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003880"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.004083"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.004189"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.125568">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004852"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004603"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.004791"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004911"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005453"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.005082"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.005065"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.005156"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.005268"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.005289"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.006005"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.005465"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.005467"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.005135"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.005864"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.005112"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.005422"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.005232"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.004597"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.005576"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.005182"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.005415"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.005259"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.005367"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.020975">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.006508"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.008344"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.006123"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004715"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.013402">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.004484"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.004566"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004352"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.132339">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003798"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004682"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.005424"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.004768"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003882"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003715"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.004057"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003790"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.004305"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.005083"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.005153"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.005116"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004922"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.005012"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004969"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.005020"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.004055"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003870"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.004076"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004798"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004855"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003952"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.004535"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.004137"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003944"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004917"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003802"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.004001"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003836"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003864"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.019427">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003783"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003740"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003894"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003888"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.004122"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015667">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003592"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003546"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.004853"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003676"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.021581">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003576"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003878"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003547"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003526"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003524"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003530"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.024666">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003518"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003555"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003540"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003532"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003495"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003526"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003500"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.017801">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003559"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003656"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003551"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003533"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003502"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.106738">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003933"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003896"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003933"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003936"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004556"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.004497"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004509"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004579"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.004575"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004463"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004489"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004467"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004696"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004468"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004447"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.005271"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004433"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.005029"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.004222"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.004409"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.004566"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.004517"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004422"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004426"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.017859">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005770"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.006134"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005955"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.041711">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003626"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003570"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003532"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.004412"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003658"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003571"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003727"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003738"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.004284"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003668"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003925"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011500">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.004009"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003722"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003769"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.050566">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.004467"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.004783"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004303"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.004824"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.004517"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.004564"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.004726"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.005424"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.004392"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.004238"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.004328"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.013931">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.004636"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.004689"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.004606"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020826">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.004197"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.004495"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.004103"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.004442"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003589"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019358">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003669"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003818"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.004289"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003719"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003863"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.022344">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004576"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.004339"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004516"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004306"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004607"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.022306">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.004217"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.005184"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.004522"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.004152"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.004231"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.028715">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003649"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003607"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003566"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003550"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003569"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003558"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003593"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003623"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010789">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003689"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003540"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003560"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.033991">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.004251"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.004188"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.004158"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.004124"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.004165"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.004181"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.004234"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.004690"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.013776">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.004617"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.004534"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.004625"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.018588">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003804"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003599"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003837"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003790"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003558"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.029047">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.003626"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.004158"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003578"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003498"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003531"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003591"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003552"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003514"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.260696">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.004559"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.007010"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.007708"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006384"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006420"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.006135"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006338"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006604"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006624"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006637"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006442"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006770"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006490"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006545"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006487"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006495"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006410"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006364"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006420"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006234"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006438"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006403"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006497"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006948"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006936"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006906"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006890"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006798"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.006927"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006877"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006947"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006968"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.007000"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.007023"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.008245"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.007859"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.007616"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.007493"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.004849"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.008999">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004423"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.004576"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.110687">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.007026"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.007465"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.007391"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.006043"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.006347"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.006387"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.006992"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.006135"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.006001"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004869"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004876"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004907"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004795"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004769"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004796"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004840"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004693"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.006132"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.006223"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.280803">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004684"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.007425"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.007123"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.007466"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.007120"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.006859"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.007292"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.007291"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.007481"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.007545"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.007336"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.007434"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.007205"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.007247"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.007633"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.007170"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.007441"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.007233"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.007512"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.007195"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.007447"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.007254"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.007419"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.007231"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.007592"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.007349"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.007231"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.007141"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.007252"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.007413"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.007180"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.007557"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.007277"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.007288"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.007486"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.007276"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.007355"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.007401"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004962"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.008826"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.048263">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.008216"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.008329"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.008130"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.008084"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.007858"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.007646"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.370924">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.011788"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.013574"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.013628"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.011379"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.011571"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.011565"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.011528"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.011595"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.011646"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.013489"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.015078"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.013631"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.013566"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.013750"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.013538"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.013533"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.011638"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.011613"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.011644"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.013329"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.013497"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.011013"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.012280"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.011115"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.011260"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.013343"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.011368"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.011515"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.011308"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.011142"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.019781">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.004032"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.004012"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003898"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003898"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003941"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.042408">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003741"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003682"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004581"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003636"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003610"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003678"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003647"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005890"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.006194"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003749"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="59.952231">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="59.952231">
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.063171"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.051215"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.069249"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.070018"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.070415"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.055191"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.056560"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.060199"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.052849"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.053252"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.058545"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.058981"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.060229"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.059053"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.056859"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.056916"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.058439"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.059059"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.054848"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.063357"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.106241"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.102214"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.100794"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.105778"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.080270"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.078642"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.083394"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.081744"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.063467"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.063248"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.064317"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.102337"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.105100"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.105710"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.076249"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.074972"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.069439"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.069758"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.066330"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.058747"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.056897"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.057524"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.056188"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.054372"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.054089"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.092124"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.088360"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.087439"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.094747"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.092139"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.097709"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.090266"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.096265"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.394001"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.793192"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.217143"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.182272"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.055282"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.281687"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.672572"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.099129"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.155114"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.194933"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.057931"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.058269"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.059574"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.052972"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.051814"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.059911"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.060477"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.060334"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.070637"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.069880"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.071201"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.056994"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.057687"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.057642"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.063942"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.060487"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.057770"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.058641"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.054954"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.052395"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.052887"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.053709"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.052105"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.053969"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.058853"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.057110"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.058267"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.058424"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.095375"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.062253"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.060447"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.060368"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.060678"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.058166"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.057327"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.058074"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.058319"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.088045"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.091211"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.084081"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.089204"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.089791"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.088203"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.084062"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.090105"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.058872"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.061431"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.061627"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.093164"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.091366"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.093233"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.101930"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.100336"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.093145"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.092476"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.095275"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.093938"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.087990"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.092116"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.104578"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.106819"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.075743"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.124295"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.130249"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.286148"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.219160"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.246900"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.137688"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.139283"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.091850"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.091252"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.140226"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.139875"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.140357"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.071708"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.072223"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.075887"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.077292"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.074800"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.135258"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.136434"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.117708"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.122488"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.084343"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.084060"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.116362"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.105716"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.113836"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.059801"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.059246"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.061916"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.089981"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.085424"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.091189"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.151991"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.152484"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.155538"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.077835"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.077130"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.062581"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.104709"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.057789"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.060035"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.133874">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.133874">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.025662"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.026828"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.017328"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.022401"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.023416"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.018239"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

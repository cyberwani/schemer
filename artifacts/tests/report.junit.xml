<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="116.527721">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.036453">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.036453"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.048857">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.048857"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.396238">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.320174">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.296803"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.009745"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.013626"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.076064">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.076064"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.013582">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.013582">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.004326"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.004703"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.004553"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.402632">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.402632">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.062974"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.037014"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.030834"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.030768"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.029448"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.032288"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.029872"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.030171"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.029724"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.030667"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.029327"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.029544"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.058268">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.020478"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.016317"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.021473"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="5.988215">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.640805">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.072228"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.070070"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.068774"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.061394"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.091458"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.065186"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.112650"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.099045"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.255633">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.081057"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.079167"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.095409"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="2.864212"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="2.007521"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.061542"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.067772"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.090730"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.589488">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.589488">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.110855"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.064459"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.056198"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.057922"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.057380"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.059876"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.058400"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.068358"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.056040"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.128380">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.128380">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.029700"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.098680"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.382254">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.022237">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.006493"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.005261"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.005323"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.005160"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.020620">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.006015"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.004805"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.004850"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.004950"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.017691">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004441"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004381"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.004482"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004387"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.177589">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.011623"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.007330"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.007880"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.007707"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.007807"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.008409"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.011525"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.011077"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.008744"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.008090"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.007777"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.008521"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.008492"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.008727"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.005829"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.009624"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.008120"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.006484"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.008869"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.008459"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.006496"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.042358">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.008637"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.008581"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.008549"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.008493"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.008098"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.007219"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.007272"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.009431"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.011004"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.011187"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.010258"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.010967"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.007295"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.006715"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.007217"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.007066"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.006128"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="3.356871">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.199532">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.006325"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.006735"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.007276"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.005806"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.005781"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.005852"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.006238"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.006038"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.006145"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.006741"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.007179"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.007552"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.007442"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.007252"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.009017"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.007615"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.005693"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.005966"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.005888"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.006862"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.007223"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.006316"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.006867"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.006253"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.005932"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.007724"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.006665"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.007001"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.006064"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.006085"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.045707">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.007535"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.005759"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.007000"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.005596"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.006785"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.007218"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.005814"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.037518">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.005247"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.005264"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.005211"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.005650"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.005240"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.005210"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.005696"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.020360">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.005099"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.005336"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.004931"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.004994"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.023302">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.006241"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.005674"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.005634"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.005753"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.020491">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.005192"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.005100"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.005107"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.005092"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.010108"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.044195">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.007060"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.005709"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.007110"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.004881"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.007364"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.006885"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.005186"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.041139">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.006795"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.005269"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.007203"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.004925"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.006163"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.005961"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.004823"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.042132">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.006757"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.005539"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.006701"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.004734"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.006707"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.006777"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.004917"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.039312">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.006071"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.004871"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.006136"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.004719"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.006655"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.006101"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.004759"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.043311">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.006733"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.005556"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.006732"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.005565"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.006627"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.006679"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.005419"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.039366">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.006810"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.004981"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.006125"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.004740"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.006006"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.005953"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.004751"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.013788"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.038456">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.006160"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.004900"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.006079"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.004725"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.005944"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.005962"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.004686"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.006913"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.037467">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.005283"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.005276"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.005326"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.005378"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.005380"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.005451"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.005373"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.025855">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.005107"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.004987"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.005295"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.005168"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.005298"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.155795">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.005949"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.005949"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.005952"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.005948"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.006826"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.006716"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.006810"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.006611"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.006660"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.006625"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.006454"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.006381"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.006508"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.006497"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.006481"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.006665"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.006499"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.006589"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.006261"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.006810"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.006660"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.006701"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.006606"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.006637"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.025086">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.008200"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.008787"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.008099"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.006303"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.017987">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.006091"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.006136"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.005760"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.164459">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.004949"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.006036"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.006286"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.004831"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.004858"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.004932"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.004872"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.004951"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.004840"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.006245"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.006353"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.006359"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.006407"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.006444"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.006339"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.006166"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.004797"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.004990"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.004825"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.006588"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.006455"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.004797"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.005507"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.004831"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.004825"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.006385"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.004999"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.004942"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.004910"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.004739"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.024368">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.004822"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.004756"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.004883"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.004970"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.004937"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.018116">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.004544"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.004562"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.004502"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.004508"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.027387">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.004504"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.004498"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.004552"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.004601"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.004584"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.004648"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.032668">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.004642"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.004687"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.004630"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.004656"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.004678"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.004728"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.004647"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.023286">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004722"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004779"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.004573"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004593"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.004619"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.135889">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.005062"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.005087"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.005152"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.005227"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.005903"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.006096"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.006113"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.005944"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.006232"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.005794"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.005621"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.005574"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.005631"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.005654"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.005733"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.005749"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.005938"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.005762"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.005099"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.005659"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.005712"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.005690"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.005717"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.005740"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.029137">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.009442"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.010031"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.009664"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.052312">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.005496"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.004711"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.004871"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.004722"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.004659"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.004686"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.004696"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.004627"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.004610"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.004629"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.004605"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.013775">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.004674"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.004582"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.004519"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.060808">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.005470"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.005813"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.005330"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.005699"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.005384"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.005518"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.005261"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.005661"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.005438"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.005714"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.005520"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.016485">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.005531"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.005424"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.005530"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.023438">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.004632"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.004674"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.004695"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.004731"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.004706"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.023279">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.004604"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.004650"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.004754"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.004682"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.004589"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.028930">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.005990"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.005555"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.006388"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.005538"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.005459"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.027466">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.005499"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.005586"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.005413"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.005579"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.005389"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.038650">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.004724"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.004544"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.004887"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.004594"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.004651"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.004775"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.005517"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.004958"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.013958">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.004722"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.004608"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.004628"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.045273">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.005414"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.005587"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.005597"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.005825"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.005878"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.005825"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.005583"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.005564"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.017876">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.005898"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.005896"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.006082"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.024544">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.004614"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.004564"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.004606"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.004969"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.005791"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.042688">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.005289"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.006634"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.005373"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.005564"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.004873"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.005720"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.004618"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.004617"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.365283">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.006061"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.009486"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.009168"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.009580"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.009063"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.008594"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.009726"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.009883"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.009772"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.009414"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.009371"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.009454"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.009247"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.009557"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.009937"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.009706"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.009912"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.009528"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.010226"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.009522"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.009649"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.009715"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.010009"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.009372"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.009637"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.009717"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.009805"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.009282"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.009353"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.009656"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.009385"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.009899"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.009802"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.009761"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.009415"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.009232"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.009240"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.009182"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.005965"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.010755">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.005425"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.005330"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.132537">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.007259"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.007641"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.008592"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.006792"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.006956"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.006823"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.008114"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.006943"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.006531"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.006480"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.006773"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.006373"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.006207"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.006016"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.006280"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.006131"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.006272"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.007777"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.008577"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.366269">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.006124"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.009244"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.009868"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.009694"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.009514"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.008648"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.009385"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.009361"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.009936"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.009669"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.009601"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.009609"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.009806"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.009843"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.010101"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.009934"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.009526"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.009504"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.009810"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.009311"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.009344"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.009350"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.009960"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.009342"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.009442"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.009917"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.009586"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.009297"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.009738"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.009246"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.009765"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.009796"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.009766"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.009330"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.009273"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.009338"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.009410"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.009412"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.006469"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.011275"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.066364">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.011139"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.011142"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.011425"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.011460"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.010507"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.010691"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.502756">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.015887"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.017978"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.018293"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.015430"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.015946"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.015404"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.015637"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.015671"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.015274"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.017992"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.018255"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.018160"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.018648"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.018732"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.018115"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.018135"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.015363"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.015500"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.015187"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.017737"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.018409"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.015324"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.016735"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.015845"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.016114"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.020421"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.015646"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.015791"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.015722"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.015404"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.025582">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.005201"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.005056"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.005109"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.005086"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.005130"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.057137">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.004800"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.004870"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.006360"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.004999"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.004799"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.004808"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.004833"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.008146"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.008511"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.005011"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="104.853478">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="104.853478">
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.201671"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.175861"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.194661"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.185545"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.146424"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.137899"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.141410"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.139621"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.096555"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.097406"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.093924"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.131099"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.128859"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.256744"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.252117"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.258106"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.108080"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.104226"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.124601"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.421032"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.385395"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.420677"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.229843"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.234668"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.190378"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.187446"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.135276"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.156216"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.163918"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.214773"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.219589"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.123606"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.128121"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.124564"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.203441"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.188136"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.208875"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.136263"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.140223"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.236624"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.230121"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.192350"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.200383"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.094463"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.092522"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.096267"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.123026"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.124456"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.129056"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.124311"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.134986"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.176681"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.172750"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.178539"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.133373"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.116114"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.118348"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.100824"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.101534"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.102037"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.105939"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.103721"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.091051"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.098640"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.100540"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.114825"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.118966"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.109008"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.107672"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.108481"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.099218"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.091281"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.097266"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.103063"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.102731"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.107059"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.103420"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.160772"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.160082"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.164249"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.158287"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.156545"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.157592"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.155039"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.175442"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.110586"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.101419"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.101993"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.103929"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.172942"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.209602"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.159695"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.172442"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.177362"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.173706"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.156212"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.167062"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.154601"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.150848"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.149950"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.094151"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.097945"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.105505"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.101170"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.102718"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.090359"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.091164"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.128176"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.128133"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.130330"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.091979"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.092005"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.091038"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.094908"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.093695"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.096824"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.096576"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.099113"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.098159"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.097597"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.129458"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.124153"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.265774"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.259987"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.261381"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.168376"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.192794"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.151397"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.164730"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.166865"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.161340"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.160456"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.161140"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.109525"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.104749"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.111887"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.102298"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.103998"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.104730"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.115493"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.113291"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.111649"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.103401"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.106247"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.102685"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.103690"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.102721"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.105424"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="7.494217"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="9.477510"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="9.401741"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="7.433237"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="7.493050"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="7.460834"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="9.280194"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="9.323857"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="7.484571"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="7.567898"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.152144"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.149486"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.155336"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.091617"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.095501"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.106875"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.106869"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.108108"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.226922">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.226922">
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.041634"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.040885"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.030196"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.042875"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.041925"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.029407"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.006149">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.006149"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.034011">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.006016"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.007904"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.005953"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.006699"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.007439"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.005925">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.005925"/>
    </testsuite>
  </testsuite>
</testsuites>

<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="78.647233">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.025490">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.025490"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.036170">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.036170"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.044064">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.037778">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.021154"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.006818"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.009806"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.006286">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.006286"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.011659">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.011659">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003809"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003827"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.004023"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.307089">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.307089">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.048385"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.027174"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.023454"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.023043"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.023073"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.023095"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.023380"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.023128"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.023119"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.023096"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.023092"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.023051"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.047840">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.016243"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.013172"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.018425"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="4.030076">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.465808">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.048664"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.050303"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.050268"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.043673"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.062831"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.050392"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.086004"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.073673"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.181854">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.060495"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.054869"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.066490"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.913098"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.329786"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.044198"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.048454"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.046878"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.386540">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.386540">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.042919"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.045498"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.040960"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.042341"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.040916"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.043200"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.041713"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.048542"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.040451"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.094969">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.094969">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.023489"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.071480"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.328714">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.019701">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.005708"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.004662"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.004681"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.004650"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.018341">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.005380"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.004329"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.004319"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.004313"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015806">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003994"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003960"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003944"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003908"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.158875">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.010382"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.006504"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.006800"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.006842"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.007169"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.007226"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.010986"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.010282"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.007976"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.007366"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.007007"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.007686"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.007656"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.007893"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.005170"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.008299"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.007134"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.006025"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.007303"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.007305"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.005864"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.034838">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.007022"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.007101"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.007060"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.006877"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.006778"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.005886"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.005894"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.008032"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.008087"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.008036"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.008029"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.007602"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.005968"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.005958"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.006169"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.006170"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.005322"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.849489">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.164136">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.005057"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.005946"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.006199"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004956"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.005025"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004979"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004979"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.005065"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004960"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.006059"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.006241"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.006186"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.006191"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.006319"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.006177"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.006043"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.005007"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.005074"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004971"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.005860"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.006086"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004937"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.005547"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004936"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004903"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.006147"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.004975"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.005221"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.005031"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.005059"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.039556">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.006338"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.005145"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.006183"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004874"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005957"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.005991"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.005068"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.033388">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.004678"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.004607"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.004617"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.005342"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.004887"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004644"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.004613"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.017428">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.004356"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.004347"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.004377"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.004348"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.020614">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.005509"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.005071"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.005032"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.005002"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.017713">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.004436"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.004437"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.004422"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.004418"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.007641"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.037161">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005957"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004933"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.005980"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.004225"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.005897"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.005924"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.004245"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.034978">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.005403"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.004365"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.005965"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.004226"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.005329"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.005312"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.004378"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.037227">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.005993"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.004958"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.006009"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.004247"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.005892"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005878"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.004250"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.034964">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.005390"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.004334"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.005459"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.004225"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.005905"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.005374"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.004277"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.038434">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.006015"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004962"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.006034"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.004823"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.005910"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.005862"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.004828"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.034795">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.005993"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.004337"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.005424"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.004179"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.005344"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.005312"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.004206"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.011435"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.034436">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.005438"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.004387"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.005432"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.004230"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.005346"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.005320"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.004283"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.006177"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.033153">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004776"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004725"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004724"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004719"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004758"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004725"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004726"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.022308">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.004507"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.004432"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.004460"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.004450"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.004459"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.134027">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.005173"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.005142"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.005154"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.005182"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005777"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.005762"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.005727"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.005772"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.005767"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.005789"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.005671"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.005661"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.005666"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.005680"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.005677"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.005657"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.005651"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.005667"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.005171"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.005680"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.005641"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.005646"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.005656"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.005658"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.021041">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.006899"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.007320"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.006822"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.005362"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.027527">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.017789"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.004898"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004840"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.142924">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.004349"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.005310"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.005463"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.004362"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.004333"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.004298"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.004264"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.004318"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.004232"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.005347"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.005505"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.005479"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.005531"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.005577"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.005454"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.005391"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.004228"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.004340"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.004217"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.005321"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.005412"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.004247"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.004802"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.004220"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.004230"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.005450"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.004309"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.004379"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.004325"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.004231"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.021441">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.004312"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.004262"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.004293"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.004294"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.004280"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.016094">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.004034"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.004032"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.004021"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.004007"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.024084">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003999"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.004038"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.004026"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.004003"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.004007"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.004011"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.028194">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.004061"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.004032"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.004027"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.004028"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.004014"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.004012"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.004020"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.020121">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004050"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004014"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.004027"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004018"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.004012"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.117032">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.004455"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.004420"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.004447"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.004429"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.005061"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.005054"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.005045"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.005047"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.005060"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.005053"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004944"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004942"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004953"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004961"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004945"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004949"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004934"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.004980"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.004569"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.004944"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.004979"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.004930"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004990"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004941"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.019649">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.006437"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.006841"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.006371"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.044703">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.004252"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.004094"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.004067"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.004028"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.004028"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.004025"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.004030"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.004067"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.004067"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.004031"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.004014"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012112">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.004043"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.004034"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.004035"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.058721">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.004738"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.004695"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004692"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.005269"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.007867"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.006628"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.004769"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.004726"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.005465"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.005042"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.004830"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014544">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.004864"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.004841"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.004839"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020528">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.004157"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.004104"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.004128"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.004092"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.004047"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020597">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.004154"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.004091"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.004207"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.004073"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.004072"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.024212">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004790"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.004776"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.005004"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004887"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004755"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.024309">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.004707"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.004695"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.004921"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.005274"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.004712"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.032377">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.004116"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.004042"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.004046"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.004036"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.004012"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.004029"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.004036"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.004059"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012110">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.004055"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.004016"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.004039"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.038402">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.004727"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.004707"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.004678"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.004694"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.005281"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.004939"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.004665"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.004711"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014763">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.004818"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.005139"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.004806"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.020231">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.004079"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.004033"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.004020"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.004017"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.004082"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.032228">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.004048"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.004019"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.004050"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.004025"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.004040"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.004010"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.004024"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.004012"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.304146">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.005149"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.007934"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.007952"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.007932"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.007833"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.007439"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.007937"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.008061"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.008067"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.008086"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.008086"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.008226"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.007950"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.007966"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.008240"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.007926"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.007943"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.007946"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.007950"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.007911"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.007899"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.007899"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.007951"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.007939"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.007967"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.007966"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.007819"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.007832"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.007898"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.007873"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.007917"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.007902"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.007944"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.007921"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.007914"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.007943"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.007901"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.007959"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.005168"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.009544">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004814"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.004730"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.111595">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.006262"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.006616"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.006958"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.005686"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.005918"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.005766"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.006331"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.005853"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.005455"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.005414"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.005467"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.005441"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.005274"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.005358"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.005364"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.005354"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.005239"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.006778"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.007061"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.308460">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.005272"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.008017"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.008035"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.008103"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.007895"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.007469"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.007995"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.008121"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.008099"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.008143"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.008119"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.008261"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.008016"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.008039"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.008265"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.007965"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.008009"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.008055"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.008026"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.008029"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.008046"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.008031"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.008095"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.008049"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.008095"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.008055"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.007963"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.007987"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.008080"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.008104"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.008043"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.008038"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.008102"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.008116"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.008096"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.008128"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.008125"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.008103"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.005272"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.009719"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.053428">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.009147"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.009049"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.009051"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.009035"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.008582"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.008564"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.409008">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.012741"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.014548"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.015171"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.012544"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.012683"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.012748"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.012701"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.012828"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.012635"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.014810"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.015021"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.014963"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.015175"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.015145"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.014987"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.014796"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.012546"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.012767"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.012609"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.014657"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.014936"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.012532"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.013878"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.012684"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.012505"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.015102"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.012854"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.012970"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.012896"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.012576"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.022536">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.004499"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.004547"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.004506"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.004513"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.004471"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.048177">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.004239"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.004171"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.005163"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.004164"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.004150"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.004171"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.004148"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.006670"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.006990"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.004311"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="70.269167">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="70.269167">
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.116925"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.105507"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.107992"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.087763"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.087338"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.088890"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.178115"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.178765"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.178965"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.088444"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.088607"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.111179"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.112793"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.106235"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.112868"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.113712"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.112024"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.106346"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.128418"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.114321"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.112034"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.106768"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.113721"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.112245"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.113420"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.106427"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.113899"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.117623"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.117550"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.112039"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.117939"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.147415"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.117559"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.111520"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.116579"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.072027"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.071687"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.071748"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.078258"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.077302"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.078145"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.888404"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="6.148856"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="6.125995"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.891458"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.908754"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.934559"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="6.346018"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="6.273523"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.915097"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="5.009958"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.177928"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.178297"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.178182"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.089384"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.089547"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.075725"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.075895"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.075788"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.075355"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.074681"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.075035"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.067227"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.065538"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.066864"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.073912"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.072371"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.078142"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.074057"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.074573"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.072831"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.073757"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.073837"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.078080"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.076976"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.077126"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.076931"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.077539"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.108729"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.073738"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.074679"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.074428"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.069308"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.066654"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.067665"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.068111"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.067707"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.067976"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.068517"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.067865"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.068532"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.074276"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.073684"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.073287"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.073971"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.131869"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.135473"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.150784"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.154247"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.160392"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.162659"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.095762"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.295270"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.262881"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.292709"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.114138"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.117619"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.121800"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.125561"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.124471"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.090438"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.095419"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.067801"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.073776"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.113188"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.075031"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.075634"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.064421"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.064844"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.066196"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.066819"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.068305"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.068836"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.073975"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.072310"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.072745"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.069570"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.069977"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.069645"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.070001"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.065950"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.066243"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.090826"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.091696"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.092304"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.066346"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.066773"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.102826"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.101264"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.101032"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.103393"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.136066"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.130217"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.130012"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.135653"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.161185"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.161397"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.141913"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.134433"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.151810"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.181028"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.139819"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.098825"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.103170"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.074097"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.073099"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.073445"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.091074"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.091240"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.091163"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.109644"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.107852"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.110687"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.072863"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.073358"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.073459"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.176925">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.176925">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.033389"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.032874"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.023463"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.031227"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.032158"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.023814"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.005390">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.005390"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.028513">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.005298"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.006389"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.005014"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.005638"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.006174"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.005140">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.005140"/>
    </testsuite>
  </testsuite>
</testsuites>

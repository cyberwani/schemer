<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="730" assertions="792" failures="0" errors="0" time="11.726791">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.020565">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.020565"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.034178">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="50" assertions="1" time="0.034178"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.033500">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.027662">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.014663"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.005380"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.007619"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.005838">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.005838"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.008695">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.008695">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.002749"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.002837"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003109"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.182978">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.182978">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.032898"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.016747"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.013446"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.013168"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.013233"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.013470"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.013470"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.013235"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.013191"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.013227"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.013393"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.013500"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.035472">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.012017"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.010121"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.013334"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="14" assertions="25" failures="0" errors="0" time="1.558269">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.336764">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.037326"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.037266"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.037003"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.032669"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.046835"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.034233"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.058491"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.052941"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="2" assertions="2" failures="0" errors="0" time="0.087527">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.045958"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.041569"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="106" assertions="1" time="1.029803"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="121" assertions="1" time="0.033236"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="133" assertions="3" time="0.036013"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="147" assertions="2" time="0.034925"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.273113">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.273113">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.029127"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.032557"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.029054"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.029754"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.028928"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.030628"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.029263"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.035029"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.028772"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.070376">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.070376">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.017262"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.053114"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.242235">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.014632">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.003924"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.003578"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.003564"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.003566"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.013843">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004009"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003221"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003293"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003320"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012158">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003042"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003014"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003016"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003086"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.115263">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.007686"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.004884"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.005365"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005108"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005111"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005384"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.007552"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.007432"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005264"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005394"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.004896"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.005365"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.005661"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.005568"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.003834"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.006372"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.005284"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.004280"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.005430"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.005145"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.004248"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.025240">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.005075"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.004983"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.005199"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.004995"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.004988"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.004513"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.004389"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.006102"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.006250"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.006130"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.005924"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.005736"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.004421"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.004411"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.004619"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.004602"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.004002"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.205090">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.126114">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.003723"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.004434"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.004911"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.003924"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.003896"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.003800"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.003788"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.003804"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004142"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.004431"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.004714"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.004599"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.004797"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.004979"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.004623"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004552"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.003729"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.004087"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.003706"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004733"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004911"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.003749"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004349"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.003770"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.003786"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.004717"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.003844"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.003749"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004109"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.003758"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.030714">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.004625"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.003826"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.004812"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.003987"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004749"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004778"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.003937"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.024997">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003582"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003559"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003558"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003588"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003579"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003549"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003582"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013292">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003348"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003379"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003275"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003290"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.015953">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004454"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.003879"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.003788"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.003832"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013685">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003361"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003532"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003420"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003372"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.005929"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.028793">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004522"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.003862"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.004565"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003279"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004559"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004530"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.003476"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.027002">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004348"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003368"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004514"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003371"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004029"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004040"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003332"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.028264">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.004537"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.003690"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.004548"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003282"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.004471"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.004482"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003254"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.026399">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004095"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003388"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004135"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003267"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.004443"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004001"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003070"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.029079">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.004545"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.003809"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.004552"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.003659"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.004489"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.004520"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.003505"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.026205">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.004518"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003300"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004076"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.002995"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.003963"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004057"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003296"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.008764"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.025964">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004045"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003396"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004111"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003274"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.003987"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.003962"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003189"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.004644"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.025521">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.003662"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.003713"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003625"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.003652"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003640"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003633"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.003596"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.017159">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003395"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003428"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003445"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003425"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003466"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.102139">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.003931"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.003945"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.003927"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.003838"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004373"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004358"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004382"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004352"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004380"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004383"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004378"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004326"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004305"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004298"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004302"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004304"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004299"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004332"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.003979"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.004334"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004430"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004314"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004335"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004334"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.015998">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005220"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.005692"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005086"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004098"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.011194">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.003651"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003764"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.003779"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.109354">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003369"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004061"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004219"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003244"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003327"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003321"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003334"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003480"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003300"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004075"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004206"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004151"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004173"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004210"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004160"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004130"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.003291"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.003356"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.003294"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004077"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004119"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003163"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.003616"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003157"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003192"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004433"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003102"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003108"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003366"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003320"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.016643">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003345"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003288"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003328"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003330"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003352"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.012694">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003154"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003194"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003189"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.003157"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.018960">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003171"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003165"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003147"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003150"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003168"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003159"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.021188">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003177"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003160"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003091"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003007"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.002888"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.002878"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.002987"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.015765">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003130"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003168"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003167"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003179"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.003121"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.091681">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003469"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003470"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003455"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003463"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.003880"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.003898"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.003896"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.003932"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.003921"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.004017"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.003847"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004010"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.003846"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.003985"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.003853"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.003849"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003923"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003929"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003540"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003880"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.004051"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003775"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.003936"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.003856"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.016781">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005029"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.006000"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.005752"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.038526">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003672"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003706"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003558"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003780"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003171"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003187"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003184"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.003497"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003571"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003537"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003663"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.011239">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003720"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003676"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003843"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.046741">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.004230"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.004203"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004351"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.004140"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.004354"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.004252"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.004390"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.004220"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.004167"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.004180"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.004254"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.013020">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.004383"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.004261"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.004376"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.018042">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003753"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003804"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003756"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003523"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003206"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017699">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.003240"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003331"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003793"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003722"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003613"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.021623">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004237"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.004208"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004500"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004331"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004347"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020925">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.004225"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.004064"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.004218"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.004184"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.004234"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.028619">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003800"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003670"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003555"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003684"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003662"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003687"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003378"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003183"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009138">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003107"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003055"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.002976"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.029029">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003515"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003636"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003643"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003653"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003640"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003657"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003655"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003630"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010732">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003590"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003476"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003666"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.015160">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003187"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003113"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.002998"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.002926"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.002936"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.024969">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.002936"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003023"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003136"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003204"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003182"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003198"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003171"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003119"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.233591">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.003989"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006217"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.005946"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006171"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.005879"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.005609"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006246"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006244"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006061"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006103"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006206"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006431"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.006181"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006021"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006167"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.005941"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006231"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006092"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.005989"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.005989"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.006256"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006272"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.005997"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.006021"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.006119"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.006302"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006071"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.005937"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.005959"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.006225"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.005982"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.006011"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006288"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006151"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006155"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006011"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006023"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006121"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.003978"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.007089">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.003529"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.003560"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.086001">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.004807"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005152"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005286"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.004388"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.004570"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004441"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.004945"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.004498"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004226"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004180"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004222"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004229"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004109"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004045"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004126"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004106"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.003886"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005145"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005640"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.238365">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004045"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006391"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006187"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006099"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006072"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.005706"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006321"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006495"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006442"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.007314"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006504"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006228"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006249"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006343"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006336"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006020"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006052"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006276"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006321"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.006103"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006036"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006058"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006337"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.006198"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.006058"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.006096"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.006121"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006246"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.006205"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.006040"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006036"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.006132"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006341"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.006174"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006086"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006067"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006362"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006248"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004020"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.007527"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.041323">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.007051"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.007004"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.007018"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.006990"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.006649"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.006611"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.316201">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.009756"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.011220"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.011659"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.009659"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.009648"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.009671"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.009968"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.009712"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.009582"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.011440"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.011489"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.011572"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.011693"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.011737"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.011427"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.011440"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.009619"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.009737"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.009848"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.011348"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.011577"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.009728"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.010964"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.009808"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.009555"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.011646"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.009968"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.010156"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.010012"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.010563"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.017527">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003783"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003352"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003482"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003455"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003455"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.037031">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003270"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003208"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.003922"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003225"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003213"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003214"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003240"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.005002"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.005389"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003348"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="156" assertions="156" failures="0" errors="0" time="6.938725">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="156" assertions="156" failures="0" errors="0" time="6.938725">
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.038357"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.029318"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.030076"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.044084"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.043719"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.085452"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.085633"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.086000"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.047696"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.139908"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.123235"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.144944"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.051664"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.054011"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.076997"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.080240"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.062356"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.065301"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.075357"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.077639"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.042786"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.044097"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.039384"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.044421"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.043812"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.043045"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.053780"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.044470"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.045511"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.044499"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.041108"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.044813"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.044574"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.044705"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.041064"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.045066"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.059869"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.056527"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.056424"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.060620"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.039443"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.038303"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.038319"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.039392"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.029841"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.029598"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.030057"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.044018"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.044363"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.059086"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.060176"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.060327"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.028894"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.029411"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.029651"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.030382"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.031286"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.049452"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.047803"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.069681"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.044869"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.043230"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.039564"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.045059"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.043227"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.044251"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.039501"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.044717"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.029807"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.027536"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.028313"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.029425"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.028044"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.029022"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.028783"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.028591"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.028129"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.028841"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.028563"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.028334"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.028311"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.028517"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.028278"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.028583"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.028837"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.027536"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.028237"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.028608"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.027966"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.028814"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.028969"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.029061"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.052268"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.029207"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.029603"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.029026"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.029335"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.030897"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.030344"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.032937"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.041771"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.042594"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.043122"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.032424"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.033708"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.029977"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.031683"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.031249"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.031861"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.029078"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.029618"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.032053"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.031974"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.032370"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.030506"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.030997"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.032803"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.033160"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.033318"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.033790"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.029784"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.028501"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.029489"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.028420"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.028308"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.028202"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.080870"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.045034"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.088590"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.089124"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.089411"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.046036"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.049501"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.066507"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.069250"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.082173"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.082077"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.066682"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.061900"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.069588"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.043136"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.042858"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.043108"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.030049"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.029317"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.029671"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.030626"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.036203"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.035988"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.036898"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.030016"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.029392"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.030183"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.053112"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.052101"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.053377"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.123597">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.123597">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.024374"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.023255"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.015723"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.021793"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.022432"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.016020"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>

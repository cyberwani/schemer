<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="80.496131">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.030895">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.030895"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.039562">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.039562"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.052183">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.044529">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.025819"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.008398"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.010312"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.007654">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.007654"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.012908">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.012908">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.004104"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.004228"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.004576"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.322489">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.322489">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.048333"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.027709"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.023794"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.023423"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.023421"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.025699"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.025812"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.024468"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.023886"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.025454"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.025640"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.024850"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.050488">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.018082"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.014454"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.017952"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.964183">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.467945">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.049760"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.052091"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.055355"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.045531"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.063919"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.046878"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.081567"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.072844"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.183254">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.058562"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.055385"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.069307"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.861388"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.313192"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.042884"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.048742"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.046778"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.399846">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.399846">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.042732"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.046670"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.044167"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.046299"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.043456"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.043884"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.042337"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.049436"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.040865"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.095982">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.095982">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.023652"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.072330"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.337196">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.020471">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.005746"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.004615"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.005396"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.004714"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.018653">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.005412"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.004412"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.004410"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.004419"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.017476">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003981"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004293"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.004658"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004544"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.158258">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.010563"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.006571"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.006848"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.006882"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.006863"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.007094"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.010141"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.010324"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.007320"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.007029"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.006700"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.007419"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.007405"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.007483"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.005077"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.008247"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.007660"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.006678"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.007691"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.007922"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.006340"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.036478">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.007744"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.006925"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.006929"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.007642"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.007238"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.006645"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.005937"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.008700"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.008590"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.008359"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.008869"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.008275"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.006466"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.005925"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.006187"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.006120"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.005786"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.953148">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.165708">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.005272"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.006061"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.007085"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.005217"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.005812"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.005039"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.005023"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.005063"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004908"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005929"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.006221"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.006105"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.006251"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.006248"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.006134"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.005978"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004917"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.005024"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.004881"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.005876"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.006071"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.004890"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.005519"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.004981"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.004886"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.006179"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.005093"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.005130"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.005038"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004877"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.039069">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.006189"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.005004"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.006114"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.004914"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.005926"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.005947"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004975"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.032307">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.004654"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.004579"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.004596"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.004573"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.004564"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.004752"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.004589"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.019002">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.004601"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.005188"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.004906"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.004307"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.020485">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.005486"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.005001"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.004993"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.005005"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.018456">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.005045"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.004619"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.004374"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.004418"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.007639"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.037977">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.005968"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.005638"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.006115"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.004191"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.005894"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.005925"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.004246"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.035270">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.005663"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.004541"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.006034"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.004193"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.005319"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.005279"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.004240"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.037464">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.006079"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.005143"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.006013"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.004197"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.005915"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005899"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.004218"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.037193">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.005852"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.005379"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.005860"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.004197"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.006318"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.005338"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.004249"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.041126">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.006191"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.005001"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.006632"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.004865"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.006703"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.006335"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.005399"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.038566">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.006496"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.004977"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.006201"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.005016"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.005971"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.005377"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.004528"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.012637"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.035712">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.005574"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.004828"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.005413"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.004214"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.005678"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.005320"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.004685"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.006201"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.033187">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004747"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004760"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.004720"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.004744"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.004734"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.004774"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.004708"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.022184">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.004477"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.004418"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.004440"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.004411"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.004438"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.134848">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.005177"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.005168"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.005171"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.005195"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.005802"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.005800"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.005796"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.005786"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.005780"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.005879"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.005699"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.005659"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.005687"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.005643"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.005676"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.005639"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.005648"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.005686"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.005191"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.005678"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.005673"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.005721"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.005764"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.005930"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.021078">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.006903"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.007349"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.006826"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.005380"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.015016">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.005163"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.004914"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.004939"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.143835">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.004340"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.005280"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.005409"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.004301"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.004272"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.004316"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.004313"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.004316"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.004217"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.005376"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.005525"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.005479"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.005581"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.005699"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.005468"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.005505"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.004298"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.004315"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.004212"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.005330"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.005412"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.004318"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.004912"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.004314"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.004288"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.005477"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.004390"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.004429"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.004425"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.004318"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.021457">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.004324"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.004221"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.004299"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.004300"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.004313"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.016210">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.004089"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.004021"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.004041"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.004059"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.024199">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.004079"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.004039"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.004006"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003991"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.004049"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.004035"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.028617">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.004091"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.004057"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.004090"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.004089"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.004090"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.004104"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.004096"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.020077">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.004031"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004017"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.004002"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004017"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.004010"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.118289">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.004498"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.004525"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.004567"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.004596"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.005457"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.005198"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.005325"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.005176"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.005106"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.005025"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004917"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004906"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004879"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.004920"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.004877"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004966"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.004915"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.005018"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.004513"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.005014"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.005017"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.004986"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.004951"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.004938"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.019810">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.006455"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.006943"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.006412"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.045260">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.004086"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.004084"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.004127"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.004147"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.004112"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.004138"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.004125"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.004125"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.004125"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.004085"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.004106"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012458">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.004079"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.004108"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.004271"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.052402">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.005022"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.004828"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004715"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.005208"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.004642"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.004649"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.004641"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.004685"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.004702"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.004657"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.004653"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014279">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.004736"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.004770"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.004773"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020603">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.004510"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.004043"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.004024"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.004036"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003990"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.020830">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.004073"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.004032"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.004130"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.004398"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.004197"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.024486">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004817"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.004760"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.004981"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.005175"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.004753"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.023594">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.005057"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.004660"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.004648"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.004618"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.004611"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.032147">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.004063"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003994"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.004086"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003994"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003984"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.004011"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003997"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.004018"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.012127">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.004045"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.004016"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.004066"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.037840">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.004726"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.004866"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.004730"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.004684"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.004672"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.004690"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.004731"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.004741"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.014384">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.004779"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.004808"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.004797"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.020337">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.004051"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.004037"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.004049"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.004044"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.004156"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.032675">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.004097"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.004377"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.004026"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003980"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.004040"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.004027"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.004038"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.004090"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.316332">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.005745"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.008286"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.008405"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.007954"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.007866"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.007474"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.007967"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.008078"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.008106"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.008337"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.008120"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.008139"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.007911"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.007955"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.008164"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.008825"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.008060"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.007984"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.007938"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.008006"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.007916"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.007936"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.007937"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.007913"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.008025"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.008400"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.008362"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.009451"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.008929"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.008787"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.008798"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.008652"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.008600"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.007976"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.007903"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.008341"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.008102"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.008326"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.006658"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.009826">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004951"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.004875"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.117973">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.006501"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.007229"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.007525"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.006562"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.006301"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.005806"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.006369"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.006076"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.006271"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.006275"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.005533"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.005593"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.005421"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.005577"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.005529"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.006064"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.005262"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.006896"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.007183"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.340973">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.005321"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.008186"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.008062"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.008118"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.008076"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.007655"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.008202"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.008465"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.008567"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.008448"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.008327"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.008468"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.009495"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.008169"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.009304"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.010937"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.008409"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.008632"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.008514"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.008676"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.008588"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.009647"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.009135"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.008480"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.008618"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.009429"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.009662"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.008264"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.008354"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.008609"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.008481"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.008799"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.009549"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.010879"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.012700"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.011120"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.008565"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.008485"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.005578"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.010048"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.055500">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.009541"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.009405"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.009299"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.009482"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.008831"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.008942"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.452526">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.013150"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.014970"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.016801"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.012807"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.013017"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.013024"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.014794"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.014814"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.015571"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.018563"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.021592"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.023134"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.015800"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.015783"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.015584"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.015235"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.013333"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.013247"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.012751"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.015061"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.015379"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.013951"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.014776"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.012999"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.013086"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.018076"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.014066"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.013474"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.013254"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.014433"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.024950">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.004899"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.005122"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.005074"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.004766"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.005089"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.052598">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.004567"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.004305"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.005411"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.005010"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.004845"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.004591"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.004477"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.006978"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.007521"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.004893"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="72.008797">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="72.008797">
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.133102"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.131417"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.118564"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.093015"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.094677"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.093483"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.186314"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.188876"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.184949"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.092447"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.095022"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.117689"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.121968"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.117068"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.119635"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.120021"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.127011"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.116279"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.138738"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.118568"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.116570"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.112312"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.121981"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.120448"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.118317"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.112170"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.118711"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.124647"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.130227"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.119923"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.121424"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.134501"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.123895"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.123853"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.137887"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.083694"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.076806"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.076837"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.083157"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.083747"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.085695"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.806493"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="6.156233"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="6.149288"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.799303"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.805767"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.856398"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="6.306798"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="6.570467"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="5.018804"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="5.214622"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.194413"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.186512"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.187669"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.095160"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.096004"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.085302"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.084680"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.081432"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.090267"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.081537"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.084485"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.074690"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.071277"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.072405"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.080389"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.079659"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.082172"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.080412"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.081219"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.079959"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.079243"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.090388"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.101230"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.096308"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.082135"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.089401"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.091498"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.127128"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.092282"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.089029"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.091075"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.093292"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.080953"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.081449"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.084518"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.081342"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.081675"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.083913"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.088731"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.090834"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.096814"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.096636"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.078256"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.078818"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.138319"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.141300"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.164913"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.165383"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.168777"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.169746"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.101365"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.308882"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.277758"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.302844"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.139775"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.146757"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.142866"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.137409"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.131580"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.094894"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.096199"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.070378"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.074296"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.115171"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.079680"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.083198"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.070529"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.069310"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.075790"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.078971"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.073030"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.073318"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.077381"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.077738"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.078095"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.075299"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.075737"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.074814"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.074843"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.071183"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.070750"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.095857"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.096367"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.096963"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.080332"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.071556"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.109989"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.107316"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.109017"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.115001"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.141784"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.136787"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.136144"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.141995"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.170451"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.168317"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.181286"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.140110"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.150737"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.191718"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.159495"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.121624"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.129238"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.094138"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.091512"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.080022"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.101468"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.097483"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.097391"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.116312"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.114751"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.116342"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.078305"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.081440"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.082861"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.186824">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.186824">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.035775"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.035529"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.024985"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.032228"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.033008"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.025299"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.005422">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.005422"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.030563">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.005363"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.007199"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.005541"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.006045"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.006416"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.005645">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.005645"/>
    </testsuite>
  </testsuite>
</testsuites>

<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="" tests="749" assertions="812" failures="0" errors="0" time="69.586179">
    <testsuite name="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.037274">
      <testcase name="testCreate" class="Eloquent\Schemer\Constraint\Factory\MetaSchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/MetaSchemaFactoryTest.php" line="25" assertions="1" time="0.037274"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" namespace="Eloquent\Schemer\Constraint\Factory" fullPackage="Eloquent.Schemer.Constraint.Factory" tests="1" assertions="1" failures="0" errors="0" time="0.034684">
      <testcase name="testRecursiveSchemaCreation" class="Eloquent\Schemer\Constraint\Factory\SchemaFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Constraint/Factory/SchemaFactoryTest.php" line="37" assertions="1" time="0.034684"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerFactoryTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="4" assertions="7" failures="0" errors="0" time="0.065801">
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreate" tests="3" assertions="6" failures="0" errors="0" time="0.059640">
        <testcase name="testCreate with data set &quot;Empty pointer&quot;" assertions="2" time="0.042611"/>
        <testcase name="testCreate with data set &quot;Pointer with single empty string atom&quot;" assertions="2" time="0.006534"/>
        <testcase name="testCreate with data set &quot;Escaped characters in atoms&quot;" assertions="2" time="0.010495"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Pointer\PointerFactoryTest::testCreateFailure" tests="1" assertions="1" failures="0" errors="0" time="0.006161">
        <testcase name="testCreateFailure with data set &quot;No leading separator&quot;" assertions="1" time="0.006161"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\PointerTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/PointerTest.php" namespace="Eloquent\Schemer\Pointer" fullPackage="Eloquent.Schemer.Pointer" tests="3" assertions="3" failures="0" errors="0" time="0.011056">
      <testsuite name="Eloquent\Schemer\Pointer\PointerTest::testString" tests="3" assertions="3" failures="0" errors="0" time="0.011056">
        <testcase name="testString with data set &quot;Empty pointer&quot;" assertions="1" time="0.003520"/>
        <testcase name="testString with data set &quot;Pointer with single empty string atom&quot;" assertions="1" time="0.003669"/>
        <testcase name="testString with data set &quot;Escaped characters in atoms&quot;" assertions="1" time="0.003867"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Pointer/Resolver/PointerResolverTest.php" namespace="Eloquent\Schemer\Pointer\Resolver" fullPackage="Eloquent.Schemer.Pointer.Resolver" tests="12" assertions="24" failures="0" errors="0" time="0.312531">
      <testsuite name="Eloquent\Schemer\Pointer\Resolver\PointerResolverTest::testResolver" tests="12" assertions="24" failures="0" errors="0" time="0.312531">
        <testcase name="testResolver with data set &quot;spec-examples.json / example 1&quot;" assertions="2" time="0.057400"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 2&quot;" assertions="2" time="0.030131"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 3&quot;" assertions="2" time="0.026090"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 4&quot;" assertions="2" time="0.024033"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 5&quot;" assertions="2" time="0.026470"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 6&quot;" assertions="2" time="0.021503"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 7&quot;" assertions="2" time="0.021036"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 8&quot;" assertions="2" time="0.020931"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 9&quot;" assertions="2" time="0.021244"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 10&quot;" assertions="2" time="0.021123"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 11&quot;" assertions="2" time="0.021202"/>
        <testcase name="testResolver with data set &quot;spec-examples.json / example 12&quot;" assertions="2" time="0.021368"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" namespace="Eloquent\Schemer\Reader" fullPackage="Eloquent.Schemer.Reader" tests="3" assertions="6" failures="0" errors="0" time="0.043500">
      <testcase name="testReadStringJson" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="32" assertions="2" time="0.015066"/>
      <testcase name="testReadStringToml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="45" assertions="2" time="0.012307"/>
      <testcase name="testReadStringYaml" class="Eloquent\Schemer\Reader\ReaderTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reader/ReaderTest.php" line="57" assertions="2" time="0.016127"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="16" assertions="27" failures="0" errors="0" time="3.533115">
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolver" tests="8" assertions="16" failures="0" errors="0" time="0.409380">
        <testcase name="testResolver with data set &quot;complete-document&quot;" assertions="2" time="0.042983"/>
        <testcase name="testResolver with data set &quot;explicit-type&quot;" assertions="2" time="0.045135"/>
        <testcase name="testResolver with data set &quot;implicit-type&quot;" assertions="2" time="0.044143"/>
        <testcase name="testResolver with data set &quot;inline&quot;" assertions="2" time="0.040517"/>
        <testcase name="testResolver with data set &quot;nested&quot;" assertions="2" time="0.057277"/>
        <testcase name="testResolver with data set &quot;partial-document&quot;" assertions="2" time="0.042320"/>
        <testcase name="testResolver with data set &quot;switching-scope&quot;" assertions="2" time="0.072792"/>
        <testcase name="testResolver with data set &quot;switching-scope-non-pointer-fragment&quot;" assertions="2" time="0.064213"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Reference\ReferenceResolverTest::testResolveResolvableRecursive" tests="3" assertions="3" failures="0" errors="0" time="0.166501">
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-inline.json&quot;" assertions="1" time="0.055979"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external.json&quot;" assertions="1" time="0.050725"/>
        <testcase name="testResolveResolvableRecursive with data set &quot;resolvable-external-switching-scope.json&quot;" assertions="1" time="0.059797"/>
      </testsuite>
      <testcase name="testResolveResolvableMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="101" assertions="1" time="1.658041"/>
      <testcase name="testResolveResolvableJsonSchemaMetaSchema" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="113" assertions="1" time="1.144123"/>
      <testcase name="testResolveResolvableRecursiveFucked" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="125" assertions="1" time="0.038292"/>
      <testcase name="testResolveUnresolvableRecursiveInline" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="137" assertions="3" time="0.060494"/>
      <testcase name="testResolveUnresolvableRecursiveExternal" class="Eloquent\Schemer\Reference\ReferenceResolverTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ReferenceResolverTest.php" line="151" assertions="2" time="0.056284"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/ResolutionScopeMapTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="9" assertions="17" failures="0" errors="0" time="0.328184">
      <testsuite name="Eloquent\Schemer\Reference\ResolutionScopeMapTest::testPointerByUri" tests="9" assertions="17" failures="0" errors="0" time="0.328184">
        <testcase name="testPointerByUri with data set &quot;document root match&quot;" assertions="2" time="0.037469"/>
        <testcase name="testPointerByUri with data set &quot;document root match with pointer-fragment&quot;" assertions="2" time="0.037225"/>
        <testcase name="testPointerByUri with data set &quot;document root match with non-pointer fragment&quot;" assertions="2" time="0.032927"/>
        <testcase name="testPointerByUri with data set &quot;later overlapping pointer-fragment match ignored&quot;" assertions="2" time="0.038356"/>
        <testcase name="testPointerByUri with data set &quot;exact URI match&quot;" assertions="2" time="0.034171"/>
        <testcase name="testPointerByUri with data set &quot;URI match with pointer-fragment&quot;" assertions="2" time="0.036248"/>
        <testcase name="testPointerByUri with data set &quot;URI match with non-pointer fragment&quot;" assertions="2" time="0.035198"/>
        <testcase name="testPointerByUri with data set &quot;URI match with parent pointer-fragment&quot;" assertions="2" time="0.041583"/>
        <testcase name="testPointerByUri with data set &quot;non match&quot;" assertions="1" time="0.035007"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Reference/SwitchingResolutionScopeMapFactoryTest.php" namespace="Eloquent\Schemer\Reference" fullPackage="Eloquent.Schemer.Reference" tests="2" assertions="6" failures="0" errors="0" time="0.083923">
      <testsuite name="Eloquent\Schemer\Reference\SwitchingResolutionScopeMapFactoryTest::testFactory" tests="2" assertions="6" failures="0" errors="0" time="0.083923">
        <testcase name="testFactory with data set &quot;unspecified-root.json&quot;" assertions="3" time="0.020715"/>
        <testcase name="testFactory with data set &quot;spec-example.json&quot;" assertions="3" time="0.063208"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="50" assertions="60" failures="0" errors="0" time="0.288746">
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.017218">
        <testcase name="testValidScheme with data set #0" assertions="1" time="0.005082"/>
        <testcase name="testValidScheme with data set #1" assertions="1" time="0.004054"/>
        <testcase name="testValidScheme with data set #2" assertions="1" time="0.004041"/>
        <testcase name="testValidScheme with data set #3" assertions="1" time="0.004041"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testInvalidScheme" tests="4" assertions="4" failures="0" errors="0" time="0.016170">
        <testcase name="testInvalidScheme with data set #0" assertions="1" time="0.004738"/>
        <testcase name="testInvalidScheme with data set #1" assertions="1" time="0.003814"/>
        <testcase name="testInvalidScheme with data set #2" assertions="1" time="0.003809"/>
        <testcase name="testInvalidScheme with data set #3" assertions="1" time="0.003809"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateSchemeInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.013909">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.003449"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.003442"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003581"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.003437"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testValidateHost" tests="21" assertions="21" failures="0" errors="0" time="0.135825">
        <testcase name="testValidateHost with data set #0" assertions="1" time="0.009244"/>
        <testcase name="testValidateHost with data set #1" assertions="1" time="0.005890"/>
        <testcase name="testValidateHost with data set #2" assertions="1" time="0.008591"/>
        <testcase name="testValidateHost with data set #3" assertions="1" time="0.005975"/>
        <testcase name="testValidateHost with data set #4" assertions="1" time="0.005696"/>
        <testcase name="testValidateHost with data set #5" assertions="1" time="0.005253"/>
        <testcase name="testValidateHost with data set #6" assertions="1" time="0.012256"/>
        <testcase name="testValidateHost with data set #7" assertions="1" time="0.007727"/>
        <testcase name="testValidateHost with data set #8" assertions="1" time="0.005685"/>
        <testcase name="testValidateHost with data set #9" assertions="1" time="0.005567"/>
        <testcase name="testValidateHost with data set #10" assertions="1" time="0.005599"/>
        <testcase name="testValidateHost with data set #11" assertions="1" time="0.006009"/>
        <testcase name="testValidateHost with data set #12" assertions="1" time="0.006162"/>
        <testcase name="testValidateHost with data set #13" assertions="1" time="0.006232"/>
        <testcase name="testValidateHost with data set #14" assertions="1" time="0.004027"/>
        <testcase name="testValidateHost with data set #15" assertions="1" time="0.007256"/>
        <testcase name="testValidateHost with data set #16" assertions="1" time="0.006172"/>
        <testcase name="testValidateHost with data set #17" assertions="1" time="0.005114"/>
        <testcase name="testValidateHost with data set #18" assertions="1" time="0.006133"/>
        <testcase name="testValidateHost with data set #19" assertions="1" time="0.006222"/>
        <testcase name="testValidateHost with data set #20" assertions="1" time="0.005015"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\HttpUriTest::testNormalizationRemovesPort" tests="5" assertions="5" failures="0" errors="0" time="0.030903">
        <testcase name="testNormalizationRemovesPort with data set #0" assertions="1" time="0.006396"/>
        <testcase name="testNormalizationRemovesPort with data set #1" assertions="1" time="0.006155"/>
        <testcase name="testNormalizationRemovesPort with data set #2" assertions="1" time="0.006112"/>
        <testcase name="testNormalizationRemovesPort with data set #3" assertions="1" time="0.006080"/>
        <testcase name="testNormalizationRemovesPort with data set #4" assertions="1" time="0.006160"/>
      </testsuite>
      <testcase name="testUserIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="159" assertions="1" time="0.005446"/>
      <testcase name="testPasswordIsNullByDefaultWhenNoUserInfoIsProvided" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="166" assertions="1" time="0.005271"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriNotContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="173" assertions="3" time="0.007181"/>
      <testcase name="testCanParseUsernameAndPasswordFromUriContainingPort" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="182" assertions="3" time="0.007199"/>
      <testcase name="testCanParseUsernameContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="191" assertions="3" time="0.007013"/>
      <testcase name="testCanParsePasswordContainingAtMarkFromUri" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="200" assertions="3" time="0.007200"/>
      <testcase name="testUserInfoCanOmitPassword" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="209" assertions="3" time="0.006739"/>
      <testcase name="testGetPortReturnsDefaultPortHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="218" assertions="1" time="0.005588"/>
      <testcase name="testGetPortReturnsDefaultPortHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="224" assertions="1" time="0.005551"/>
      <testcase name="testGetPortDoesntModifyUrlHttp" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="230" assertions="1" time="0.005664"/>
      <testcase name="testGetPortDoesntModifyUrlHttps" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="238" assertions="1" time="0.006007"/>
      <testcase name="testValidHostTypesWithUnderScore" class="Eloquent\Schemer\Uri\HttpUriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/HttpUriTest.php" line="246" assertions="1" time="0.005862"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" namespace="Eloquent\Schemer\Uri" fullPackage="Eloquent.Schemer.Uri" tests="469" assertions="474" failures="0" errors="0" time="2.347005">
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseComposeUri" tests="30" assertions="30" failures="0" errors="0" time="0.139431">
        <testcase name="testParseComposeUri with data set #0" assertions="1" time="0.004470"/>
        <testcase name="testParseComposeUri with data set #1" assertions="1" time="0.005391"/>
        <testcase name="testParseComposeUri with data set #2" assertions="1" time="0.005776"/>
        <testcase name="testParseComposeUri with data set #3" assertions="1" time="0.004525"/>
        <testcase name="testParseComposeUri with data set #4" assertions="1" time="0.004453"/>
        <testcase name="testParseComposeUri with data set #5" assertions="1" time="0.004512"/>
        <testcase name="testParseComposeUri with data set #6" assertions="1" time="0.004673"/>
        <testcase name="testParseComposeUri with data set #7" assertions="1" time="0.004906"/>
        <testcase name="testParseComposeUri with data set #8" assertions="1" time="0.004553"/>
        <testcase name="testParseComposeUri with data set #9" assertions="1" time="0.005468"/>
        <testcase name="testParseComposeUri with data set #10" assertions="1" time="0.005789"/>
        <testcase name="testParseComposeUri with data set #11" assertions="1" time="0.005659"/>
        <testcase name="testParseComposeUri with data set #12" assertions="1" time="0.005622"/>
        <testcase name="testParseComposeUri with data set #13" assertions="1" time="0.005248"/>
        <testcase name="testParseComposeUri with data set #14" assertions="1" time="0.005113"/>
        <testcase name="testParseComposeUri with data set #15" assertions="1" time="0.004993"/>
        <testcase name="testParseComposeUri with data set #16" assertions="1" time="0.004016"/>
        <testcase name="testParseComposeUri with data set #17" assertions="1" time="0.003866"/>
        <testcase name="testParseComposeUri with data set #18" assertions="1" time="0.003825"/>
        <testcase name="testParseComposeUri with data set #19" assertions="1" time="0.004750"/>
        <testcase name="testParseComposeUri with data set #20" assertions="1" time="0.004837"/>
        <testcase name="testParseComposeUri with data set #21" assertions="1" time="0.003921"/>
        <testcase name="testParseComposeUri with data set #22" assertions="1" time="0.004359"/>
        <testcase name="testParseComposeUri with data set #23" assertions="1" time="0.003984"/>
        <testcase name="testParseComposeUri with data set #24" assertions="1" time="0.003780"/>
        <testcase name="testParseComposeUri with data set #25" assertions="1" time="0.004862"/>
        <testcase name="testParseComposeUri with data set #26" assertions="1" time="0.003855"/>
        <testcase name="testParseComposeUri with data set #27" assertions="1" time="0.003962"/>
        <testcase name="testParseComposeUri with data set #28" assertions="1" time="0.004202"/>
        <testcase name="testParseComposeUri with data set #29" assertions="1" time="0.004062"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testComposeNewUriAndCastToString" tests="7" assertions="7" failures="0" errors="0" time="0.030864">
        <testcase name="testComposeNewUriAndCastToString with data set #0" assertions="1" time="0.004849"/>
        <testcase name="testComposeNewUriAndCastToString with data set #1" assertions="1" time="0.004101"/>
        <testcase name="testComposeNewUriAndCastToString with data set #2" assertions="1" time="0.004631"/>
        <testcase name="testComposeNewUriAndCastToString with data set #3" assertions="1" time="0.003742"/>
        <testcase name="testComposeNewUriAndCastToString with data set #4" assertions="1" time="0.004707"/>
        <testcase name="testComposeNewUriAndCastToString with data set #5" assertions="1" time="0.004724"/>
        <testcase name="testComposeNewUriAndCastToString with data set #6" assertions="1" time="0.004110"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseScheme" tests="7" assertions="7" failures="0" errors="0" time="0.026174">
        <testcase name="testParseScheme with data set #0" assertions="1" time="0.003773"/>
        <testcase name="testParseScheme with data set #1" assertions="1" time="0.003743"/>
        <testcase name="testParseScheme with data set #2" assertions="1" time="0.003709"/>
        <testcase name="testParseScheme with data set #3" assertions="1" time="0.003688"/>
        <testcase name="testParseScheme with data set #4" assertions="1" time="0.003795"/>
        <testcase name="testParseScheme with data set #5" assertions="1" time="0.003751"/>
        <testcase name="testParseScheme with data set #6" assertions="1" time="0.003716"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testParseSchemeInvalidInput" tests="4" assertions="4" failures="0" errors="0" time="0.013959">
        <testcase name="testParseSchemeInvalidInput with data set #0" assertions="1" time="0.003575"/>
        <testcase name="testParseSchemeInvalidInput with data set #1" assertions="1" time="0.003452"/>
        <testcase name="testParseSchemeInvalidInput with data set #2" assertions="1" time="0.003397"/>
        <testcase name="testParseSchemeInvalidInput with data set #3" assertions="1" time="0.003535"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMagicToStringEmptyIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.016929">
        <testcase name="testMagicToStringEmptyIfInvalid with data set #0" assertions="1" time="0.004594"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #1" assertions="1" time="0.004163"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #2" assertions="1" time="0.004171"/>
        <testcase name="testMagicToStringEmptyIfInvalid with data set #3" assertions="1" time="0.004001"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testToStringThrowsExceptionIfInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014351">
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #0" assertions="1" time="0.003503"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #1" assertions="1" time="0.003716"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #2" assertions="1" time="0.003605"/>
        <testcase name="testToStringThrowsExceptionIfInvalid with data set #3" assertions="1" time="0.003527"/>
      </testsuite>
      <testcase name="testCanParseMalformedUrlZF11286" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="109" assertions="1" time="0.006230"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetScheme" tests="7" assertions="7" failures="0" errors="0" time="0.030997">
        <testcase name="testGetScheme with data set #0" assertions="1" time="0.004940"/>
        <testcase name="testGetScheme with data set #1" assertions="1" time="0.004235"/>
        <testcase name="testGetScheme with data set #2" assertions="1" time="0.004662"/>
        <testcase name="testGetScheme with data set #3" assertions="1" time="0.003506"/>
        <testcase name="testGetScheme with data set #4" assertions="1" time="0.004839"/>
        <testcase name="testGetScheme with data set #5" assertions="1" time="0.004693"/>
        <testcase name="testGetScheme with data set #6" assertions="1" time="0.004122"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetUserInfo" tests="7" assertions="7" failures="0" errors="0" time="0.028669">
        <testcase name="testGetUserInfo with data set #0" assertions="1" time="0.004370"/>
        <testcase name="testGetUserInfo with data set #1" assertions="1" time="0.003542"/>
        <testcase name="testGetUserInfo with data set #2" assertions="1" time="0.004656"/>
        <testcase name="testGetUserInfo with data set #3" assertions="1" time="0.003396"/>
        <testcase name="testGetUserInfo with data set #4" assertions="1" time="0.004432"/>
        <testcase name="testGetUserInfo with data set #5" assertions="1" time="0.004468"/>
        <testcase name="testGetUserInfo with data set #6" assertions="1" time="0.003805"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetHost" tests="7" assertions="7" failures="0" errors="0" time="0.034594">
        <testcase name="testGetHost with data set #0" assertions="1" time="0.006376"/>
        <testcase name="testGetHost with data set #1" assertions="1" time="0.004577"/>
        <testcase name="testGetHost with data set #2" assertions="1" time="0.005438"/>
        <testcase name="testGetHost with data set #3" assertions="1" time="0.003822"/>
        <testcase name="testGetHost with data set #4" assertions="1" time="0.005306"/>
        <testcase name="testGetHost with data set #5" assertions="1" time="0.005302"/>
        <testcase name="testGetHost with data set #6" assertions="1" time="0.003773"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPort" tests="7" assertions="7" failures="0" errors="0" time="0.030815">
        <testcase name="testGetPort with data set #0" assertions="1" time="0.004785"/>
        <testcase name="testGetPort with data set #1" assertions="1" time="0.003706"/>
        <testcase name="testGetPort with data set #2" assertions="1" time="0.004655"/>
        <testcase name="testGetPort with data set #3" assertions="1" time="0.003664"/>
        <testcase name="testGetPort with data set #4" assertions="1" time="0.005278"/>
        <testcase name="testGetPort with data set #5" assertions="1" time="0.004872"/>
        <testcase name="testGetPort with data set #6" assertions="1" time="0.003855"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetPath" tests="7" assertions="7" failures="0" errors="0" time="0.034101">
        <testcase name="testGetPath with data set #0" assertions="1" time="0.005387"/>
        <testcase name="testGetPath with data set #1" assertions="1" time="0.004435"/>
        <testcase name="testGetPath with data set #2" assertions="1" time="0.005275"/>
        <testcase name="testGetPath with data set #3" assertions="1" time="0.004314"/>
        <testcase name="testGetPath with data set #4" assertions="1" time="0.005200"/>
        <testcase name="testGetPath with data set #5" assertions="1" time="0.005279"/>
        <testcase name="testGetPath with data set #6" assertions="1" time="0.004211"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetQuery" tests="7" assertions="7" failures="0" errors="0" time="0.030695">
        <testcase name="testGetQuery with data set #0" assertions="1" time="0.005289"/>
        <testcase name="testGetQuery with data set #1" assertions="1" time="0.003947"/>
        <testcase name="testGetQuery with data set #2" assertions="1" time="0.004932"/>
        <testcase name="testGetQuery with data set #3" assertions="1" time="0.003716"/>
        <testcase name="testGetQuery with data set #4" assertions="1" time="0.004617"/>
        <testcase name="testGetQuery with data set #5" assertions="1" time="0.004677"/>
        <testcase name="testGetQuery with data set #6" assertions="1" time="0.003517"/>
      </testsuite>
      <testcase name="testGetQueryAsArrayReturnsCorrectArray" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="227" assertions="2" time="0.009380"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testGetFragment" tests="7" assertions="7" failures="0" errors="0" time="0.028315">
        <testcase name="testGetFragment with data set #0" assertions="1" time="0.004351"/>
        <testcase name="testGetFragment with data set #1" assertions="1" time="0.003471"/>
        <testcase name="testGetFragment with data set #2" assertions="1" time="0.004412"/>
        <testcase name="testGetFragment with data set #3" assertions="1" time="0.003597"/>
        <testcase name="testGetFragment with data set #4" assertions="1" time="0.004515"/>
        <testcase name="testGetFragment with data set #5" assertions="1" time="0.004519"/>
        <testcase name="testGetFragment with data set #6" assertions="1" time="0.003449"/>
      </testsuite>
      <testcase name="testSetSchemeNull" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="266" assertions="2" time="0.005301"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.027764">
        <testcase name="testSetSchemeValid with data set #0" assertions="1" time="0.004134"/>
        <testcase name="testSetSchemeValid with data set #1" assertions="1" time="0.004076"/>
        <testcase name="testSetSchemeValid with data set #2" assertions="1" time="0.003943"/>
        <testcase name="testSetSchemeValid with data set #3" assertions="1" time="0.003893"/>
        <testcase name="testSetSchemeValid with data set #4" assertions="1" time="0.003924"/>
        <testcase name="testSetSchemeValid with data set #5" assertions="1" time="0.003901"/>
        <testcase name="testSetSchemeValid with data set #6" assertions="1" time="0.003893"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidScheme" tests="5" assertions="5" failures="0" errors="0" time="0.017922">
        <testcase name="testSetInvalidScheme with data set #0" assertions="1" time="0.003621"/>
        <testcase name="testSetInvalidScheme with data set #1" assertions="1" time="0.003574"/>
        <testcase name="testSetInvalidScheme with data set #2" assertions="1" time="0.003614"/>
        <testcase name="testSetInvalidScheme with data set #3" assertions="1" time="0.003518"/>
        <testcase name="testSetInvalidScheme with data set #4" assertions="1" time="0.003594"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetGetValidHost" tests="24" assertions="24" failures="0" errors="0" time="0.112602">
        <testcase name="testSetGetValidHost with data set #0" assertions="1" time="0.004304"/>
        <testcase name="testSetGetValidHost with data set #1" assertions="1" time="0.004932"/>
        <testcase name="testSetGetValidHost with data set #2" assertions="1" time="0.005142"/>
        <testcase name="testSetGetValidHost with data set #3" assertions="1" time="0.004396"/>
        <testcase name="testSetGetValidHost with data set #4" assertions="1" time="0.004685"/>
        <testcase name="testSetGetValidHost with data set #5" assertions="1" time="0.004441"/>
        <testcase name="testSetGetValidHost with data set #6" assertions="1" time="0.004655"/>
        <testcase name="testSetGetValidHost with data set #7" assertions="1" time="0.004816"/>
        <testcase name="testSetGetValidHost with data set #8" assertions="1" time="0.004724"/>
        <testcase name="testSetGetValidHost with data set #9" assertions="1" time="0.004788"/>
        <testcase name="testSetGetValidHost with data set #10" assertions="1" time="0.004605"/>
        <testcase name="testSetGetValidHost with data set #11" assertions="1" time="0.004309"/>
        <testcase name="testSetGetValidHost with data set #12" assertions="1" time="0.004468"/>
        <testcase name="testSetGetValidHost with data set #13" assertions="1" time="0.004521"/>
        <testcase name="testSetGetValidHost with data set #14" assertions="1" time="0.004608"/>
        <testcase name="testSetGetValidHost with data set #15" assertions="1" time="0.004682"/>
        <testcase name="testSetGetValidHost with data set #16" assertions="1" time="0.004657"/>
        <testcase name="testSetGetValidHost with data set #17" assertions="1" time="0.004399"/>
        <testcase name="testSetGetValidHost with data set #18" assertions="1" time="0.005144"/>
        <testcase name="testSetGetValidHost with data set #19" assertions="1" time="0.005506"/>
        <testcase name="testSetGetValidHost with data set #20" assertions="1" time="0.004548"/>
        <testcase name="testSetGetValidHost with data set #21" assertions="1" time="0.004740"/>
        <testcase name="testSetGetValidHost with data set #22" assertions="1" time="0.004959"/>
        <testcase name="testSetGetValidHost with data set #23" assertions="1" time="0.004573"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetInvalidHost" tests="3" assertions="3" failures="0" errors="0" time="0.018226">
        <testcase name="testSetInvalidHost with data set #0" assertions="1" time="0.005902"/>
        <testcase name="testSetInvalidHost with data set #1" assertions="1" time="0.006771"/>
        <testcase name="testSetInvalidHost with data set #2" assertions="1" time="0.005553"/>
      </testsuite>
      <testcase name="testSetNullHost" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="331" assertions="1" time="0.004311"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testSetQueryFromArray" tests="3" assertions="3" failures="0" errors="0" time="0.011450">
        <testcase name="testSetQueryFromArray with data set #0" assertions="1" time="0.003836"/>
        <testcase name="testSetQueryFromArray with data set #1" assertions="1" time="0.003867"/>
        <testcase name="testSetQueryFromArray with data set #2" assertions="1" time="0.003747"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidUriIsValid" tests="30" assertions="30" failures="0" errors="0" time="0.119694">
        <testcase name="testValidUriIsValid with data set #0" assertions="1" time="0.003366"/>
        <testcase name="testValidUriIsValid with data set #1" assertions="1" time="0.004289"/>
        <testcase name="testValidUriIsValid with data set #2" assertions="1" time="0.004140"/>
        <testcase name="testValidUriIsValid with data set #3" assertions="1" time="0.003369"/>
        <testcase name="testValidUriIsValid with data set #4" assertions="1" time="0.003350"/>
        <testcase name="testValidUriIsValid with data set #5" assertions="1" time="0.003126"/>
        <testcase name="testValidUriIsValid with data set #6" assertions="1" time="0.003330"/>
        <testcase name="testValidUriIsValid with data set #7" assertions="1" time="0.003354"/>
        <testcase name="testValidUriIsValid with data set #8" assertions="1" time="0.003248"/>
        <testcase name="testValidUriIsValid with data set #9" assertions="1" time="0.004249"/>
        <testcase name="testValidUriIsValid with data set #10" assertions="1" time="0.004506"/>
        <testcase name="testValidUriIsValid with data set #11" assertions="1" time="0.004368"/>
        <testcase name="testValidUriIsValid with data set #12" assertions="1" time="0.004206"/>
        <testcase name="testValidUriIsValid with data set #13" assertions="1" time="0.004348"/>
        <testcase name="testValidUriIsValid with data set #14" assertions="1" time="0.004162"/>
        <testcase name="testValidUriIsValid with data set #15" assertions="1" time="0.004124"/>
        <testcase name="testValidUriIsValid with data set #16" assertions="1" time="0.004001"/>
        <testcase name="testValidUriIsValid with data set #17" assertions="1" time="0.005126"/>
        <testcase name="testValidUriIsValid with data set #18" assertions="1" time="0.004915"/>
        <testcase name="testValidUriIsValid with data set #19" assertions="1" time="0.004786"/>
        <testcase name="testValidUriIsValid with data set #20" assertions="1" time="0.004816"/>
        <testcase name="testValidUriIsValid with data set #21" assertions="1" time="0.003783"/>
        <testcase name="testValidUriIsValid with data set #22" assertions="1" time="0.004247"/>
        <testcase name="testValidUriIsValid with data set #23" assertions="1" time="0.003691"/>
        <testcase name="testValidUriIsValid with data set #24" assertions="1" time="0.003542"/>
        <testcase name="testValidUriIsValid with data set #25" assertions="1" time="0.004491"/>
        <testcase name="testValidUriIsValid with data set #26" assertions="1" time="0.003394"/>
        <testcase name="testValidUriIsValid with data set #27" assertions="1" time="0.003815"/>
        <testcase name="testValidUriIsValid with data set #28" assertions="1" time="0.003783"/>
        <testcase name="testValidUriIsValid with data set #29" assertions="1" time="0.003769"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidRelativeUriIsValid" tests="5" assertions="5" failures="0" errors="0" time="0.017951">
        <testcase name="testValidRelativeUriIsValid with data set #0" assertions="1" time="0.003777"/>
        <testcase name="testValidRelativeUriIsValid with data set #1" assertions="1" time="0.003679"/>
        <testcase name="testValidRelativeUriIsValid with data set #2" assertions="1" time="0.003693"/>
        <testcase name="testValidRelativeUriIsValid with data set #3" assertions="1" time="0.003360"/>
        <testcase name="testValidRelativeUriIsValid with data set #4" assertions="1" time="0.003442"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidUriIsInvalid" tests="4" assertions="4" failures="0" errors="0" time="0.014626">
        <testcase name="testInvalidUriIsInvalid with data set #0" assertions="1" time="0.003308"/>
        <testcase name="testInvalidUriIsInvalid with data set #1" assertions="1" time="0.003179"/>
        <testcase name="testInvalidUriIsInvalid with data set #2" assertions="1" time="0.003200"/>
        <testcase name="testInvalidUriIsInvalid with data set #3" assertions="1" time="0.004939"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidRelativeUriIsInvalid" tests="6" assertions="6" failures="0" errors="0" time="0.020632">
        <testcase name="testInvalidRelativeUriIsInvalid with data set #0" assertions="1" time="0.003628"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #1" assertions="1" time="0.003202"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #2" assertions="1" time="0.003389"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #3" assertions="1" time="0.003501"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #4" assertions="1" time="0.003521"/>
        <testcase name="testInvalidRelativeUriIsInvalid with data set #5" assertions="1" time="0.003391"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeValid" tests="7" assertions="7" failures="0" errors="0" time="0.024376">
        <testcase name="testValidateSchemeValid with data set #0" assertions="1" time="0.003456"/>
        <testcase name="testValidateSchemeValid with data set #1" assertions="1" time="0.003406"/>
        <testcase name="testValidateSchemeValid with data set #2" assertions="1" time="0.003427"/>
        <testcase name="testValidateSchemeValid with data set #3" assertions="1" time="0.003555"/>
        <testcase name="testValidateSchemeValid with data set #4" assertions="1" time="0.003494"/>
        <testcase name="testValidateSchemeValid with data set #5" assertions="1" time="0.003480"/>
        <testcase name="testValidateSchemeValid with data set #6" assertions="1" time="0.003558"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateSchemeInvalid" tests="5" assertions="5" failures="0" errors="0" time="0.021557">
        <testcase name="testValidateSchemeInvalid with data set #0" assertions="1" time="0.005024"/>
        <testcase name="testValidateSchemeInvalid with data set #1" assertions="1" time="0.004232"/>
        <testcase name="testValidateSchemeInvalid with data set #2" assertions="1" time="0.003774"/>
        <testcase name="testValidateSchemeInvalid with data set #3" assertions="1" time="0.004021"/>
        <testcase name="testValidateSchemeInvalid with data set #4" assertions="1" time="0.004506"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostValid" tests="24" assertions="24" failures="0" errors="0" time="0.094479">
        <testcase name="testValidateHostValid with data set #0" assertions="1" time="0.003521"/>
        <testcase name="testValidateHostValid with data set #1" assertions="1" time="0.003654"/>
        <testcase name="testValidateHostValid with data set #2" assertions="1" time="0.003971"/>
        <testcase name="testValidateHostValid with data set #3" assertions="1" time="0.003815"/>
        <testcase name="testValidateHostValid with data set #4" assertions="1" time="0.004480"/>
        <testcase name="testValidateHostValid with data set #5" assertions="1" time="0.003855"/>
        <testcase name="testValidateHostValid with data set #6" assertions="1" time="0.004069"/>
        <testcase name="testValidateHostValid with data set #7" assertions="1" time="0.004455"/>
        <testcase name="testValidateHostValid with data set #8" assertions="1" time="0.004252"/>
        <testcase name="testValidateHostValid with data set #9" assertions="1" time="0.003912"/>
        <testcase name="testValidateHostValid with data set #10" assertions="1" time="0.004202"/>
        <testcase name="testValidateHostValid with data set #11" assertions="1" time="0.004400"/>
        <testcase name="testValidateHostValid with data set #12" assertions="1" time="0.004314"/>
        <testcase name="testValidateHostValid with data set #13" assertions="1" time="0.003755"/>
        <testcase name="testValidateHostValid with data set #14" assertions="1" time="0.003997"/>
        <testcase name="testValidateHostValid with data set #15" assertions="1" time="0.004052"/>
        <testcase name="testValidateHostValid with data set #16" assertions="1" time="0.003789"/>
        <testcase name="testValidateHostValid with data set #17" assertions="1" time="0.003771"/>
        <testcase name="testValidateHostValid with data set #18" assertions="1" time="0.003344"/>
        <testcase name="testValidateHostValid with data set #19" assertions="1" time="0.003764"/>
        <testcase name="testValidateHostValid with data set #20" assertions="1" time="0.003773"/>
        <testcase name="testValidateHostValid with data set #21" assertions="1" time="0.003788"/>
        <testcase name="testValidateHostValid with data set #22" assertions="1" time="0.003784"/>
        <testcase name="testValidateHostValid with data set #23" assertions="1" time="0.003762"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateHostInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.015059">
        <testcase name="testValidateHostInvalid with data set #0" assertions="1" time="0.005071"/>
        <testcase name="testValidateHostInvalid with data set #1" assertions="1" time="0.005204"/>
        <testcase name="testValidateHostInvalid with data set #2" assertions="1" time="0.004784"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.034342">
        <testcase name="testValidatePathValid with data set #0" assertions="1" time="0.003244"/>
        <testcase name="testValidatePathValid with data set #1" assertions="1" time="0.003077"/>
        <testcase name="testValidatePathValid with data set #2" assertions="1" time="0.003105"/>
        <testcase name="testValidatePathValid with data set #3" assertions="1" time="0.003027"/>
        <testcase name="testValidatePathValid with data set #4" assertions="1" time="0.003191"/>
        <testcase name="testValidatePathValid with data set #5" assertions="1" time="0.003363"/>
        <testcase name="testValidatePathValid with data set #6" assertions="1" time="0.003035"/>
        <testcase name="testValidatePathValid with data set #7" assertions="1" time="0.002893"/>
        <testcase name="testValidatePathValid with data set #8" assertions="1" time="0.003132"/>
        <testcase name="testValidatePathValid with data set #9" assertions="1" time="0.003161"/>
        <testcase name="testValidatePathValid with data set #10" assertions="1" time="0.003114"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009558">
        <testcase name="testValidatePathInvalid with data set #0" assertions="1" time="0.003100"/>
        <testcase name="testValidatePathInvalid with data set #1" assertions="1" time="0.003092"/>
        <testcase name="testValidatePathInvalid with data set #2" assertions="1" time="0.003366"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathValid" tests="11" assertions="11" failures="0" errors="0" time="0.041114">
        <testcase name="testEncodePathValid with data set #0" assertions="1" time="0.003705"/>
        <testcase name="testEncodePathValid with data set #1" assertions="1" time="0.003586"/>
        <testcase name="testEncodePathValid with data set #2" assertions="1" time="0.004025"/>
        <testcase name="testEncodePathValid with data set #3" assertions="1" time="0.003974"/>
        <testcase name="testEncodePathValid with data set #4" assertions="1" time="0.003728"/>
        <testcase name="testEncodePathValid with data set #5" assertions="1" time="0.003725"/>
        <testcase name="testEncodePathValid with data set #6" assertions="1" time="0.003778"/>
        <testcase name="testEncodePathValid with data set #7" assertions="1" time="0.003576"/>
        <testcase name="testEncodePathValid with data set #8" assertions="1" time="0.003819"/>
        <testcase name="testEncodePathValid with data set #9" assertions="1" time="0.003566"/>
        <testcase name="testEncodePathValid with data set #10" assertions="1" time="0.003632"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodePathInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010985">
        <testcase name="testEncodePathInvalid with data set #0" assertions="1" time="0.003674"/>
        <testcase name="testEncodePathInvalid with data set #1" assertions="1" time="0.003673"/>
        <testcase name="testEncodePathInvalid with data set #2" assertions="1" time="0.003638"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.016206">
        <testcase name="testValidQueryFragment with data set #0" assertions="1" time="0.003232"/>
        <testcase name="testValidQueryFragment with data set #1" assertions="1" time="0.003233"/>
        <testcase name="testValidQueryFragment with data set #2" assertions="1" time="0.003169"/>
        <testcase name="testValidQueryFragment with data set #3" assertions="1" time="0.003151"/>
        <testcase name="testValidQueryFragment with data set #4" assertions="1" time="0.003421"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.017857">
        <testcase name="testInvalidQueryFragment with data set #0" assertions="1" time="0.004246"/>
        <testcase name="testInvalidQueryFragment with data set #1" assertions="1" time="0.003388"/>
        <testcase name="testInvalidQueryFragment with data set #2" assertions="1" time="0.003507"/>
        <testcase name="testInvalidQueryFragment with data set #3" assertions="1" time="0.003409"/>
        <testcase name="testInvalidQueryFragment with data set #4" assertions="1" time="0.003307"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeInvalidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019534">
        <testcase name="testEncodeInvalidQueryFragment with data set #0" assertions="1" time="0.004078"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #1" assertions="1" time="0.003682"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #2" assertions="1" time="0.003951"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #3" assertions="1" time="0.004026"/>
        <testcase name="testEncodeInvalidQueryFragment with data set #4" assertions="1" time="0.003796"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeValidQueryFragment" tests="5" assertions="5" failures="0" errors="0" time="0.019509">
        <testcase name="testEncodeValidQueryFragment with data set #0" assertions="1" time="0.004114"/>
        <testcase name="testEncodeValidQueryFragment with data set #1" assertions="1" time="0.004220"/>
        <testcase name="testEncodeValidQueryFragment with data set #2" assertions="1" time="0.003641"/>
        <testcase name="testEncodeValidQueryFragment with data set #3" assertions="1" time="0.003733"/>
        <testcase name="testEncodeValidQueryFragment with data set #4" assertions="1" time="0.003801"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.026319">
        <testcase name="testValidateUserInfoValid with data set #0" assertions="1" time="0.003431"/>
        <testcase name="testValidateUserInfoValid with data set #1" assertions="1" time="0.003405"/>
        <testcase name="testValidateUserInfoValid with data set #2" assertions="1" time="0.003204"/>
        <testcase name="testValidateUserInfoValid with data set #3" assertions="1" time="0.003201"/>
        <testcase name="testValidateUserInfoValid with data set #4" assertions="1" time="0.003326"/>
        <testcase name="testValidateUserInfoValid with data set #5" assertions="1" time="0.003217"/>
        <testcase name="testValidateUserInfoValid with data set #6" assertions="1" time="0.003172"/>
        <testcase name="testValidateUserInfoValid with data set #7" assertions="1" time="0.003363"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidateUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.009503">
        <testcase name="testValidateUserInfoInvalid with data set #0" assertions="1" time="0.003181"/>
        <testcase name="testValidateUserInfoInvalid with data set #1" assertions="1" time="0.003128"/>
        <testcase name="testValidateUserInfoInvalid with data set #2" assertions="1" time="0.003194"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoValid" tests="8" assertions="8" failures="0" errors="0" time="0.029999">
        <testcase name="testEncodeUserInfoValid with data set #0" assertions="1" time="0.003766"/>
        <testcase name="testEncodeUserInfoValid with data set #1" assertions="1" time="0.003697"/>
        <testcase name="testEncodeUserInfoValid with data set #2" assertions="1" time="0.003774"/>
        <testcase name="testEncodeUserInfoValid with data set #3" assertions="1" time="0.003839"/>
        <testcase name="testEncodeUserInfoValid with data set #4" assertions="1" time="0.003607"/>
        <testcase name="testEncodeUserInfoValid with data set #5" assertions="1" time="0.003641"/>
        <testcase name="testEncodeUserInfoValid with data set #6" assertions="1" time="0.003689"/>
        <testcase name="testEncodeUserInfoValid with data set #7" assertions="1" time="0.003987"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testEncodeUserInfoInvalid" tests="3" assertions="3" failures="0" errors="0" time="0.010886">
        <testcase name="testEncodeUserInfoInvalid with data set #0" assertions="1" time="0.003627"/>
        <testcase name="testEncodeUserInfoInvalid with data set #1" assertions="1" time="0.003627"/>
        <testcase name="testEncodeUserInfoInvalid with data set #2" assertions="1" time="0.003632"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortValid" tests="5" assertions="5" failures="0" errors="0" time="0.016646">
        <testcase name="testValidatePortValid with data set #0" assertions="1" time="0.003061"/>
        <testcase name="testValidatePortValid with data set #1" assertions="1" time="0.003348"/>
        <testcase name="testValidatePortValid with data set #2" assertions="1" time="0.003499"/>
        <testcase name="testValidatePortValid with data set #3" assertions="1" time="0.003415"/>
        <testcase name="testValidatePortValid with data set #4" assertions="1" time="0.003323"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testValidatePortInvalid" tests="8" assertions="8" failures="0" errors="0" time="0.024572">
        <testcase name="testValidatePortInvalid with data set #0" assertions="1" time="0.002861"/>
        <testcase name="testValidatePortInvalid with data set #1" assertions="1" time="0.003106"/>
        <testcase name="testValidatePortInvalid with data set #2" assertions="1" time="0.003114"/>
        <testcase name="testValidatePortInvalid with data set #3" assertions="1" time="0.003116"/>
        <testcase name="testValidatePortInvalid with data set #4" assertions="1" time="0.003091"/>
        <testcase name="testValidatePortInvalid with data set #5" assertions="1" time="0.003095"/>
        <testcase name="testValidatePortInvalid with data set #6" assertions="1" time="0.003060"/>
        <testcase name="testValidatePortInvalid with data set #7" assertions="1" time="0.003129"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRelativeUriResolvingRfcSamples" tests="39" assertions="39" failures="0" errors="0" time="0.252217">
        <testcase name="testRelativeUriResolvingRfcSamples with data set #0" assertions="1" time="0.003936"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #1" assertions="1" time="0.006098"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #2" assertions="1" time="0.005910"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #3" assertions="1" time="0.006181"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #4" assertions="1" time="0.006171"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #5" assertions="1" time="0.005909"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #6" assertions="1" time="0.006501"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #7" assertions="1" time="0.006939"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #8" assertions="1" time="0.006589"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #9" assertions="1" time="0.006270"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #10" assertions="1" time="0.006277"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #11" assertions="1" time="0.006347"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #12" assertions="1" time="0.005959"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #13" assertions="1" time="0.006650"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #14" assertions="1" time="0.006323"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #15" assertions="1" time="0.006146"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #16" assertions="1" time="0.006065"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #17" assertions="1" time="0.006369"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #18" assertions="1" time="0.006266"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #19" assertions="1" time="0.006676"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #20" assertions="1" time="0.007025"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #21" assertions="1" time="0.006713"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #22" assertions="1" time="0.006432"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #23" assertions="1" time="0.007385"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #24" assertions="1" time="0.007273"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #25" assertions="1" time="0.007055"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #26" assertions="1" time="0.006855"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #27" assertions="1" time="0.006548"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #28" assertions="1" time="0.007007"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #29" assertions="1" time="0.007717"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #30" assertions="1" time="0.006616"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #31" assertions="1" time="0.007848"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #32" assertions="1" time="0.006441"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #33" assertions="1" time="0.006337"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #34" assertions="1" time="0.006514"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #35" assertions="1" time="0.006705"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #36" assertions="1" time="0.006734"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #37" assertions="1" time="0.006927"/>
        <testcase name="testRelativeUriResolvingRfcSamples with data set #38" assertions="1" time="0.004503"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testRemovePathDotSegments" tests="2" assertions="2" failures="0" errors="0" time="0.008459">
        <testcase name="testRemovePathDotSegments with data set #0" assertions="1" time="0.004281"/>
        <testcase name="testRemovePathDotSegments with data set #1" assertions="1" time="0.004178"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testNormalizeUrl" tests="19" assertions="19" failures="0" errors="0" time="0.092449">
        <testcase name="testNormalizeUrl with data set #0" assertions="1" time="0.005582"/>
        <testcase name="testNormalizeUrl with data set #1" assertions="1" time="0.005585"/>
        <testcase name="testNormalizeUrl with data set #2" assertions="1" time="0.005788"/>
        <testcase name="testNormalizeUrl with data set #3" assertions="1" time="0.005863"/>
        <testcase name="testNormalizeUrl with data set #4" assertions="1" time="0.004934"/>
        <testcase name="testNormalizeUrl with data set #5" assertions="1" time="0.004653"/>
        <testcase name="testNormalizeUrl with data set #6" assertions="1" time="0.005194"/>
        <testcase name="testNormalizeUrl with data set #7" assertions="1" time="0.004273"/>
        <testcase name="testNormalizeUrl with data set #8" assertions="1" time="0.004359"/>
        <testcase name="testNormalizeUrl with data set #9" assertions="1" time="0.004379"/>
        <testcase name="testNormalizeUrl with data set #10" assertions="1" time="0.004292"/>
        <testcase name="testNormalizeUrl with data set #11" assertions="1" time="0.004306"/>
        <testcase name="testNormalizeUrl with data set #12" assertions="1" time="0.004407"/>
        <testcase name="testNormalizeUrl with data set #13" assertions="1" time="0.004581"/>
        <testcase name="testNormalizeUrl with data set #14" assertions="1" time="0.004504"/>
        <testcase name="testNormalizeUrl with data set #15" assertions="1" time="0.004433"/>
        <testcase name="testNormalizeUrl with data set #16" assertions="1" time="0.004278"/>
        <testcase name="testNormalizeUrl with data set #17" assertions="1" time="0.005344"/>
        <testcase name="testNormalizeUrl with data set #18" assertions="1" time="0.005694"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMergeToNewUri" tests="39" assertions="39" failures="0" errors="0" time="0.255884">
        <testcase name="testMergeToNewUri with data set #0" assertions="1" time="0.004208"/>
        <testcase name="testMergeToNewUri with data set #1" assertions="1" time="0.006409"/>
        <testcase name="testMergeToNewUri with data set #2" assertions="1" time="0.006398"/>
        <testcase name="testMergeToNewUri with data set #3" assertions="1" time="0.006520"/>
        <testcase name="testMergeToNewUri with data set #4" assertions="1" time="0.006427"/>
        <testcase name="testMergeToNewUri with data set #5" assertions="1" time="0.006147"/>
        <testcase name="testMergeToNewUri with data set #6" assertions="1" time="0.006521"/>
        <testcase name="testMergeToNewUri with data set #7" assertions="1" time="0.006362"/>
        <testcase name="testMergeToNewUri with data set #8" assertions="1" time="0.006795"/>
        <testcase name="testMergeToNewUri with data set #9" assertions="1" time="0.006643"/>
        <testcase name="testMergeToNewUri with data set #10" assertions="1" time="0.006634"/>
        <testcase name="testMergeToNewUri with data set #11" assertions="1" time="0.006767"/>
        <testcase name="testMergeToNewUri with data set #12" assertions="1" time="0.006470"/>
        <testcase name="testMergeToNewUri with data set #13" assertions="1" time="0.006725"/>
        <testcase name="testMergeToNewUri with data set #14" assertions="1" time="0.006671"/>
        <testcase name="testMergeToNewUri with data set #15" assertions="1" time="0.006493"/>
        <testcase name="testMergeToNewUri with data set #16" assertions="1" time="0.006726"/>
        <testcase name="testMergeToNewUri with data set #17" assertions="1" time="0.006437"/>
        <testcase name="testMergeToNewUri with data set #18" assertions="1" time="0.006316"/>
        <testcase name="testMergeToNewUri with data set #19" assertions="1" time="0.007642"/>
        <testcase name="testMergeToNewUri with data set #20" assertions="1" time="0.006887"/>
        <testcase name="testMergeToNewUri with data set #21" assertions="1" time="0.006439"/>
        <testcase name="testMergeToNewUri with data set #22" assertions="1" time="0.006736"/>
        <testcase name="testMergeToNewUri with data set #23" assertions="1" time="0.007093"/>
        <testcase name="testMergeToNewUri with data set #24" assertions="1" time="0.007135"/>
        <testcase name="testMergeToNewUri with data set #25" assertions="1" time="0.007146"/>
        <testcase name="testMergeToNewUri with data set #26" assertions="1" time="0.007069"/>
        <testcase name="testMergeToNewUri with data set #27" assertions="1" time="0.006657"/>
        <testcase name="testMergeToNewUri with data set #28" assertions="1" time="0.007054"/>
        <testcase name="testMergeToNewUri with data set #29" assertions="1" time="0.007004"/>
        <testcase name="testMergeToNewUri with data set #30" assertions="1" time="0.006478"/>
        <testcase name="testMergeToNewUri with data set #31" assertions="1" time="0.007037"/>
        <testcase name="testMergeToNewUri with data set #32" assertions="1" time="0.006756"/>
        <testcase name="testMergeToNewUri with data set #33" assertions="1" time="0.006651"/>
        <testcase name="testMergeToNewUri with data set #34" assertions="1" time="0.006415"/>
        <testcase name="testMergeToNewUri with data set #35" assertions="1" time="0.006396"/>
        <testcase name="testMergeToNewUri with data set #36" assertions="1" time="0.006364"/>
        <testcase name="testMergeToNewUri with data set #37" assertions="1" time="0.006515"/>
        <testcase name="testMergeToNewUri with data set #38" assertions="1" time="0.004741"/>
      </testsuite>
      <testcase name="testMergeTwoObjectsNotModifying" class="Eloquent\Schemer\Uri\UriTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Uri/UriTest.php" line="707" assertions="4" time="0.008468"/>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testMakeRelative" tests="6" assertions="6" failures="0" errors="0" time="0.044023">
        <testcase name="testMakeRelative with data set #0" assertions="1" time="0.007925"/>
        <testcase name="testMakeRelative with data set #1" assertions="1" time="0.007832"/>
        <testcase name="testMakeRelative with data set #2" assertions="1" time="0.007490"/>
        <testcase name="testMakeRelative with data set #3" assertions="1" time="0.007215"/>
        <testcase name="testMakeRelative with data set #4" assertions="1" time="0.006732"/>
        <testcase name="testMakeRelative with data set #5" assertions="1" time="0.006829"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorCopyExistingObject" tests="30" assertions="30" failures="0" errors="0" time="0.337972">
        <testcase name="testConstructorCopyExistingObject with data set #0" assertions="1" time="0.010918"/>
        <testcase name="testConstructorCopyExistingObject with data set #1" assertions="1" time="0.011634"/>
        <testcase name="testConstructorCopyExistingObject with data set #2" assertions="1" time="0.012081"/>
        <testcase name="testConstructorCopyExistingObject with data set #3" assertions="1" time="0.009966"/>
        <testcase name="testConstructorCopyExistingObject with data set #4" assertions="1" time="0.010394"/>
        <testcase name="testConstructorCopyExistingObject with data set #5" assertions="1" time="0.011393"/>
        <testcase name="testConstructorCopyExistingObject with data set #6" assertions="1" time="0.011176"/>
        <testcase name="testConstructorCopyExistingObject with data set #7" assertions="1" time="0.010438"/>
        <testcase name="testConstructorCopyExistingObject with data set #8" assertions="1" time="0.010206"/>
        <testcase name="testConstructorCopyExistingObject with data set #9" assertions="1" time="0.012412"/>
        <testcase name="testConstructorCopyExistingObject with data set #10" assertions="1" time="0.012090"/>
        <testcase name="testConstructorCopyExistingObject with data set #11" assertions="1" time="0.012192"/>
        <testcase name="testConstructorCopyExistingObject with data set #12" assertions="1" time="0.012038"/>
        <testcase name="testConstructorCopyExistingObject with data set #13" assertions="1" time="0.012889"/>
        <testcase name="testConstructorCopyExistingObject with data set #14" assertions="1" time="0.012997"/>
        <testcase name="testConstructorCopyExistingObject with data set #15" assertions="1" time="0.012959"/>
        <testcase name="testConstructorCopyExistingObject with data set #16" assertions="1" time="0.010169"/>
        <testcase name="testConstructorCopyExistingObject with data set #17" assertions="1" time="0.010243"/>
        <testcase name="testConstructorCopyExistingObject with data set #18" assertions="1" time="0.010097"/>
        <testcase name="testConstructorCopyExistingObject with data set #19" assertions="1" time="0.011819"/>
        <testcase name="testConstructorCopyExistingObject with data set #20" assertions="1" time="0.012066"/>
        <testcase name="testConstructorCopyExistingObject with data set #21" assertions="1" time="0.010561"/>
        <testcase name="testConstructorCopyExistingObject with data set #22" assertions="1" time="0.011196"/>
        <testcase name="testConstructorCopyExistingObject with data set #23" assertions="1" time="0.010227"/>
        <testcase name="testConstructorCopyExistingObject with data set #24" assertions="1" time="0.010199"/>
        <testcase name="testConstructorCopyExistingObject with data set #25" assertions="1" time="0.013346"/>
        <testcase name="testConstructorCopyExistingObject with data set #26" assertions="1" time="0.010463"/>
        <testcase name="testConstructorCopyExistingObject with data set #27" assertions="1" time="0.010758"/>
        <testcase name="testConstructorCopyExistingObject with data set #28" assertions="1" time="0.010265"/>
        <testcase name="testConstructorCopyExistingObject with data set #29" assertions="1" time="0.010779"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testConstructorInvalidInput" tests="5" assertions="5" failures="0" errors="0" time="0.018376">
        <testcase name="testConstructorInvalidInput with data set #0" assertions="1" time="0.003982"/>
        <testcase name="testConstructorInvalidInput with data set #1" assertions="1" time="0.003466"/>
        <testcase name="testConstructorInvalidInput with data set #2" assertions="1" time="0.003790"/>
        <testcase name="testConstructorInvalidInput with data set #3" assertions="1" time="0.003451"/>
        <testcase name="testConstructorInvalidInput with data set #4" assertions="1" time="0.003687"/>
      </testsuite>
      <testsuite name="Eloquent\Schemer\Uri\UriTest::testFluentInterface" tests="10" assertions="10" failures="0" errors="0" time="0.040675">
        <testcase name="testFluentInterface with data set #0" assertions="1" time="0.003274"/>
        <testcase name="testFluentInterface with data set #1" assertions="1" time="0.003392"/>
        <testcase name="testFluentInterface with data set #2" assertions="1" time="0.004199"/>
        <testcase name="testFluentInterface with data set #3" assertions="1" time="0.003262"/>
        <testcase name="testFluentInterface with data set #4" assertions="1" time="0.003449"/>
        <testcase name="testFluentInterface with data set #5" assertions="1" time="0.003406"/>
        <testcase name="testFluentInterface with data set #6" assertions="1" time="0.003718"/>
        <testcase name="testFluentInterface with data set #7" assertions="1" time="0.006532"/>
        <testcase name="testFluentInterface with data set #8" assertions="1" time="0.006033"/>
        <testcase name="testFluentInterface with data set #9" assertions="1" time="0.003410"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/ConstraintValidatorTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="166" assertions="166" failures="0" errors="0" time="62.312306">
      <testsuite name="Eloquent\Schemer\Validation\ConstraintValidatorTest::testValidateSchema" tests="166" assertions="166" failures="0" errors="0" time="62.312306">
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid array&quot;" assertions="1" time="0.077887"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / valid non-array&quot;" assertions="1" time="0.062860"/>
        <testcase name="testValidateSchema with data set &quot;minItems / minItems.json / invalid&quot;" assertions="1" time="0.061807"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / valid&quot;" assertions="1" time="0.075774"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / single-schema.json / invalid&quot;" assertions="1" time="0.072445"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.139803"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - none matching&quot;" assertions="1" time="0.144428"/>
        <testcase name="testValidateSchema with data set &quot;oneOf / multiple-schemas.json / invalid - more than one matching&quot;" assertions="1" time="0.153432"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-true.json / valid&quot;" assertions="1" time="0.090531"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid object&quot;" assertions="1" time="0.259962"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / valid non-object&quot;" assertions="1" time="0.223851"/>
        <testcase name="testValidateSchema with data set &quot;properties / property-schema-cascade.json / invalid&quot;" assertions="1" time="0.247584"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / valid&quot;" assertions="1" time="0.100788"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-false.json / invalid&quot;" assertions="1" time="0.097244"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / valid&quot;" assertions="1" time="0.132368"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-patternProperties.json / invalid&quot;" assertions="1" time="0.134301"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / valid&quot;" assertions="1" time="0.116548"/>
        <testcase name="testValidateSchema with data set &quot;properties / additionalProperties-schema.json / invalid&quot;" assertions="1" time="0.117850"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / valid&quot;" assertions="1" time="0.144960"/>
        <testcase name="testValidateSchema with data set &quot;properties / multiple-properties.json / invalid&quot;" assertions="1" time="0.137755"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.097258"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.097450"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.089527"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-floating-point-value.json / invalid&quot;" assertions="1" time="0.095176"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid integers&quot;" assertions="1" time="0.103108"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid floating-point values&quot;" assertions="1" time="0.106509"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / valid non-number&quot;" assertions="1" time="0.117197"/>
        <testcase name="testValidateSchema with data set &quot;minimum / minimum-integer.json / invalid&quot;" assertions="1" time="0.138206"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid integers&quot;" assertions="1" time="0.130714"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid floating point values&quot;" assertions="1" time="0.104886"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / valid non-number&quot;" assertions="1" time="0.107945"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-integer.json / invalid&quot;" assertions="1" time="0.103306"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid floating point values&quot;" assertions="1" time="0.102068"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid integers&quot;" assertions="1" time="0.102651"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.099176"/>
        <testcase name="testValidateSchema with data set &quot;multipleOf / multipleOf-floating-point-value.json / invalid&quot;" assertions="1" time="0.103307"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - dependant&quot;" assertions="1" time="0.117673"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid - not dependant&quot;" assertions="1" time="0.112826"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / valid non-object&quot;" assertions="1" time="0.112009"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / schema-dependency.json / invalid&quot;" assertions="1" time="0.119538"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - dependant&quot;" assertions="1" time="0.091385"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid - not dependant&quot;" assertions="1" time="0.088655"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / valid non-object&quot;" assertions="1" time="0.088594"/>
        <testcase name="testValidateSchema with data set &quot;dependencies / property-dependency.json / invalid&quot;" assertions="1" time="0.090751"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid string&quot;" assertions="1" time="0.059820"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / valid non-string&quot;" assertions="1" time="0.060283"/>
        <testcase name="testValidateSchema with data set &quot;minLength / minLength.json / invalid&quot;" assertions="1" time="0.060463"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / valid&quot;" assertions="1" time="0.082885"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / single-schema.json / invalid&quot;" assertions="1" time="0.080210"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid string&quot;" assertions="1" time="0.113881"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / valid object&quot;" assertions="1" time="0.115142"/>
        <testcase name="testValidateSchema with data set &quot;anyOf / multiple-schemas.json / invalid&quot;" assertions="1" time="0.108678"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / valid&quot;" assertions="1" time="0.059887"/>
        <testcase name="testValidateSchema with data set &quot;enum / single-value.json / invalid&quot;" assertions="1" time="0.059776"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - first element&quot;" assertions="1" time="0.084500"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / valid - middle element&quot;" assertions="1" time="0.066022"/>
        <testcase name="testValidateSchema with data set &quot;enum / multiple-values.json / invalid&quot;" assertions="1" time="0.066057"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid date/time&quot;" assertions="1" time="0.095656"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.093477"/>
        <testcase name="testValidateSchema with data set &quot;minDateTime / minDateTime.toml / invalid&quot;" assertions="1" time="0.095901"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid integers&quot;" assertions="1" time="0.101352"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid floating-point values&quot;" assertions="1" time="0.101402"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / valid non-number&quot;" assertions="1" time="0.095915"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-integer.json / invalid&quot;" assertions="1" time="0.109985"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid floating-point values&quot;" assertions="1" time="0.100451"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid integers&quot;" assertions="1" time="0.102766"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / valid non-number&quot;" assertions="1" time="0.095720"/>
        <testcase name="testValidateSchema with data set &quot;maximum / maximum-floating-point-value.json / invalid&quot;" assertions="1" time="0.104994"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.188942"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.158270"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - Schemer meta schema&quot;" assertions="1" time="5.516413"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - not object&quot;" assertions="1" time="4.356898"/>
        <testcase name="testValidateSchema with data set &quot;schema / json-schema-meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.152003"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - empty schema&quot;" assertions="1" time="4.204753"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - Schemer meta schema&quot;" assertions="1" time="5.650344"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / valid - JSON schema meta schema&quot;" assertions="1" time="5.595212"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - not object&quot;" assertions="1" time="4.585368"/>
        <testcase name="testValidateSchema with data set &quot;schema / meta-schema.json / invalid - unknown type&quot;" assertions="1" time="4.654291"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid email&quot;" assertions="1" time="0.064015"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / valid non-string&quot;" assertions="1" time="0.063253"/>
        <testcase name="testValidateSchema with data set &quot;format / email.json / invalid&quot;" assertions="1" time="0.062281"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid hostname&quot;" assertions="1" time="0.067616"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / valid non-string&quot;" assertions="1" time="0.066367"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid string&quot;" assertions="1" time="0.066774"/>
        <testcase name="testValidateSchema with data set &quot;format / hostname.json / invalid IP address&quot;" assertions="1" time="0.064794"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid IP address&quot;" assertions="1" time="0.067656"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / valid non-string&quot;" assertions="1" time="0.070241"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid string&quot;" assertions="1" time="0.069381"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv4.json / invalid IPv6 address&quot;" assertions="1" time="0.069458"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (zulu)&quot;" assertions="1" time="0.070139"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset with colon)&quot;" assertions="1" time="0.068269"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid date/time (offset without colon)&quot;" assertions="1" time="0.070968"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / valid non-string&quot;" assertions="1" time="0.068913"/>
        <testcase name="testValidateSchema with data set &quot;format / date-time.json / invalid&quot;" assertions="1" time="0.069004"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid URI&quot;" assertions="1" time="0.061905"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / valid non-string&quot;" assertions="1" time="0.060135"/>
        <testcase name="testValidateSchema with data set &quot;format / uri.json / invalid&quot;" assertions="1" time="0.062730"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid IP address&quot;" assertions="1" time="0.071280"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / valid non-string&quot;" assertions="1" time="0.077766"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid string&quot;" assertions="1" time="0.075664"/>
        <testcase name="testValidateSchema with data set &quot;format / ipv6.json / invalid IPv4 address&quot;" assertions="1" time="0.069801"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid string&quot;" assertions="1" time="0.062524"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / valid non-string&quot;" assertions="1" time="0.067706"/>
        <testcase name="testValidateSchema with data set &quot;maxLength / maxLength.json / invalid&quot;" assertions="1" time="0.061483"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid array&quot;" assertions="1" time="0.069715"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / valid non-array&quot;" assertions="1" time="0.069903"/>
        <testcase name="testValidateSchema with data set &quot;maxItems / maxItems.json / invalid&quot;" assertions="1" time="0.069853"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid object&quot;" assertions="1" time="0.074624"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / valid non-object&quot;" assertions="1" time="0.073292"/>
        <testcase name="testValidateSchema with data set &quot;minProperties / minProperties.json / invalid&quot;" assertions="1" time="0.077942"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid string&quot;" assertions="1" time="0.085563"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / valid object&quot;" assertions="1" time="0.080925"/>
        <testcase name="testValidateSchema with data set &quot;type / multiple-types.json / invalid&quot;" assertions="1" time="0.119334"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / valid&quot;" assertions="1" time="0.059368"/>
        <testcase name="testValidateSchema with data set &quot;type / object-type.json / invalid&quot;" assertions="1" time="0.062616"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / valid&quot;" assertions="1" time="0.055306"/>
        <testcase name="testValidateSchema with data set &quot;type / boolean-type.json / invalid&quot;" assertions="1" time="0.055796"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / valid&quot;" assertions="1" time="0.059560"/>
        <testcase name="testValidateSchema with data set &quot;type / null-type.json / invalid&quot;" assertions="1" time="0.059055"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / valid&quot;" assertions="1" time="0.058387"/>
        <testcase name="testValidateSchema with data set &quot;type / array-type.json / invalid&quot;" assertions="1" time="0.061479"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid floating point value&quot;" assertions="1" time="0.065770"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / valid integer&quot;" assertions="1" time="0.069388"/>
        <testcase name="testValidateSchema with data set &quot;type / number-type.json / invalid&quot;" assertions="1" time="0.068428"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / valid&quot;" assertions="1" time="0.060497"/>
        <testcase name="testValidateSchema with data set &quot;type / integer-type.json / invalid&quot;" assertions="1" time="0.062874"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / valid&quot;" assertions="1" time="0.060528"/>
        <testcase name="testValidateSchema with data set &quot;type / string-type.json / invalid&quot;" assertions="1" time="0.060715"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / valid&quot;" assertions="1" time="0.061356"/>
        <testcase name="testValidateSchema with data set &quot;type / datetime-type.toml / invalid&quot;" assertions="1" time="0.062185"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid array&quot;" assertions="1" time="0.073503"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / valid non-array&quot;" assertions="1" time="0.075640"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-true.json / invalid&quot;" assertions="1" time="0.072326"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid unique&quot;" assertions="1" time="0.064486"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-unique&quot;" assertions="1" time="0.066640"/>
        <testcase name="testValidateSchema with data set &quot;uniqueItems / uniqueItems-false.json / valid non-array&quot;" assertions="1" time="0.073197"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / valid&quot;" assertions="1" time="0.081923"/>
        <testcase name="testValidateSchema with data set &quot;allOf / single-schema.json / invalid&quot;" assertions="1" time="0.080972"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / valid&quot;" assertions="1" time="0.163348"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / one invalid&quot;" assertions="1" time="0.163955"/>
        <testcase name="testValidateSchema with data set &quot;allOf / multiple-schemas.json / all invalid&quot;" assertions="1" time="0.160097"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / valid&quot;" assertions="1" time="0.089399"/>
        <testcase name="testValidateSchema with data set &quot;items / single-schema.json / invalid&quot;" assertions="1" time="0.093452"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / valid&quot;" assertions="1" time="0.125167"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-false.json / invalid&quot;" assertions="1" time="0.124972"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / valid&quot;" assertions="1" time="0.142437"/>
        <testcase name="testValidateSchema with data set &quot;items / multiple-schemas.json / invalid&quot;" assertions="1" time="0.145512"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid array&quot;" assertions="1" time="0.126337"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / valid non-array&quot;" assertions="1" time="0.168391"/>
        <testcase name="testValidateSchema with data set &quot;items / additionalItems-schema.json / invalid&quot;" assertions="1" time="0.133219"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid integer&quot;" assertions="1" time="0.081197"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / valid floating point value&quot;" assertions="1" time="0.083293"/>
        <testcase name="testValidateSchema with data set &quot;not / not.json / invalid&quot;" assertions="1" time="0.081946"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string a&quot;" assertions="1" time="0.070897"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid string b&quot;" assertions="1" time="0.070809"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / valid non-string&quot;" assertions="1" time="0.069221"/>
        <testcase name="testValidateSchema with data set &quot;pattern / pattern.json / invalid&quot;" assertions="1" time="0.069352"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid object&quot;" assertions="1" time="0.087140"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / valid non-object&quot;" assertions="1" time="0.084371"/>
        <testcase name="testValidateSchema with data set &quot;required / required.json / invalid&quot;" assertions="1" time="0.094509"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid object&quot;" assertions="1" time="0.068030"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / valid non-object&quot;" assertions="1" time="0.069101"/>
        <testcase name="testValidateSchema with data set &quot;maxProperties / maxProperties.json / invalid&quot;" assertions="1" time="0.067220"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid date/time&quot;" assertions="1" time="0.096710"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / valid non-date/time&quot;" assertions="1" time="0.091243"/>
        <testcase name="testValidateSchema with data set &quot;maxDateTime / maxDateTime.toml / invalid&quot;" assertions="1" time="0.097903"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Validation/DefaultValueTransformTest.php" namespace="Eloquent\Schemer\Validation" fullPackage="Eloquent.Schemer.Validation" tests="6" assertions="12" failures="0" errors="0" time="0.153606">
      <testsuite name="Eloquent\Schemer\Validation\DefaultValueTransformTest::testTransform" tests="6" assertions="12" failures="0" errors="0" time="0.153606">
        <testcase name="testTransform with data set &quot;object-properties.json / object missing defaults&quot;" assertions="2" time="0.029427"/>
        <testcase name="testTransform with data set &quot;object-properties.json / object not missing defaults&quot;" assertions="2" time="0.028221"/>
        <testcase name="testTransform with data set &quot;object-properties.json / array unchanged&quot;" assertions="2" time="0.020198"/>
        <testcase name="testTransform with data set &quot;array-items.json / array missing defaults&quot;" assertions="2" time="0.026206"/>
        <testcase name="testTransform with data set &quot;array-items.json / array not missing defaults&quot;" assertions="2" time="0.028258"/>
        <testcase name="testTransform with data set &quot;array-items.json / object unchanged&quot;" assertions="2" time="0.021296"/>
      </testsuite>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004514">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ArrayValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ArrayValueTest.php" line="25" assertions="1" time="0.004514"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" namespace="Eloquent\Schemer\Value\Factory" fullPackage="Eloquent.Schemer.Value.Factory" tests="5" assertions="6" failures="0" errors="0" time="0.025273">
      <testcase name="testCreateRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="26" assertions="1" time="0.004579"/>
      <testcase name="testCreateSimilarNonRecursiveArray" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="35" assertions="1" time="0.005698"/>
      <testcase name="testCreateRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="46" assertions="1" time="0.004442"/>
      <testcase name="testCreateSimilarNonRecursiveObject" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="56" assertions="1" time="0.005043"/>
      <testcase name="testCreateNestedRecursiveValue" class="Eloquent\Schemer\Value\Factory\ValueFactoryTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/Factory/ValueFactoryTest.php" line="68" assertions="2" time="0.005511"/>
    </testsuite>
    <testsuite name="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" namespace="Eloquent\Schemer\Value" fullPackage="Eloquent.Schemer.Value" tests="1" assertions="1" failures="0" errors="0" time="0.004661">
      <testcase name="testValueRecursive" class="Eloquent\Schemer\Value\ObjectValueTest" file="/home/travis/build/eloquent/schemer/test/suite/Eloquent/Schemer/Value/ObjectValueTest.php" line="26" assertions="1" time="0.004661"/>
    </testsuite>
  </testsuite>
</testsuites>

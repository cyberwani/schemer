{"service_name":"travis-ci","service_job_id":"9673921","git":{"branch":"(detached from 05f8a13)","head":{"id":"05f8a135e392d5992fdf5a209aef15c0bd3f11a4","author_name":"Erin Millard","author_email":"ezzatron@gmail.com","committer_name":"Erin Millard","committer_email":"ezzatron@gmail.com","message":"Bound constraint validator can not be optional."},"remotes":[{"name":"origin","url":"git:\/\/github.com\/eloquent\/schemer.git"}]},"run_at":"2013-07-31 00:53:18 +0000","source_files":[{"name":"Eloquent\/Schemer\/Constraint\/ArrayValue\/AdditionalItemConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\ArrayValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass AdditionalItemConstraint implements ConstraintInterface\n{\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitAdditionalItemConstraint($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/ArrayValue\/ItemsConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\ArrayValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\SchemaInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass ItemsConstraint implements ConstraintInterface\n{\n    \/**\n     * @param array<integer,SchemaInterface> $schemas\n     * @param SchemaInterface                $additionalSchema\n     *\/\n    public function __construct(\n        array $schemas,\n        SchemaInterface $additionalSchema\n    ) {\n        $this->schemas = $schemas;\n        $this->additionalSchema = $additionalSchema;\n    }\n\n    \/**\n     * @return array<integer,SchemaInterface>\n     *\/\n    public function schemas()\n    {\n        return $this->schemas;\n    }\n\n    \/**\n     * @return SchemaInterface\n     *\/\n    public function additionalSchema()\n    {\n        return $this->additionalSchema;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitItemsConstraint($this);\n    }\n\n    private $schemas;\n    private $additionalSchema;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/ArrayValue\/MaximumItemsConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\ArrayValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass MaximumItemsConstraint implements ConstraintInterface\n{\n    \/**\n     * @param integer $maximum\n     *\/\n    public function __construct($maximum)\n    {\n        $this->maximum = $maximum;\n    }\n\n    \/**\n     * @return integer\n     *\/\n    public function maximum()\n    {\n        return $this->maximum;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitMaximumItemsConstraint($this);\n    }\n\n    private $maximum;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/ArrayValue\/MinimumItemsConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\ArrayValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass MinimumItemsConstraint implements ConstraintInterface\n{\n    \/**\n     * @param integer $minimum\n     *\/\n    public function __construct($minimum)\n    {\n        $this->minimum = $minimum;\n    }\n\n    \/**\n     * @return integer\n     *\/\n    public function minimum()\n    {\n        return $this->minimum;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitMinimumItemsConstraint($this);\n    }\n\n    private $minimum;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/ArrayValue\/UniqueItemsConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\ArrayValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass UniqueItemsConstraint implements ConstraintInterface\n{\n    \/**\n     * @param boolean $value\n     *\/\n    public function __construct($value)\n    {\n        $this->value = $value;\n    }\n\n    \/**\n     * @return boolean\n     *\/\n    public function value()\n    {\n        return $this->value;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitUniqueItemsConstraint($this);\n    }\n\n    private $value;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/ConstraintInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint;\n\ninterface ConstraintInterface\n{\n    \/**\n     * @param Visitor\\ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(Visitor\\ConstraintVisitorInterface $visitor);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/DateTimeValue\/MaximumDateTimeConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\DateTimeValue;\n\nuse DateTime;\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass MaximumDateTimeConstraint implements ConstraintInterface\n{\n    \/**\n     * @param DateTime $maximum\n     *\/\n    public function __construct(DateTime $maximum)\n    {\n        $this->maximum = $maximum;\n    }\n\n    \/**\n     * @return DateTime\n     *\/\n    public function maximum()\n    {\n        return $this->maximum;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitMaximumDateTimeConstraint($this);\n    }\n\n    private $maximum;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/DateTimeValue\/MinimumDateTimeConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\DateTimeValue;\n\nuse DateTime;\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass MinimumDateTimeConstraint implements ConstraintInterface\n{\n    \/**\n     * @param DateTime $minimum\n     *\/\n    public function __construct(DateTime $minimum)\n    {\n        $this->minimum = $minimum;\n    }\n\n    \/**\n     * @return DateTime\n     *\/\n    public function minimum()\n    {\n        return $this->minimum;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitMinimumDateTimeConstraint($this);\n    }\n\n    private $minimum;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Factory\/Exception\/InvalidSchemaException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Factory\\Exception;\n\nuse Eloquent\\Schemer\\Validation\\Result\\IssueRenderer;\nuse Eloquent\\Schemer\\Validation\\Result\\IssueRendererInterface;\nuse Eloquent\\Schemer\\Validation\\Result\\ValidationResult;\nuse Eloquent\\Schemer\\Value\\ConcreteValueInterface;\nuse Exception;\n\nfinal class InvalidSchemaException extends Exception\n{\n    \/**\n     * @param ConcreteValueInterface      $value\n     * @param ValidationResult            $result\n     * @param Exception|null              $previous\n     * @param IssueRendererInterface|null $issueRenderer\n     *\/\n    public function __construct(\n        ConcreteValueInterface $value,\n        ValidationResult $result,\n        Exception $previous = null,\n        IssueRendererInterface $issueRenderer = null\n    ) {\n        if (null === $issueRenderer) {\n            $issueRenderer = new IssueRenderer;\n        }\n\n        $this->value = $value;\n        $this->result = $result;\n        $this->issueRenderer = $issueRenderer;\n\n        parent::__construct(\n            sprintf(\n                \"Invalid schema:\\n%s\",\n                $issueRenderer->renderManyString($result->issues())\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return ConcreteValueInterface\n     *\/\n    public function value()\n    {\n        return $this->value;\n    }\n\n    \/**\n     * @return ValidationResult\n     *\/\n    public function result()\n    {\n        return $this->result;\n    }\n\n    \/**\n     * @return IssueRendererInterface\n     *\/\n    public function issueRenderer()\n    {\n        return $this->issueRenderer;\n    }\n\n    private $value;\n    private $result;\n    private $issueRenderer;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,null,0,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Factory\/FormatConstraintFactory.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Factory;\n\nclass FormatConstraintFactory implements FormatConstraintFactoryInterface\n{\n    \/**\n     * @param array<string,string> $classMap\n     *\/\n    public function __construct(array $classMap = null)\n    {\n        if (null === $classMap) {\n            $classMap = $this->defaultClassMap();\n        }\n\n        $this->classMap = $classMap;\n    }\n\n    \/**\n     * @return array<string,string>\n     *\/\n    public function classMap()\n    {\n        return $this->classMap;\n    }\n\n    \/**\n     * @return array<string,string>\n     *\/\n    public function defaultClassMap()\n    {\n        return array(\n            'date-time' => 'Eloquent\\Schemer\\Constraint\\StringValue\\DateTimeFormatConstraint',\n            'email'     => 'Eloquent\\Schemer\\Constraint\\StringValue\\EmailFormatConstraint',\n            'hostname'  => 'Eloquent\\Schemer\\Constraint\\StringValue\\HostnameFormatConstraint',\n            'ipv4'      => 'Eloquent\\Schemer\\Constraint\\StringValue\\Ipv4AddressFormatConstraint',\n            'ipv6'      => 'Eloquent\\Schemer\\Constraint\\StringValue\\Ipv6AddressFormatConstraint',\n            'uri'       => 'Eloquent\\Schemer\\Constraint\\StringValue\\UriFormatConstraint',\n        );\n    }\n\n    \/**\n     * @param string $key\n     * @param string $class\n     *\/\n    public function set($key, $class)\n    {\n        $this->classMap[$key] = $class;\n    }\n\n    \/**\n     * @param string $key\n     *\n     * @return \\Eloquent\\Schemer\\Constraint\\FormatConstraintInterface|null\n     *\/\n    public function create($key)\n    {\n        $classMap = $this->classMap();\n        if (array_key_exists($key, $classMap)) {\n            $class = $classMap[$key];\n\n            return new $class;\n        }\n\n        return null;\n    }\n\n    private $classMap;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,0,0,null,0,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Factory\/FormatConstraintFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Factory;\n\ninterface FormatConstraintFactoryInterface\n{\n    \/**\n     * @param string $key\n     *\n     * @return \\Eloquent\\Schemer\\Constraint\\FormatConstraintInterface|null\n     *\/\n    public function create($key);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Factory\/MetaSchemaFactory.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Factory;\n\nuse Eloquent\\Schemer\\Constraint\\ArrayValue;\nuse Eloquent\\Schemer\\Constraint\\Generic;\nuse Eloquent\\Schemer\\Constraint\\NumberValue;\nuse Eloquent\\Schemer\\Constraint\\ObjectValue;\nuse Eloquent\\Schemer\\Constraint\\Schema;\nuse Eloquent\\Schemer\\Constraint\\StringValue;\nuse Eloquent\\Schemer\\Value;\n\nclass MetaSchemaFactory\n{\n    \/**\n     * @return Schema\n     *\/\n    public function create()\n    {\n        $schema = new Schema(\n            null,\n            new Value\\ObjectValue,\n            'Schemer meta-schema',\n            'Schema used to validate Schemer schemas.'\n        );\n\n        \/\/ definitions\n\n        $schemaArraySchema = new Schema(\n            array(\n                new Generic\\TypeConstraint(\n                    array(Value\\ValueType::ARRAY_TYPE())\n                ),\n                new ArrayValue\\MinimumItemsConstraint(1),\n                new ArrayValue\\ItemsConstraint(array(), $schema),\n            )\n        );\n\n        $positiveIntegerSchema = new Schema(\n            array(\n                new Generic\\TypeConstraint(\n                    array(Value\\ValueType::INTEGER_TYPE())\n                ),\n                new NumberValue\\MinimumConstraint(0),\n            )\n        );\n\n        $positiveIntegerDefault0Schema = new Schema(\n            array(\n                new Generic\\TypeConstraint(\n                    array(Value\\ValueType::INTEGER_TYPE())\n                ),\n                new NumberValue\\MinimumConstraint(0),\n            ),\n            new Value\\IntegerValue(0)\n        );\n\n        $simpleTypesSchema = new Schema(\n            array(\n                new Generic\\EnumConstraint(\n                    new Value\\ArrayValue(\n                        array(\n                            new Value\\StringValue('array'),\n                            new Value\\StringValue('boolean'),\n                            new Value\\StringValue('date-time'),\n                            new Value\\StringValue('integer'),\n                            new Value\\StringValue('null'),\n                            new Value\\StringValue('number'),\n                            new Value\\StringValue('object'),\n                            new Value\\StringValue('string'),\n                        )\n                    )\n                ),\n            )\n        );\n\n        $stringArraySchema = new Schema(\n            array(\n                new Generic\\TypeConstraint(\n                    array(Value\\ValueType::ARRAY_TYPE())\n                ),\n                new ArrayValue\\ItemsConstraint(\n                    array(),\n                    new Schema(\n                        array(\n                            new Generic\\TypeConstraint(\n                                array(Value\\ValueType::STRING_TYPE())\n                            ),\n                        )\n                    )\n                ),\n            )\n        );\n\n        $booleanOrSchemaDefaultEmptyObjectSchema = new Schema(\n            array(\n                new Generic\\AnyOfConstraint(\n                    array(\n                        new Schema(\n                            array(\n                                new Generic\\TypeConstraint(\n                                    array(Value\\ValueType::BOOLEAN_TYPE())\n                                ),\n                            )\n                        ),\n                        $schema,\n                    )\n                ),\n            ),\n            new Value\\ObjectValue\n        );\n\n        $schemaMapDefaultEmptyObjectSchema = new Schema(\n            array(\n                new Generic\\TypeConstraint(\n                    array(Value\\ValueType::OBJECT_TYPE())\n                ),\n                new ObjectValue\\PropertiesConstraint(\n                    array(),\n                    array(),\n                    $schema\n                ),\n            ),\n            new Value\\ObjectValue\n        );\n\n        $dateOrDateStringSchema = new Schema(\n            array(\n                new Generic\\AnyOfConstraint(\n                    array(\n                        new Schema(\n                            array(\n                                new Generic\\TypeConstraint(\n                                    array(Value\\ValueType::DATE_TIME_TYPE())\n                                ),\n                            )\n                        ),\n                        new Schema(\n                            array(\n                                new Generic\\TypeConstraint(\n                                    array(Value\\ValueType::STRING_TYPE())\n                                ),\n                                new StringValue\\DateTimeFormatConstraint,\n                            )\n                        ),\n                    )\n                ),\n            )\n        );\n\n        \/\/ constraints\n\n        $typeConstraint = new Generic\\TypeConstraint(\n            array(Value\\ValueType::OBJECT_TYPE())\n        );\n\n        $propertiesConstraint = new ObjectValue\\PropertiesConstraint(\n            array(\n                'id' => new Schema(\n                    array(\n                        new Generic\\TypeConstraint(\n                            array(Value\\ValueType::STRING_TYPE())\n                        ),\n                        new StringValue\\UriFormatConstraint,\n                    )\n                ),\n\n                '$schema' => new Schema(\n                    array(\n                        new Generic\\TypeConstraint(\n                            array(Value\\ValueType::STRING_TYPE())\n                        ),\n                        new StringValue\\UriFormatConstraint,\n                    )\n                ),\n\n                'title' => new Schema(\n                    array(\n                        new Generic\\TypeConstraint(\n                            array(Value\\ValueType::STRING_TYPE())\n                        ),\n                    )\n                ),\n\n                'description' => new Schema(\n                    array(\n                        new Generic\\TypeConstraint(\n                            array(Value\\ValueType::STRING_TYPE())\n                        ),\n                    )\n                ),\n\n                'default' => new Schema,\n\n                'multipleOf' => new Schema(\n                    array(\n                        new Generic\\TypeConstraint(\n                            array(Value\\ValueType::NUMBER_TYPE())\n                        ),\n                        new NumberValue\\MinimumConstraint(0, true),\n                    )\n                ),\n\n                'maximum' => new Schema(\n                    array(\n                        new Generic\\TypeConstraint(\n                            array(Value\\ValueType::NUMBER_TYPE())\n                        ),\n                    )\n                ),\n\n                'exclusiveMaximum' => new Schema(\n                    array(\n                        new Generic\\TypeConstraint(\n                            array(Value\\ValueType::BOOLEAN_TYPE())\n                        ),\n                    ),\n                    new Value\\BooleanValue(false)\n                ),\n\n                'minimum' => new Schema(\n                    array(\n                        new Generic\\TypeConstraint(\n                            array(Value\\ValueType::NUMBER_TYPE())\n                        ),\n                    )\n                ),\n\n                'exclusiveMinimum' => new Schema(\n                    array(\n                        new Generic\\TypeConstraint(\n                            array(Value\\ValueType::BOOLEAN_TYPE())\n                        ),\n                    ),\n                    new Value\\BooleanValue(false)\n                ),\n\n                'maxLength' => $positiveIntegerSchema,\n                'minLength' => $positiveIntegerDefault0Schema,\n\n                'pattern' => new Schema(\n                    array(\n                        new Generic\\TypeConstraint(\n                            array(Value\\ValueType::STRING_TYPE())\n                        ),\n                    )\n                ),\n\n                'additionalItems' => $booleanOrSchemaDefaultEmptyObjectSchema,\n\n                'items' => new Schema(\n                    array(\n                        new Generic\\AnyOfConstraint(\n                            array($schema, $schemaArraySchema)\n                        ),\n                    ),\n                    new Value\\ObjectValue\n                ),\n\n                'maxItems' => $positiveIntegerSchema,\n                'minItems' => $positiveIntegerDefault0Schema,\n\n                'uniqueItems' => new Schema(\n                    array(\n                        new Generic\\TypeConstraint(\n                            array(Value\\ValueType::BOOLEAN_TYPE())\n                        ),\n                    ),\n                    new Value\\BooleanValue(false)\n                ),\n\n                'maxProperties' => $positiveIntegerSchema,\n                'minProperties' => $positiveIntegerDefault0Schema,\n                'required' => $stringArraySchema,\n                'additionalProperties' => $booleanOrSchemaDefaultEmptyObjectSchema,\n                'definitions' => $schemaMapDefaultEmptyObjectSchema,\n                'properties' => $schemaMapDefaultEmptyObjectSchema,\n                'patternProperties' => $schemaMapDefaultEmptyObjectSchema,\n\n                'dependencies' => new Schema(\n                    array(\n                        new Generic\\TypeConstraint(\n                            array(Value\\ValueType::OBJECT_TYPE())\n                        ),\n                        new ObjectValue\\PropertiesConstraint(\n                            array(),\n                            array(),\n                            new Schema(\n                                array(\n                                    new Generic\\AnyOfConstraint(\n                                        array(\n                                            $schema,\n                                            $stringArraySchema,\n                                        )\n                                    ),\n                                )\n                            )\n                        ),\n                    )\n                ),\n\n                'enum' => new Schema(\n                    array(\n                        new Generic\\TypeConstraint(\n                            array(Value\\ValueType::ARRAY_TYPE())\n                        ),\n                        new ArrayValue\\MinimumItemsConstraint(1),\n                        new ArrayValue\\UniqueItemsConstraint(true),\n                    )\n                ),\n\n                'type' => new Schema(\n                    array(\n                        new Generic\\AnyOfConstraint(\n                            array(\n                                $simpleTypesSchema,\n                                new Schema(\n                                    array(\n                                        new Generic\\TypeConstraint(\n                                            array(Value\\ValueType::ARRAY_TYPE())\n                                        ),\n                                        new ArrayValue\\ItemsConstraint(\n                                            array(),\n                                            $simpleTypesSchema\n                                        ),\n                                        new ArrayValue\\MinimumItemsConstraint(1),\n                                        new ArrayValue\\UniqueItemsConstraint(true),\n                                    )\n                                ),\n                            )\n                        ),\n                    )\n                ),\n\n                'allOf' => $schemaArraySchema,\n                'anyOf' => $schemaArraySchema,\n                'oneOf' => $schemaArraySchema,\n                'not' => $schema,\n                'maxDateTime' => $dateOrDateStringSchema,\n                'minDateTime' => $dateOrDateStringSchema,\n            ),\n            array(),\n            new Schema\n        );\n\n        $exclusiveMaximumDependencyConstraint = new ObjectValue\\DependencyConstraint(\n            'exclusiveMaximum',\n            new Schema(\n                array(\n                    new ObjectValue\\RequiredConstraint('maximum')\n                )\n            )\n        );\n\n        $exclusiveMinimumDependencyConstraint = new ObjectValue\\DependencyConstraint(\n            'exclusiveMinimum',\n            new Schema(\n                array(\n                    new ObjectValue\\RequiredConstraint('minimum')\n                )\n            )\n        );\n\n        \/\/ composition\n\n        $schema->setConstraints(\n            array(\n                $typeConstraint,\n                $propertiesConstraint,\n                $exclusiveMaximumDependencyConstraint,\n                $exclusiveMinimumDependencyConstraint,\n            )\n        );\n\n        return $schema;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,null,1,null,null,null,1,null,1,1,1,1,1,null,1,null,1,null,1,1,1,1,null,1,null,1,null,1,1,1,1,1,1,1,null,1,null,1,1,null,1,1,1,1,1,1,1,1,null,1,1,null,1,null,1,null,1,1,1,1,1,1,null,1,1,1,null,1,1,null,1,null,1,null,1,null,1,null,1,1,1,null,1,1,null,1,1,null,1,null,1,null,1,1,1,1,1,1,null,1,1,null,1,null,1,null,1,null,1,null,1,1,1,null,1,1,null,1,1,1,1,null,1,null,1,null,1,null,null,null,1,1,1,null,1,null,1,null,1,1,1,1,null,1,null,1,null,1,1,1,1,null,1,null,1,null,1,1,1,null,1,null,1,null,1,1,1,null,1,null,1,null,1,null,1,1,1,1,null,1,null,1,null,1,1,1,null,1,null,1,null,1,1,1,1,1,1,null,1,null,1,1,1,null,1,null,1,null,1,1,1,1,1,1,null,1,1,null,1,null,1,1,1,null,1,null,1,null,1,null,1,1,1,1,null,1,null,1,1,null,1,null,1,1,1,1,1,1,null,1,1,1,1,1,1,1,null,1,null,1,1,1,1,1,1,1,null,1,null,1,1,null,1,null,1,1,null,1,null,1,null,1,1,1,1,1,null,1,null,1,null,1,null,1,1,null,1,1,1,1,1,null,1,1,1,null,1,null,1,null,1,null,1,1,1,1,1,1,1,1,null,1,null,1,1,1,null,1,1,1,1,null,1,1,1,null,1,1,1,1,null,null,null,1,null,1,1,1,1,null,1,null,1,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Factory\/SchemaFactory.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Factory;\n\nuse DateTime;\nuse Eloquent\\Schemer\\Constraint\\ArrayValue;\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\DateTimeValue;\nuse Eloquent\\Schemer\\Constraint\\Generic;\nuse Eloquent\\Schemer\\Constraint\\NumberValue;\nuse Eloquent\\Schemer\\Constraint\\ObjectValue;\nuse Eloquent\\Schemer\\Constraint\\Schema;\nuse Eloquent\\Schemer\\Constraint\\StringValue;\nuse Eloquent\\Schemer\\Validation\\ConstraintValidator;\nuse Eloquent\\Schemer\\Validation\\ConstraintValidatorInterface;\nuse Eloquent\\Schemer\\Value;\n\nclass SchemaFactory implements SchemaFactoryInterface\n{\n    \/**\n     * @param FormatConstraintFactoryInterface|null $formatConstraintFactory\n     * @param Schema|null                           $metaSchema\n     * @param ConstraintValidatorInterface|null     $constraintValidator\n     *\/\n    public function __construct(\n        FormatConstraintFactoryInterface $formatConstraintFactory = null,\n        Schema $metaSchema = null,\n        ConstraintValidatorInterface $constraintValidator = null\n    ) {\n        if (null === $formatConstraintFactory) {\n            $formatConstraintFactory = new FormatConstraintFactory;\n        }\n        if (null === $constraintValidator && null !== $metaSchema) {\n            $constraintValidator = new ConstraintValidator;\n        }\n\n        $this->formatConstraintFactory = $formatConstraintFactory;\n        $this->metaSchema = $metaSchema;\n        $this->constraintValidator = $constraintValidator;\n    }\n\n    \/**\n     * @return FormatConstraintFactoryInterface\n     *\/\n    public function formatConstraintFactory()\n    {\n        return $this->formatConstraintFactory;\n    }\n\n    \/**\n     * @return Schema|null\n     *\/\n    public function metaSchema()\n    {\n        return $this->metaSchema;\n    }\n\n    \/**\n     * @return ConstraintValidatorInterface|null\n     *\/\n    public function constraintValidator()\n    {\n        return $this->constraintValidator;\n    }\n\n    \/**\n     * @param Value\\ConcreteValueInterface $value\n     *\n     * @return \\Eloquent\\Schemer\\Constraint\\Schema\n     *\/\n    public function create(Value\\ConcreteValueInterface $value)\n    {\n        if (null !== $this->metaSchema()) {\n            $result = $this->constraintValidator()->validate(\n                $this->metaSchema(),\n                $value\n            );\n            if (!$result->isValid()) {\n                throw new Exception\\InvalidSchemaException($value, $result);\n            }\n        }\n\n        $this->clear();\n        $schema = $this->createSchema($value);\n        $this->clear();\n\n        return $schema;\n    }\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\n     * @return \\Eloquent\\Schemer\\Constraint\\Schema\n     *\/\n    protected function createSchema(Value\\ObjectValue $value)\n    {\n        $schema = $this->registeredSchema($value);\n        if (null !== $schema) {\n            return $schema;\n        }\n\n        if ($value->has('default')) {\n            $defaultValue = $value->get('default');\n        } else {\n            $defaultValue = null;\n        }\n\n        $schema = new Schema(\n            null,\n            $defaultValue,\n            $value->getRawDefault('title'),\n            $value->getRawDefault('description')\n        );\n        $this->registerSchema($value, $schema);\n\n        $constraints = array();\n        foreach ($value as $property => $subValue) {\n            $constraints = array_merge(\n                $constraints,\n                $this->createConstraints($property, $subValue)\n            );\n        }\n        $constraints = array_merge(\n            $constraints,\n            $this->createCompositeConstraints($value)\n        );\n        $schema->setConstraints($constraints);\n\n        return $schema;\n    }\n\n    \/**\n     * @param string                       $property\n     * @param Value\\ConcreteValueInterface $value\n     *\n     * @return array<ConstraintInterface>\n     *\/\n    protected function createConstraints(\n        $property,\n        Value\\ConcreteValueInterface $value\n    ) {\n        switch ($property) {\n            \/\/ generic constraints\n            case 'enum':\n                return array($this->createEnumConstraint($value));\n            case 'type':\n                return array($this->createTypeConstraint($value));\n            case 'allOf':\n                return array($this->createAllOfConstraint($value));\n            case 'anyOf':\n                return array($this->createAnyOfConstraint($value));\n            case 'oneOf':\n                return array($this->createOneOfConstraint($value));\n            case 'not':\n                return array($this->createNotConstraint($value));\n\n            \/\/ object constraints\n            case 'maxProperties':\n                return array($this->createMaximumPropertiesConstraint($value));\n            case 'minProperties':\n                return array($this->createMinimumPropertiesConstraint($value));\n            case 'required':\n                return $this->createRequiredConstraints($value);\n            case 'dependencies':\n                return $this->createDependencyConstraints($value);\n\n            \/\/ array constraints\n            case 'maxItems':\n                return array($this->createMaximumItemsConstraint($value));\n            case 'minItems':\n                return array($this->createMinimumItemsConstraint($value));\n            case 'uniqueItems':\n                return array($this->createUniqueItemsConstraint($value));\n\n            \/\/ string constraints\n            case 'maxLength':\n                return array($this->createMaximumLengthConstraint($value));\n            case 'minLength':\n                return array($this->createMinimumLengthConstraint($value));\n            case 'pattern':\n                return array($this->createPatternConstraint($value));\n\n            \/\/ number constraints\n            case 'multipleOf':\n                return array($this->createMultipleOfConstraint($value));\n\n            \/\/ date-time constraints\n            case 'maxDateTime':\n                return array($this->createMaximumDateTimeConstraint($value));\n            case 'minDateTime':\n                return array($this->createMinimumDateTimeConstraint($value));\n\n            \/\/ format constraints\n            case 'format':\n                $constraint = $this->formatConstraintFactory()->create($value->value());\n                if (null === $constraint) {\n                    return array();\n                }\n\n                return array($constraint);\n        }\n\n        return array();\n    }\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\n     * @return array<ConstraintInterface>\n     *\/\n    protected function createCompositeConstraints(Value\\ObjectValue $value)\n    {\n        $constraints = array();\n\n        if ($constraint = $this->createPropertiesConstraint($value)) {\n            $constraints[] = $constraint;\n        }\n        if ($constraint = $this->createItemsConstraint($value)) {\n            $constraints[] = $constraint;\n        }\n        if ($constraint = $this->createMaximumConstraint($value)) {\n            $constraints[] = $constraint;\n        }\n        if ($constraint = $this->createMinimumConstraint($value)) {\n            $constraints[] = $constraint;\n        }\n\n        return $constraints;\n    }\n\n    \/\/ generic constraints =====================================================\n\n    \/**\n     * @param Value\\ArrayValue $value\n     *\n     * @return Generic\\EnumConstraint\n     *\/\n    protected function createEnumConstraint(Value\\ArrayValue $value)\n    {\n        return new Generic\\EnumConstraint($value);\n    }\n\n    \/**\n     * @param Value\\ConcreteValueInterface $value\n     *\n     * @return Generic\\TypeConstraint\n     *\/\n    protected function createTypeConstraint(Value\\ConcreteValueInterface $value)\n    {\n        if ($value instanceof Value\\ArrayValue) {\n            $valueTypes = array();\n            foreach ($value as $typeValue) {\n                $valueTypes[] = Value\\ValueType::instanceByValue($typeValue->value());\n            }\n\n            return new Generic\\TypeConstraint($valueTypes);\n        }\n\n        return new Generic\\TypeConstraint(\n            array(Value\\ValueType::instanceByValue($value->value()))\n        );\n    }\n\n    \/**\n     * @param Value\\ArrayValue $value\n     *\n     * @return Generic\\AllOfConstraint\n     *\/\n    protected function createAllOfConstraint(Value\\ArrayValue $value)\n    {\n        $schemas = array();\n        foreach ($value as $subValue) {\n            $schemas[] = $this->createSchema($subValue);\n        }\n\n        return new Generic\\AllOfConstraint($schemas);\n    }\n\n    \/**\n     * @param Value\\ArrayValue $value\n     *\n     * @return Generic\\AnyOfConstraint\n     *\/\n    protected function createAnyOfConstraint(Value\\ArrayValue $value)\n    {\n        $schemas = array();\n        foreach ($value as $subValue) {\n            $schemas[] = $this->createSchema($subValue);\n        }\n\n        return new Generic\\AnyOfConstraint($schemas);\n    }\n\n    \/**\n     * @param Value\\ArrayValue $value\n     *\n     * @return Generic\\OneOfConstraint\n     *\/\n    protected function createOneOfConstraint(Value\\ArrayValue $value)\n    {\n        $schemas = array();\n        foreach ($value as $subValue) {\n            $schemas[] = $this->createSchema($subValue);\n        }\n\n        return new Generic\\OneOfConstraint($schemas);\n    }\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\n     * @return Generic\\NotConstraint\n     *\/\n    protected function createNotConstraint(Value\\ObjectValue $value)\n    {\n        return new Generic\\NotConstraint($this->createSchema($value));\n    }\n\n    \/\/ object constraints ======================================================\n\n    \/**\n     * @param Value\\IntegerValue $value\n     *\n     * @return ObjectValue\\MaximumPropertiesConstraint\n     *\/\n    protected function createMaximumPropertiesConstraint(Value\\IntegerValue $value)\n    {\n        return new ObjectValue\\MaximumPropertiesConstraint($value->value());\n    }\n\n    \/**\n     * @param Value\\IntegerValue $value\n     *\n     * @return ObjectValue\\MinimumPropertiesConstraint\n     *\/\n    protected function createMinimumPropertiesConstraint(Value\\IntegerValue $value)\n    {\n        return new ObjectValue\\MinimumPropertiesConstraint($value->value());\n    }\n\n    \/**\n     * @param Value\\ArrayValue $value\n     *\n     * @return array<RequiredConstraint>\n     *\/\n    protected function createRequiredConstraints(Value\\ArrayValue $value)\n    {\n        $constraints = array();\n        foreach ($value as $subValue) {\n            $constraints[] = $this->createRequiredConstraint($subValue);\n        }\n\n        return $constraints;\n    }\n\n    \/**\n     * @param Value\\StringValue $value\n     *\n     * @return array<RequiredConstraint>\n     *\/\n    protected function createRequiredConstraint(Value\\StringValue $value)\n    {\n        return new ObjectValue\\RequiredConstraint($value->value());\n    }\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\n     * @return ObjectValue\\PropertiesConstraint|null\n     *\/\n    protected function createPropertiesConstraint(Value\\ObjectValue $value)\n    {\n        if (\n            !$value->has('properties') &&\n            !$value->has('patternProperties') &&\n            !$value->has('additionalProperties')\n        ) {\n            return null;\n        }\n\n        $schemas = array();\n        if ($value->has('properties')) {\n            foreach ($value->get('properties') as $property => $subValue) {\n                $schemas[$property] = $this->createSchema($subValue);\n            }\n        }\n\n        $patternSchemas = array();\n        if ($value->has('patternProperties')) {\n            foreach ($value->get('patternProperties') as $pattern => $subValue) {\n                $patternSchemas[$pattern] = $this->createSchema($subValue);\n            }\n        }\n\n        if ($value->has('additionalProperties')) {\n            if ($value->get('additionalProperties') instanceof Value\\BooleanValue) {\n                if ($value->getRaw('additionalProperties')) {\n                    $additionalSchema = new Schema;\n                } else {\n                    $additionalSchema = new Schema(\n                        array(new ObjectValue\\AdditionalPropertyConstraint)\n                    );\n                }\n            } else {\n                $additionalSchema = $this->createSchema($value->get('additionalProperties'));\n            }\n        } else {\n            $additionalSchema = new Schema;\n        }\n\n        return new ObjectValue\\PropertiesConstraint(\n            $schemas,\n            $patternSchemas,\n            $additionalSchema\n        );\n    }\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\n     * @return array<DependencyConstraint>\n     *\/\n    protected function createDependencyConstraints(Value\\ObjectValue $value)\n    {\n        $constraints = array();\n        foreach ($value as $property => $subValue) {\n            if ($subValue instanceof Value\\ArrayValue) {\n                $subConstraints = array();\n                foreach ($subValue as $subSubValue) {\n                    $subConstraints[] = $this->createRequiredConstraint($subSubValue);\n                }\n\n                $constraints[] = new ObjectValue\\DependencyConstraint(\n                    $property,\n                    new Schema($subConstraints)\n                );\n            } else {\n                $constraints[] = new ObjectValue\\DependencyConstraint(\n                    $property,\n                    $this->createSchema($subValue)\n                );\n            }\n        }\n\n        return $constraints;\n    }\n\n    \/\/ array constraints =======================================================\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\n     * @return ArrayValue\\ItemsConstraint|null\n     *\/\n    protected function createItemsConstraint(Value\\ObjectValue $value)\n    {\n        if (\n            !$value->has('items') &&\n            !$value->has('additionalItems')\n        ) {\n            return null;\n        }\n\n        $schemas = array();\n        $additionalSchema = null;\n        if ($value->has('items')) {\n            if ($value->get('items') instanceof Value\\ArrayValue) {\n                foreach ($value->get('items') as $subValue) {\n                    $schemas[] = $this->createSchema($subValue);\n                }\n            } else {\n                $additionalSchema = $this->createSchema($value->get('items'));\n            }\n        }\n\n        if (null === $additionalSchema && $value->has('additionalItems')) {\n            if ($value->get('additionalItems') instanceof Value\\BooleanValue) {\n                if (!$value->getRaw('additionalItems')) {\n                    $additionalSchema = new Schema(\n                        array(new ArrayValue\\AdditionalItemConstraint)\n                    );\n                }\n            } else {\n                $additionalSchema = $this->createSchema($value->get('additionalItems'));\n            }\n        }\n\n        if (null === $additionalSchema) {\n            $additionalSchema = new Schema;\n        }\n\n        return new ArrayValue\\ItemsConstraint($schemas, $additionalSchema);\n    }\n\n    \/**\n     * @param Value\\IntegerValue $value\n     *\n     * @return ArrayValue\\MaximumItemsConstraint\n     *\/\n    protected function createMaximumItemsConstraint(Value\\IntegerValue $value)\n    {\n        return new ArrayValue\\MaximumItemsConstraint($value->value());\n    }\n\n    \/**\n     * @param Value\\IntegerValue $value\n     *\n     * @return ArrayValue\\MinimumItemsConstraint\n     *\/\n    protected function createMinimumItemsConstraint(Value\\IntegerValue $value)\n    {\n        return new ArrayValue\\MinimumItemsConstraint($value->value());\n    }\n\n    \/**\n     * @param Value\\BooleanValue $value\n     *\n     * @return ArrayValue\\UniqueItemsConstraint\n     *\/\n    protected function createUniqueItemsConstraint(Value\\BooleanValue $value)\n    {\n        return new ArrayValue\\UniqueItemsConstraint($value->value());\n    }\n\n    \/\/ string constraints ======================================================\n\n    \/**\n     * @param Value\\IntegerValue $value\n     *\n     * @return StringValue\\MaximumLengthConstraint\n     *\/\n    protected function createMaximumLengthConstraint(Value\\IntegerValue $value)\n    {\n        return new StringValue\\MaximumLengthConstraint($value->value());\n    }\n\n    \/**\n     * @param Value\\IntegerValue $value\n     *\n     * @return StringValue\\MinimumLengthConstraint\n     *\/\n    protected function createMinimumLengthConstraint(Value\\IntegerValue $value)\n    {\n        return new StringValue\\MinimumLengthConstraint($value->value());\n    }\n\n    \/**\n     * @param Value\\StringValue $value\n     *\n     * @return StringValue\\PatternConstraint\n     *\/\n    protected function createPatternConstraint(Value\\StringValue $value)\n    {\n        return new StringValue\\PatternConstraint($value->value());\n    }\n\n    \/\/ number constraints ======================================================\n\n    \/**\n     * @param Value\\NumberValueInterface $value\n     *\n     * @return NumberValue\\MultipleOfConstraint\n     *\/\n    protected function createMultipleOfConstraint(Value\\NumberValueInterface $value)\n    {\n        return new NumberValue\\MultipleOfConstraint($value->value());\n    }\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\n     * @return NumberValue\\MaximumConstraint|null\n     *\/\n    protected function createMaximumConstraint(Value\\ObjectValue $value)\n    {\n        if (!$value->has('maximum')) {\n            return null;\n        }\n\n        return new NumberValue\\MaximumConstraint(\n            $value->getRaw('maximum'),\n            $value->getRawDefault('exclusiveMaximum')\n        );\n    }\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\n     * @return NumberValue\\MinimumConstraint|null\n     *\/\n    protected function createMinimumConstraint(Value\\ObjectValue $value)\n    {\n        if (!$value->has('minimum')) {\n            return null;\n        }\n\n        return new NumberValue\\MinimumConstraint(\n            $value->getRaw('minimum'),\n            $value->getRawDefault('exclusiveMinimum')\n        );\n    }\n\n    \/\/ date-time constraints ===================================================\n\n    \/**\n     * @param Value\\ConcreteValueInterface $value\n     *\n     * @return DateTimeValue\\MaximumDateTimeConstraint\n     *\/\n    protected function createMaximumDateTimeConstraint(Value\\ConcreteValueInterface $value)\n    {\n        if ($value instanceof Value\\DateTimeValue) {\n            return new DateTimeValue\\MaximumDateTimeConstraint($value->value());\n        }\n\n        return new DateTimeValue\\MaximumDateTimeConstraint(\n            new DateTime($value->value())\n        );\n    }\n\n    \/**\n     * @param Value\\ConcreteValueInterface $value\n     *\n     * @return DateTimeValue\\MinimumDateTimeConstraint\n     *\/\n    protected function createMinimumDateTimeConstraint(Value\\ConcreteValueInterface $value)\n    {\n        if ($value instanceof Value\\DateTimeValue) {\n            return new DateTimeValue\\MinimumDateTimeConstraint($value->value());\n        }\n\n        return new DateTimeValue\\MinimumDateTimeConstraint(\n            new DateTime($value->value())\n        );\n    }\n\n    \/\/ implementation details ==================================================\n\n    protected function clear()\n    {\n        $this->schemas = array();\n    }\n\n    \/**\n     * @param Value\\ConcreteValueInterface $value\n     * @param Schema                       $schema\n     *\/\n    protected function registerSchema(\n        Value\\ConcreteValueInterface $value,\n        Schema $schema\n    ) {\n        $this->schemas[spl_object_hash($value)] = $schema;\n    }\n\n    \/**\n     * @param Value\\ConcreteValueInterface $value\n     *\n     * @return Schema|null\n     *\/\n    protected function registeredSchema(Value\\ConcreteValueInterface $value)\n    {\n        $key = spl_object_hash($value);\n        if (array_key_exists($key, $this->schemas)) {\n            return $this->schemas[$key];\n        }\n\n        return null;\n    }\n\n    private $formatConstraintFactory;\n    private $metaSchema;\n    private $constraintValidator;\n    private $schemas;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,0,0,null,1,1,1,1,null,null,null,null,null,null,0,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,1,0,0,null,0,0,0,null,0,null,1,1,1,null,1,null,null,null,null,null,null,null,null,null,1,1,1,null,null,1,0,0,1,null,null,1,1,1,1,1,1,1,null,1,1,1,1,1,1,1,1,1,1,1,1,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,0,1,1,1,0,1,0,1,0,1,0,null,null,1,0,1,0,1,0,1,0,null,null,1,0,1,0,1,0,null,null,1,0,1,0,1,0,null,null,1,0,null,null,1,0,1,0,null,null,1,0,0,0,null,null,0,null,null,1,null,null,null,null,null,null,null,null,null,1,null,1,1,1,1,0,0,1,0,0,1,0,0,null,1,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,1,0,0,0,0,null,0,null,null,1,1,1,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,1,1,1,1,0,null,null,1,1,0,0,0,0,null,1,1,0,0,0,0,null,1,1,0,0,0,0,0,0,null,0,1,null,1,0,null,null,1,1,1,null,1,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,null,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,null,null,0,0,0,0,0,0,0,0,0,null,0,null,0,0,0,0,0,0,0,0,0,null,0,null,0,0,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,1,1,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,1,1,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,0,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,0,null,null,null,null,null,null,1,1,null,null,null,null,null,null,null,null,null,1,1,null,null,null,null,null,null,null,null,1,1,1,null,null,1,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Factory\/SchemaFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Factory;\n\nuse Eloquent\\Schemer\\Value\\ConcreteValueInterface;\n\ninterface SchemaFactoryInterface\n{\n    \/**\n     * @param ConcreteValueInterface $schema\n     *\n     * @return \\Eloquent\\Schemer\\Constraint\\Schema\n     *\/\n    public function create(ConcreteValueInterface $schema);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/FormatConstraintInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint;\n\ninterface FormatConstraintInterface extends ConstraintInterface\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Generic\/AbstractSchemaSetConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Generic;\n\nuse Eloquent\\Schemer\\Constraint\\SchemaInterface;\n\nabstract class AbstractSchemaSetConstraint implements SchemaSetConstraintInterface\n{\n    \/**\n     * @param array<SchemaInterface> $schemas\n     *\/\n    public function __construct(array $schemas)\n    {\n        $this->schemas = $schemas;\n    }\n\n    \/**\n     * @return array<SchemaInterface>\n     *\/\n    public function schemas()\n    {\n        return $this->schemas;\n    }\n\n    private $schemas;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Generic\/AllOfConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Generic;\n\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass AllOfConstraint extends AbstractSchemaSetConstraint\n{\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitAllOfConstraint($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Generic\/AnyOfConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Generic;\n\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass AnyOfConstraint extends AbstractSchemaSetConstraint\n{\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitAnyOfConstraint($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Generic\/EnumConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Generic;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\nuse Eloquent\\Schemer\\Value\\ArrayValue;\n\nclass EnumConstraint implements ConstraintInterface\n{\n    \/**\n     * @param ArrayValue $values\n     *\/\n    public function __construct(ArrayValue $values)\n    {\n        $this->values = $values;\n    }\n\n    \/**\n     * @return ArrayValue\n     *\/\n    public function values()\n    {\n        return $this->values;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitEnumConstraint($this);\n    }\n\n    private $values;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Generic\/NotConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Generic;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\SchemaInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass NotConstraint implements ConstraintInterface\n{\n    \/**\n     * @param SchemaInterface $schema\n     *\/\n    public function __construct(SchemaInterface $schema)\n    {\n        $this->schema = $schema;\n    }\n\n    \/**\n     * @return SchemaInterface\n     *\/\n    public function schema()\n    {\n        return $this->schema;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitNotConstraint($this);\n    }\n\n    private $schema;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Generic\/OneOfConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Generic;\n\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass OneOfConstraint extends AbstractSchemaSetConstraint\n{\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitOneOfConstraint($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Generic\/SchemaSetConstraintInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Generic;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\n\ninterface SchemaSetConstraintInterface extends ConstraintInterface\n{\n    \/**\n     * @return array<\\Eloquent\\Schemer\\Constraint\\SchemaInterface>\n     *\/\n    public function schemas();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Generic\/TypeConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Generic;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\nuse Eloquent\\Schemer\\Value\\ValueType;\n\nclass TypeConstraint implements ConstraintInterface\n{\n    \/**\n     * @param array<ValueType> $valueTypes\n     *\/\n    public function __construct(array $valueTypes)\n    {\n        $this->valueTypes = $valueTypes;\n    }\n\n    \/**\n     * @return array<ValueType>\n     *\/\n    public function valueTypes()\n    {\n        return $this->valueTypes;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitTypeConstraint($this);\n    }\n\n    private $valueTypes;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/NumberValue\/MaximumConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\NumberValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass MaximumConstraint implements ConstraintInterface\n{\n    \/**\n     * @param integer|float $maximum\n     * @param boolean|null  $exclusive\n     *\/\n    public function __construct($maximum, $exclusive = null)\n    {\n        if (null === $exclusive) {\n            $exclusive = false;\n        }\n\n        $this->maximum = $maximum;\n        $this->exclusive = $exclusive;\n    }\n\n    \/**\n     * @return integer|float\n     *\/\n    public function maximum()\n    {\n        return $this->maximum;\n    }\n\n    \/**\n     * @return boolean\n     *\/\n    public function exclusive()\n    {\n        return $this->exclusive;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitMaximumConstraint($this);\n    }\n\n    private $maximum;\n    private $exclusive;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/NumberValue\/MinimumConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\NumberValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass MinimumConstraint implements ConstraintInterface\n{\n    \/**\n     * @param integer|float $minimum\n     * @param boolean|null  $exclusive\n     *\/\n    public function __construct($minimum, $exclusive = null)\n    {\n        if (null === $exclusive) {\n            $exclusive = false;\n        }\n\n        $this->minimum = $minimum;\n        $this->exclusive = $exclusive;\n    }\n\n    \/**\n     * @return integer|float\n     *\/\n    public function minimum()\n    {\n        return $this->minimum;\n    }\n\n    \/**\n     * @return boolean\n     *\/\n    public function exclusive()\n    {\n        return $this->exclusive;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitMinimumConstraint($this);\n    }\n\n    private $minimum;\n    private $exclusive;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/NumberValue\/MultipleOfConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\NumberValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass MultipleOfConstraint implements ConstraintInterface\n{\n    \/**\n     * @param integer|float $quantity\n     *\/\n    public function __construct($quantity)\n    {\n        $this->quantity = $quantity;\n    }\n\n    \/**\n     * @return integer|float\n     *\/\n    public function quantity()\n    {\n        return $this->quantity;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitMultipleOfConstraint($this);\n    }\n\n    private $quantity;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/ObjectValue\/AdditionalPropertyConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\ObjectValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass AdditionalPropertyConstraint implements ConstraintInterface\n{\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitAdditionalPropertyConstraint($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/ObjectValue\/DependencyConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\ObjectValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\SchemaInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass DependencyConstraint implements ConstraintInterface\n{\n    \/**\n     * @param string          $property\n     * @param SchemaInterface $schema\n     *\/\n    public function __construct($property, SchemaInterface $schema)\n    {\n        $this->property = $property;\n        $this->schema = $schema;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function property()\n    {\n        return $this->property;\n    }\n\n    \/**\n     * @return SchemaInterface\n     *\/\n    public function schema()\n    {\n        return $this->schema;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitDependencyConstraint($this);\n    }\n\n    private $property;\n    private $schema;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/ObjectValue\/MaximumPropertiesConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\ObjectValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass MaximumPropertiesConstraint implements ConstraintInterface\n{\n    \/**\n     * @param integer $maximum\n     *\/\n    public function __construct($maximum)\n    {\n        $this->maximum = $maximum;\n    }\n\n    \/**\n     * @return integer\n     *\/\n    public function maximum()\n    {\n        return $this->maximum;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitMaximumPropertiesConstraint($this);\n    }\n\n    private $maximum;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/ObjectValue\/MinimumPropertiesConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\ObjectValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass MinimumPropertiesConstraint implements ConstraintInterface\n{\n    \/**\n     * @param integer $minimum\n     *\/\n    public function __construct($minimum)\n    {\n        $this->minimum = $minimum;\n    }\n\n    \/**\n     * @return integer\n     *\/\n    public function minimum()\n    {\n        return $this->minimum;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitMinimumPropertiesConstraint($this);\n    }\n\n    private $minimum;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/ObjectValue\/PropertiesConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\ObjectValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\SchemaInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass PropertiesConstraint implements ConstraintInterface\n{\n    \/**\n     * @param array<string,SchemaInterface> $schemas\n     * @param array<string,SchemaInterface> $patternSchemas\n     * @param SchemaInterface               $additionalSchema\n     *\/\n    public function __construct(\n        array $schemas,\n        array $patternSchemas,\n        SchemaInterface $additionalSchema\n    ) {\n        $this->schemas = $schemas;\n        $this->patternSchemas = $patternSchemas;\n        $this->additionalSchema = $additionalSchema;\n    }\n\n    \/**\n     * @return array<string,SchemaInterface>\n     *\/\n    public function schemas()\n    {\n        return $this->schemas;\n    }\n\n    \/**\n     * @return array<string,SchemaInterface>\n     *\/\n    public function patternSchemas()\n    {\n        return $this->patternSchemas;\n    }\n\n    \/**\n     * @return SchemaInterface\n     *\/\n    public function additionalSchema()\n    {\n        return $this->additionalSchema;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitPropertiesConstraint($this);\n    }\n\n    private $schemas;\n    private $patternSchemas;\n    private $additionalSchema;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/ObjectValue\/RequiredConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\ObjectValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass RequiredConstraint implements ConstraintInterface\n{\n    \/**\n     * @param string $property\n     *\/\n    public function __construct($property)\n    {\n        $this->property = $property;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function property()\n    {\n        return $this->property;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitRequiredConstraint($this);\n    }\n\n    private $property;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Reader\/SchemaReader.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Reader;\n\nuse Eloquent\\Schemer\\Constraint\\Factory\\SchemaFactory;\nuse Eloquent\\Schemer\\Constraint\\Factory\\SchemaFactoryInterface;\nuse Eloquent\\Schemer\\Constraint\\Schema;\nuse Eloquent\\Schemer\\Reader\\ReaderInterface;\nuse Eloquent\\Schemer\\Reader\\SwitchingScopeResolvingReader;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\nclass SchemaReader implements SchemaReaderInterface\n{\n    \/**\n     * @param SchemaFactoryInterface|null $schemaFactory\n     * @param ReaderInterface|null        $reader\n     *\/\n    public function __construct(\n        SchemaFactoryInterface $schemaFactory = null,\n        ReaderInterface $reader = null\n    ) {\n        if (null === $schemaFactory) {\n            $schemaFactory = new SchemaFactory;\n        }\n        if (null === $reader) {\n            $reader = new SwitchingScopeResolvingReader;\n        }\n\n        $this->schemaFactory = $schemaFactory;\n        $this->reader = $reader;\n    }\n\n    \/**\n     * @return SchemaFactoryInterface\n     *\/\n    public function schemaFactory()\n    {\n        return $this->schemaFactory;\n    }\n\n    \/**\n     * @return ReaderInterface\n     *\/\n    public function reader()\n    {\n        return $this->reader;\n    }\n\n    \/**\n     * @param UriInterface|string $uri\n     * @param string|null         $mimeType\n     *\n     * @return Schema\n     *\/\n    public function read($uri, $mimeType = null)\n    {\n        return $this->schemaFactory()->create(\n            $this->reader()->read($uri, $mimeType)\n        );\n    }\n\n    \/**\n     * @param string      $path\n     * @param string|null $mimeType\n     *\n     * @return Schema\n     *\/\n    public function readPath($path, $mimeType = null)\n    {\n        return $this->schemaFactory()->create(\n            $this->reader()->readPath($path, $mimeType)\n        );\n    }\n\n    \/**\n     * @param string      $data\n     * @param string|null $mimeType\n     *\n     * @return Schema\n     *\/\n    public function readString($data, $mimeType = null)\n    {\n        return $this->schemaFactory()->create(\n            $this->reader()->readString($data, $mimeType)\n        );\n    }\n\n    private $schemaFactory;\n    private $reader;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Reader\/SchemaReaderInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Reader;\n\nuse Eloquent\\Schemer\\Constraint\\Schema;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\ninterface SchemaReaderInterface\n{\n    \/**\n     * @param UriInterface|string $uri\n     * @param string|null         $mimeType\n     *\n     * @return Schema\n     *\/\n    public function read($uri, $mimeType = null);\n\n    \/**\n     * @param string      $path\n     * @param string|null $mimeType\n     *\n     * @return Schema\n     *\/\n    public function readPath($path, $mimeType = null);\n\n    \/**\n     * @param string      $data\n     * @param string|null $mimeType\n     *\n     * @return Schema\n     *\/\n    public function readString($data, $mimeType = null);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Renderer\/ConstraintFailureRenderer.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Renderer;\n\nuse Eloquent\\Schemer\\Constraint\\ArrayValue;\nuse Eloquent\\Schemer\\Constraint\\DateTimeValue;\nuse Eloquent\\Schemer\\Constraint\\Generic;\nuse Eloquent\\Schemer\\Constraint\\NumberValue;\nuse Eloquent\\Schemer\\Constraint\\ObjectValue;\nuse Eloquent\\Schemer\\Constraint\\Schema;\nuse Eloquent\\Schemer\\Constraint\\StringValue;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\nuse Eloquent\\Schemer\\Value\\ValueType;\n\nclass ConstraintFailureRenderer implements ConstraintVisitorInterface\n{\n    const UNMATCHED_SCHEMA = 'The value did not match the defined schema.';\n\n    \/**\n     * @param Schema $schema\n     *\n     * @return string\n     *\/\n    public function visitSchema(Schema $schema)\n    {\n        return static::UNMATCHED_SCHEMA;\n    }\n\n    \/\/ generic constraints =====================================================\n\n    \/**\n     * @param Generic\\EnumConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitEnumConstraint(Generic\\EnumConstraint $constraint)\n    {\n        $enumValues = array();\n        foreach ($constraint->values() as $enumValue) {\n            $enumValues[] = var_export($enumValue->value(), true);\n        }\n\n        if (count($enumValues) < 2) {\n            return sprintf(\n                'The value must be equal to %s.',\n                array_pop($enumValues)\n            );\n        }\n\n        return sprintf(\n            'The value must be equal to one of the following: %s.',\n            implode(', ', $enumValues)\n        );\n    }\n\n    \/**\n     * @param Generic\\TypeConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitTypeConstraint(Generic\\TypeConstraint $constraint)\n    {\n        $valueTypes = array_map(function (ValueType $valueType) {\n            return var_export($valueType->value(), true);\n        }, $constraint->valueTypes());\n\n        if (count($valueTypes) < 2) {\n            return sprintf(\n                'The value must be of type %s.',\n                array_pop($valueTypes)\n            );\n        }\n\n        return sprintf(\n            'The value must be one of the following types: %s.',\n            implode(', ', $valueTypes)\n        );\n    }\n\n    \/**\n     * @param Generic\\AllOfConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitAllOfConstraint(Generic\\AllOfConstraint $constraint)\n    {\n        return 'The value did not match all of the defined schemas.';\n    }\n\n    \/**\n     * @param Generic\\AnyOfConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitAnyOfConstraint(Generic\\AnyOfConstraint $constraint)\n    {\n        return 'The value did not match any of the defined schemas.';\n    }\n\n    \/**\n     * @param Generic\\OneOfConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitOneOfConstraint(Generic\\OneOfConstraint $constraint)\n    {\n        return 'The value did not match any, or matched more than one of the defined schemas.';\n    }\n\n    \/**\n     * @param Generic\\NotConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitNotConstraint(Generic\\NotConstraint $constraint)\n    {\n        return 'The value matched the defined schema.';\n    }\n\n    \/\/ object constraints ======================================================\n\n    \/**\n     * @param ObjectValue\\MaximumPropertiesConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitMaximumPropertiesConstraint(ObjectValue\\MaximumPropertiesConstraint $constraint)\n    {\n        return sprintf(\n            'The object must not have more than %s properties.',\n            var_export($constraint->maximum(), true)\n        );\n    }\n\n    \/**\n     * @param ObjectValue\\MinimumPropertiesConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitMinimumPropertiesConstraint(ObjectValue\\MinimumPropertiesConstraint $constraint)\n    {\n        return sprintf(\n            'The object must not have less than %s properties.',\n            var_export($constraint->minimum(), true)\n        );\n    }\n\n    \/**\n     * @param ObjectValue\\RequiredConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitRequiredConstraint(ObjectValue\\RequiredConstraint $constraint)\n    {\n        return sprintf(\n            'The property %s is required.',\n            var_export($constraint->property(), true)\n        );\n    }\n\n    \/**\n     * @param ObjectValue\\PropertiesConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitPropertiesConstraint(ObjectValue\\PropertiesConstraint $constraint)\n    {\n        return static::UNMATCHED_SCHEMA;\n    }\n\n    \/**\n     * @param ObjectValue\\AdditionalPropertyConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitAdditionalPropertyConstraint(ObjectValue\\AdditionalPropertyConstraint $constraint)\n    {\n        return 'Unexpected property.';\n    }\n\n    \/**\n     * @param ObjectValue\\DependencyConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitDependencyConstraint(ObjectValue\\DependencyConstraint $constraint)\n    {\n        return static::UNMATCHED_SCHEMA;\n    }\n\n    \/\/ array constraints =======================================================\n\n    \/**\n     * @param ArrayValue\\ItemsConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitItemsConstraint(ArrayValue\\ItemsConstraint $constraint)\n    {\n        return static::UNMATCHED_SCHEMA;\n    }\n\n    \/**\n     * @param ArrayValue\\AdditionalItemConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitAdditionalItemConstraint(ArrayValue\\AdditionalItemConstraint $constraint)\n    {\n        return 'Unexpected index.';\n    }\n\n    \/**\n     * @param ArrayValue\\MaximumItemsConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitMaximumItemsConstraint(ArrayValue\\MaximumItemsConstraint $constraint)\n    {\n        return sprintf(\n            'The array must not have more than %s items.',\n            var_export($constraint->maximum(), true)\n        );\n    }\n\n    \/**\n     * @param ArrayValue\\MinimumItemsConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitMinimumItemsConstraint(ArrayValue\\MinimumItemsConstraint $constraint)\n    {\n        return sprintf(\n            'The array must not have less than %s items.',\n            var_export($constraint->minimum(), true)\n        );\n    }\n\n    \/**\n     * @param ArrayValue\\UniqueItemsConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitUniqueItemsConstraint(ArrayValue\\UniqueItemsConstraint $constraint)\n    {\n        return 'The array items must be unique.';\n    }\n\n    \/\/ string constraints ======================================================\n\n    \/**\n     * @param StringValue\\MaximumLengthConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitMaximumLengthConstraint(StringValue\\MaximumLengthConstraint $constraint)\n    {\n        return sprintf(\n            'The string must not have more than %s characters.',\n            var_export($constraint->maximum(), true)\n        );\n    }\n\n    \/**\n     * @param StringValue\\MinimumLengthConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitMinimumLengthConstraint(StringValue\\MinimumLengthConstraint $constraint)\n    {\n        return sprintf(\n            'The string must not have less than %s characters.',\n            var_export($constraint->minimum(), true)\n        );\n    }\n\n    \/**\n     * @param StringValue\\PatternConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitPatternConstraint(StringValue\\PatternConstraint $constraint)\n    {\n        return sprintf(\n            'The string must match the pattern %s.',\n            var_export($constraint->pattern(), true)\n        );\n    }\n\n    \/**\n     * @param StringValue\\DateTimeFormatConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitDateTimeFormatConstraint(StringValue\\DateTimeFormatConstraint $constraint)\n    {\n        return 'The string must be a valid ISO 8601 date\/time.';\n    }\n\n    \/**\n     * @param StringValue\\EmailFormatConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitEmailFormatConstraint(StringValue\\EmailFormatConstraint $constraint)\n    {\n        return 'The string must be a valid email address.';\n    }\n\n    \/**\n     * @param StringValue\\HostnameFormatConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitHostnameFormatConstraint(StringValue\\HostnameFormatConstraint $constraint)\n    {\n        return 'The string must be a valid hostname.';\n    }\n\n    \/**\n     * @param StringValue\\Ipv4AddressFormatConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitIpv4AddressFormatConstraint(StringValue\\Ipv4AddressFormatConstraint $constraint)\n    {\n        return 'The string must be a valid IPv4 address.';\n    }\n\n    \/**\n     * @param StringValue\\Ipv6AddressFormatConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitIpv6AddressFormatConstraint(StringValue\\Ipv6AddressFormatConstraint $constraint)\n    {\n        return 'The string must be a valid IPv6 address.';\n    }\n\n    \/**\n     * @param StringValue\\UriFormatConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitUriFormatConstraint(StringValue\\UriFormatConstraint $constraint)\n    {\n        return 'The string must be a valid URI.';\n    }\n\n    \/\/ number constraints ======================================================\n\n    \/**\n     * @param NumberValue\\MultipleOfConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitMultipleOfConstraint(NumberValue\\MultipleOfConstraint $constraint)\n    {\n        return sprintf(\n            'The number must be a multiple of %s.',\n            var_export($constraint->quantity(), true)\n        );\n    }\n\n    \/**\n     * @param NumberValue\\MaximumConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitMaximumConstraint(NumberValue\\MaximumConstraint $constraint)\n    {\n        return sprintf(\n            'The number must not be more than %s.',\n            var_export($constraint->maximum(), true)\n        );\n    }\n\n    \/**\n     * @param NumberValue\\MinimumConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitMinimumConstraint(NumberValue\\MinimumConstraint $constraint)\n    {\n        return sprintf(\n            'The number must not be less than %s.',\n            var_export($constraint->minimum(), true)\n        );\n    }\n\n    \/\/ date-time constraints ===================================================\n\n    \/**\n     * @param DateTimeValue\\MaximumDateTimeConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitMaximumDateTimeConstraint(DateTimeValue\\MaximumDateTimeConstraint $constraint)\n    {\n        return sprintf(\n            'The date-time value must not be after %s.',\n            var_export($constraint->maximum()->format('c'), true)\n        );\n    }\n\n    \/**\n     * @param DateTimeValue\\MinimumDateTimeConstraint $constraint\n     *\n     * @return string\n     *\/\n    public function visitMinimumDateTimeConstraint(DateTimeValue\\MinimumDateTimeConstraint $constraint)\n    {\n        return sprintf(\n            'The date-time value must not be before %s.',\n            var_export($constraint->minimum()->format('c'), true)\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,0,0,0,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Schema.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint;\n\nuse Eloquent\\Schemer\\Value\\ConcreteValueInterface;\n\nclass Schema implements SchemaInterface\n{\n    \/**\n     * @param array<ConstraintInterface>|null $constraints\n     * @param ConcreteValueInterface|null     $defaultValue\n     * @param string|null                     $title\n     * @param string|null                     $description\n     *\/\n    public function __construct(\n        array $constraints = null,\n        ConcreteValueInterface $defaultValue = null,\n        $title = null,\n        $description = null\n    ) {\n        if (null === $constraints) {\n            $constraints = array();\n        }\n\n        $this->setConstraints($constraints);\n        $this->defaultValue = $defaultValue;\n        $this->title = $title;\n        $this->description = $description;\n    }\n\n    \/**\n     * @param ConstraintInterface $constraint\n     *\/\n    public function addConstraint(ConstraintInterface $constraint)\n    {\n        $this->constraints[] = $constraint;\n    }\n\n    \/**\n     * @param array<ConstraintInterface> $constraints\n     *\/\n    public function addConstraints(array $constraints)\n    {\n        foreach ($constraints as $constraint) {\n            $this->addConstraint($constraint);\n        }\n    }\n\n    \/**\n     * @param array<ConstraintInterface> $constraints\n     *\/\n    public function setConstraints(array $constraints)\n    {\n        $this->constraints = array();\n        $this->addConstraints($constraints);\n    }\n\n    \/**\n     * @return array<integer,ConstraintInterface>\n     *\/\n    public function constraints()\n    {\n        return $this->constraints;\n    }\n\n    \/**\n     * @return ConcreteValueInterface|null\n     *\/\n    public function defaultValue()\n    {\n        return $this->defaultValue;\n    }\n\n    \/**\n     * @return string|null\n     *\/\n    public function title()\n    {\n        return $this->title;\n    }\n\n    \/**\n     * @return string|null\n     *\/\n    public function description()\n    {\n        return $this->description;\n    }\n\n    \/**\n     * @return boolean\n     *\/\n    public function isEmpty()\n    {\n        return count($this->constraints()) < 1;\n    }\n\n    \/**\n     * @param Visitor\\ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(Visitor\\ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitSchema($this);\n    }\n\n    private $constraints;\n    private $defaultValue;\n    private $title;\n    private $description;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,0,0,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/SchemaInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint;\n\ninterface SchemaInterface extends ConstraintInterface\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/StringValue\/DateTimeFormatConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\StringValue;\n\nuse Eloquent\\Schemer\\Constraint\\FormatConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass DateTimeFormatConstraint implements FormatConstraintInterface\n{\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitDateTimeFormatConstraint($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/StringValue\/EmailFormatConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\StringValue;\n\nuse Eloquent\\Schemer\\Constraint\\FormatConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass EmailFormatConstraint implements FormatConstraintInterface\n{\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitEmailFormatConstraint($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/StringValue\/HostnameFormatConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\StringValue;\n\nuse Eloquent\\Schemer\\Constraint\\FormatConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass HostnameFormatConstraint implements FormatConstraintInterface\n{\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitHostnameFormatConstraint($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/StringValue\/Ipv4AddressFormatConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\StringValue;\n\nuse Eloquent\\Schemer\\Constraint\\FormatConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass Ipv4AddressFormatConstraint implements FormatConstraintInterface\n{\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitIpv4AddressFormatConstraint($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/StringValue\/Ipv6AddressFormatConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\StringValue;\n\nuse Eloquent\\Schemer\\Constraint\\FormatConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass Ipv6AddressFormatConstraint implements FormatConstraintInterface\n{\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitIpv6AddressFormatConstraint($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/StringValue\/MaximumLengthConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\StringValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass MaximumLengthConstraint implements ConstraintInterface\n{\n    \/**\n     * @param integer $maximum\n     *\/\n    public function __construct($maximum)\n    {\n        $this->maximum = $maximum;\n    }\n\n    \/**\n     * @return integer\n     *\/\n    public function maximum()\n    {\n        return $this->maximum;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitMaximumLengthConstraint($this);\n    }\n\n    private $maximum;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/StringValue\/MinimumLengthConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\StringValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass MinimumLengthConstraint implements ConstraintInterface\n{\n    \/**\n     * @param integer $minimum\n     *\/\n    public function __construct($minimum)\n    {\n        $this->minimum = $minimum;\n    }\n\n    \/**\n     * @return integer\n     *\/\n    public function minimum()\n    {\n        return $this->minimum;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitMinimumLengthConstraint($this);\n    }\n\n    private $minimum;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/StringValue\/PatternConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\StringValue;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass PatternConstraint implements ConstraintInterface\n{\n    \/**\n     * @param string $pattern\n     *\/\n    public function __construct($pattern)\n    {\n        $this->pattern = $pattern;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function pattern()\n    {\n        return $this->pattern;\n    }\n\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitPatternConstraint($this);\n    }\n\n    private $pattern;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/StringValue\/UriFormatConstraint.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\StringValue;\n\nuse Eloquent\\Schemer\\Constraint\\FormatConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nclass UriFormatConstraint implements FormatConstraintInterface\n{\n    \/**\n     * @param ConstraintVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(ConstraintVisitorInterface $visitor)\n    {\n        return $visitor->visitUriFormatConstraint($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Transform\/AbstractConstraintTransform.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Transform;\n\nuse Eloquent\\Schemer\\Constraint\\ArrayValue;\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\DateTimeValue;\nuse Eloquent\\Schemer\\Constraint\\Generic;\nuse Eloquent\\Schemer\\Constraint\\NumberValue;\nuse Eloquent\\Schemer\\Constraint\\ObjectValue;\nuse Eloquent\\Schemer\\Constraint\\Schema;\nuse Eloquent\\Schemer\\Constraint\\StringValue;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\nabstract class AbstractConstraintTransform implements\n    ConstraintTransformInterface,\n    ConstraintVisitorInterface\n{\n    public function __construct()\n    {\n        $this->clear();\n    }\n\n    \/**\n     * @param ConstraintInterface $constraint\n     *\n     * @return ConstraintInterface\n     *\/\n    public function transform(ConstraintInterface $constraint)\n    {\n        $this->clear();\n        $this->setConstraint($constraint);\n        $constraint = $constraint->accept($this);\n        $this->clear();\n\n        return $constraint;\n    }\n\n    \/**\n     * @param Schema $schema\n     *\n     * @return Schema\n     *\/\n    public function visitSchema(Schema $schema)\n    {\n        return new Schema(\n            $this->transformConstraintArray($schema->constraints()),\n            $schema->defaultValue(),\n            $schema->title(),\n            $schema->description()\n        );\n    }\n\n    \/\/ generic constraints =====================================================\n\n    \/**\n     * @param Generic\\EnumConstraint $constraint\n     *\n     * @return Generic\\EnumConstraint\n     *\/\n    public function visitEnumConstraint(Generic\\EnumConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param Generic\\TypeConstraint $constraint\n     *\n     * @return Generic\\TypeConstraint\n     *\/\n    public function visitTypeConstraint(Generic\\TypeConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param Generic\\AllOfConstraint $constraint\n     *\n     * @return Generic\\AllOfConstraint\n     *\/\n    public function visitAllOfConstraint(Generic\\AllOfConstraint $constraint)\n    {\n        return new Generic\\AllOfConstraint(\n            $this->transformConstraintArray($constraint->schemas())\n        );\n    }\n\n    \/**\n     * @param Generic\\AnyOfConstraint $constraint\n     *\n     * @return Generic\\AnyOfConstraint\n     *\/\n    public function visitAnyOfConstraint(Generic\\AnyOfConstraint $constraint)\n    {\n        return new Generic\\AnyOfConstraint(\n            $this->transformConstraintArray($constraint->schemas())\n        );\n    }\n\n    \/**\n     * @param Generic\\OneOfConstraint $constraint\n     *\n     * @return Generic\\OneOfConstraint\n     *\/\n    public function visitOneOfConstraint(Generic\\OneOfConstraint $constraint)\n    {\n        return new Generic\\OneOfConstraint(\n            $this->transformConstraintArray($constraint->schemas())\n        );\n    }\n\n    \/**\n     * @param Generic\\NotConstraint $constraint\n     *\n     * @return Generic\\NotConstraint\n     *\/\n    public function visitNotConstraint(Generic\\NotConstraint $constraint)\n    {\n        return new Generic\\NotConstraint($constraint->schema()->accept($this));\n    }\n\n    \/\/ object constraints ======================================================\n\n    \/**\n     * @param ObjectValue\\MaximumPropertiesConstraint $constraint\n     *\n     * @return ObjectValue\\MaximumPropertiesConstraint\n     *\/\n    public function visitMaximumPropertiesConstraint(ObjectValue\\MaximumPropertiesConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param ObjectValue\\MinimumPropertiesConstraint $constraint\n     *\n     * @return ObjectValue\\MinimumPropertiesConstraint\n     *\/\n    public function visitMinimumPropertiesConstraint(ObjectValue\\MinimumPropertiesConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param ObjectValue\\RequiredConstraint $constraint\n     *\n     * @return ObjectValue\\RequiredConstraint\n     *\/\n    public function visitRequiredConstraint(ObjectValue\\RequiredConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param ObjectValue\\PropertiesConstraint $constraint\n     *\n     * @return ObjectValue\\PropertiesConstraint\n     *\/\n    public function visitPropertiesConstraint(ObjectValue\\PropertiesConstraint $constraint)\n    {\n        return new ObjectValue\\PropertiesConstraint(\n            $this->transformConstraintArray($constraint->schemas()),\n            $this->transformConstraintArray($constraint->patternSchemas()),\n            $constraint->additionalSchema()->accept($this)\n        );\n    }\n\n    \/**\n     * @param ObjectValue\\AdditionalPropertyConstraint $constraint\n     *\n     * @return ObjectValue\\AdditionalPropertyConstraint\n     *\/\n    public function visitAdditionalPropertyConstraint(ObjectValue\\AdditionalPropertyConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param ObjectValue\\DependencyConstraint $constraint\n     *\n     * @return ObjectValue\\DependencyConstraint\n     *\/\n    public function visitDependencyConstraint(ObjectValue\\DependencyConstraint $constraint)\n    {\n        return new ObjectValue\\DependencyConstraint(\n            $constraint->property(),\n            $constraint->schema()->accept($this)\n        );\n    }\n\n    \/\/ array constraints =======================================================\n\n    \/**\n     * @param ArrayValue\\ItemsConstraint $constraint\n     *\n     * @return ArrayValue\\ItemsConstraint\n     *\/\n    public function visitItemsConstraint(ArrayValue\\ItemsConstraint $constraint)\n    {\n        return new ArrayValue\\ItemsConstraint(\n            $this->transformConstraintArray($constraint->schemas()),\n            $constraint->additionalSchema()->accept($this)\n        );\n    }\n\n    \/**\n     * @param ArrayValue\\AdditionalItemConstraint $constraint\n     *\n     * @return ArrayValue\\AdditionalItemConstraint\n     *\/\n    public function visitAdditionalItemConstraint(ArrayValue\\AdditionalItemConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param ArrayValue\\MaximumItemsConstraint $constraint\n     *\n     * @return ArrayValue\\MaximumItemsConstraint\n     *\/\n    public function visitMaximumItemsConstraint(ArrayValue\\MaximumItemsConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param ArrayValue\\MinimumItemsConstraint $constraint\n     *\n     * @return ArrayValue\\MinimumItemsConstraint\n     *\/\n    public function visitMinimumItemsConstraint(ArrayValue\\MinimumItemsConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param ArrayValue\\UniqueItemsConstraint $constraint\n     *\n     * @return ArrayValue\\UniqueItemsConstraint\n     *\/\n    public function visitUniqueItemsConstraint(ArrayValue\\UniqueItemsConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/\/ string constraints ======================================================\n\n    \/**\n     * @param StringValue\\PatternConstraint $constraint\n     *\n     * @return StringValue\\PatternConstraint\n     *\/\n    public function visitPatternConstraint(StringValue\\PatternConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param StringValue\\MaximumLengthConstraint $constraint\n     *\n     * @return StringValue\\MaximumLengthConstraint\n     *\/\n    public function visitMaximumLengthConstraint(StringValue\\MaximumLengthConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param StringValue\\MinimumLengthConstraint $constraint\n     *\n     * @return StringValue\\MinimumLengthConstraint\n     *\/\n    public function visitMinimumLengthConstraint(StringValue\\MinimumLengthConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param StringValue\\DateTimeFormatConstraint $constraint\n     *\n     * @return StringValue\\DateTimeFormatConstraint\n     *\/\n    public function visitDateTimeFormatConstraint(StringValue\\DateTimeFormatConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param StringValue\\EmailFormatConstraint $constraint\n     *\n     * @return StringValue\\EmailFormatConstraint\n     *\/\n    public function visitEmailFormatConstraint(StringValue\\EmailFormatConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param StringValue\\HostnameFormatConstraint $constraint\n     *\n     * @return StringValue\\HostnameFormatConstraint\n     *\/\n    public function visitHostnameFormatConstraint(StringValue\\HostnameFormatConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param StringValue\\Ipv4AddressFormatConstraint $constraint\n     *\n     * @return StringValue\\Ipv4AddressFormatConstraint\n     *\/\n    public function visitIpv4AddressFormatConstraint(StringValue\\Ipv4AddressFormatConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param StringValue\\Ipv6AddressFormatConstraint $constraint\n     *\n     * @return StringValue\\Ipv6AddressFormatConstraint\n     *\/\n    public function visitIpv6AddressFormatConstraint(StringValue\\Ipv6AddressFormatConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param StringValue\\UriFormatConstraint $constraint\n     *\n     * @return StringValue\\UriFormatConstraint\n     *\/\n    public function visitUriFormatConstraint(StringValue\\UriFormatConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/\/ number constraints ======================================================\n\n    \/**\n     * @param NumberValue\\MultipleOfConstraint $constraint\n     *\n     * @return NumberValue\\MultipleOfConstraint\n     *\/\n    public function visitMultipleOfConstraint(NumberValue\\MultipleOfConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param NumberValue\\MaximumConstraint $constraint\n     *\n     * @return NumberValue\\MaximumConstraint\n     *\/\n    public function visitMaximumConstraint(NumberValue\\MaximumConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param NumberValue\\MinimumConstraint $constraint\n     *\n     * @return NumberValue\\MinimumConstraint\n     *\/\n    public function visitMinimumConstraint(NumberValue\\MinimumConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/\/ date-time constraints ===================================================\n\n    \/**\n     * @param DateTimeValue\\MaximumDateTimeConstraint $constraint\n     *\n     * @return DateTimeValue\\MaximumDateTimeConstraint\n     *\/\n    public function visitMaximumDateTimeConstraint(DateTimeValue\\MaximumDateTimeConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param DateTimeValue\\MinimumDateTimeConstraint $constraint\n     *\n     * @return DateTimeValue\\MinimumDateTimeConstraint\n     *\/\n    public function visitMinimumDateTimeConstraint(DateTimeValue\\MinimumDateTimeConstraint $constraint)\n    {\n        return $constraint;\n    }\n\n    \/**\n     * @param array<ConstraintInterface> $constraints\n     *\n     * @return array<ConstraintInterface>\n     *\/\n    protected function transformConstraintArray(array $constraints)\n    {\n        $self = $this;\n\n        return array_map(\n            function (ConstraintInterface $constraint) use ($self) {\n                return $constraint->accept($self);\n            },\n            $constraints\n        );\n    }\n\n    protected function clear()\n    {\n        $this->setConstraint(null);\n    }\n\n    \/**\n     * @param ConstraintInterface|null $constraint\n     *\/\n    protected function setConstraint(ConstraintInterface $constraint = null)\n    {\n        $this->constraint = $constraint;\n    }\n\n    \/**\n     * @return ConstraintInterface|null\n     *\/\n    protected function constraint()\n    {\n        return $this->constraint;\n    }\n\n    private $constraint;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,null,0,null,0,0,0,0,0,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Transform\/ConstraintTransformInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Transform;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\n\ninterface ConstraintTransformInterface\n{\n    \/**\n     * @param ConstraintInterface $constraint\n     *\n     * @return ConstraintInterface\n     *\/\n    public function transform(ConstraintInterface $constraint);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Constraint\/Visitor\/ConstraintVisitorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Constraint\\Visitor;\n\nuse Eloquent\\Schemer\\Constraint\\ArrayValue;\nuse Eloquent\\Schemer\\Constraint\\DateTimeValue;\nuse Eloquent\\Schemer\\Constraint\\Generic;\nuse Eloquent\\Schemer\\Constraint\\NumberValue;\nuse Eloquent\\Schemer\\Constraint\\ObjectValue;\nuse Eloquent\\Schemer\\Constraint\\Schema;\nuse Eloquent\\Schemer\\Constraint\\StringValue;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\n\ninterface ConstraintVisitorInterface\n{\n    \/**\n     * @param Schema $schema\n     *\n     * @return mixed\n     *\/\n    public function visitSchema(Schema $schema);\n\n    \/\/ generic constraints =====================================================\n\n    \/**\n     * @param Generic\\EnumConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitEnumConstraint(Generic\\EnumConstraint $constraint);\n\n    \/**\n     * @param Generic\\TypeConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitTypeConstraint(Generic\\TypeConstraint $constraint);\n\n    \/**\n     * @param Generic\\AllOfConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitAllOfConstraint(Generic\\AllOfConstraint $constraint);\n\n    \/**\n     * @param Generic\\AnyOfConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitAnyOfConstraint(Generic\\AnyOfConstraint $constraint);\n\n    \/**\n     * @param Generic\\OneOfConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitOneOfConstraint(Generic\\OneOfConstraint $constraint);\n\n    \/**\n     * @param Generic\\NotConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitNotConstraint(Generic\\NotConstraint $constraint);\n\n    \/\/ object constraints ======================================================\n\n    \/**\n     * @param ObjectValue\\MaximumPropertiesConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitMaximumPropertiesConstraint(ObjectValue\\MaximumPropertiesConstraint $constraint);\n\n    \/**\n     * @param ObjectValue\\MinimumPropertiesConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitMinimumPropertiesConstraint(ObjectValue\\MinimumPropertiesConstraint $constraint);\n\n    \/**\n     * @param ObjectValue\\RequiredConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitRequiredConstraint(ObjectValue\\RequiredConstraint $constraint);\n\n    \/**\n     * @param ObjectValue\\PropertiesConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitPropertiesConstraint(ObjectValue\\PropertiesConstraint $constraint);\n\n    \/**\n     * @param ObjectValue\\AdditionalPropertyConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitAdditionalPropertyConstraint(ObjectValue\\AdditionalPropertyConstraint $constraint);\n\n    \/**\n     * @param ObjectValue\\DependencyConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitDependencyConstraint(ObjectValue\\DependencyConstraint $constraint);\n\n    \/\/ array constraints =======================================================\n\n    \/**\n     * @param ArrayValue\\ItemsConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitItemsConstraint(ArrayValue\\ItemsConstraint $constraint);\n\n    \/**\n     * @param ArrayValue\\AdditionalItemConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitAdditionalItemConstraint(ArrayValue\\AdditionalItemConstraint $constraint);\n\n    \/**\n     * @param ArrayValue\\MaximumItemsConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitMaximumItemsConstraint(ArrayValue\\MaximumItemsConstraint $constraint);\n\n    \/**\n     * @param ArrayValue\\MinimumItemsConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitMinimumItemsConstraint(ArrayValue\\MinimumItemsConstraint $constraint);\n\n    \/**\n     * @param ArrayValue\\UniqueItemsConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitUniqueItemsConstraint(ArrayValue\\UniqueItemsConstraint $constraint);\n\n    \/\/ string constraints ======================================================\n\n    \/**\n     * @param StringValue\\PatternConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitPatternConstraint(StringValue\\PatternConstraint $constraint);\n\n    \/**\n     * @param StringValue\\MaximumLengthConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitMaximumLengthConstraint(StringValue\\MaximumLengthConstraint $constraint);\n\n    \/**\n     * @param StringValue\\MinimumLengthConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitMinimumLengthConstraint(StringValue\\MinimumLengthConstraint $constraint);\n\n    \/**\n     * @param StringValue\\DateTimeFormatConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitDateTimeFormatConstraint(StringValue\\DateTimeFormatConstraint $constraint);\n\n    \/**\n     * @param StringValue\\EmailFormatConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitEmailFormatConstraint(StringValue\\EmailFormatConstraint $constraint);\n\n    \/**\n     * @param StringValue\\HostnameFormatConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitHostnameFormatConstraint(StringValue\\HostnameFormatConstraint $constraint);\n\n    \/**\n     * @param StringValue\\Ipv4AddressFormatConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitIpv4AddressFormatConstraint(StringValue\\Ipv4AddressFormatConstraint $constraint);\n\n    \/**\n     * @param StringValue\\Ipv6AddressFormatConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitIpv6AddressFormatConstraint(StringValue\\Ipv6AddressFormatConstraint $constraint);\n\n    \/**\n     * @param StringValue\\UriFormatConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitUriFormatConstraint(StringValue\\UriFormatConstraint $constraint);\n\n    \/\/ number constraints ======================================================\n\n    \/**\n     * @param NumberValue\\MultipleOfConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitMultipleOfConstraint(NumberValue\\MultipleOfConstraint $constraint);\n\n    \/**\n     * @param NumberValue\\MaximumConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitMaximumConstraint(NumberValue\\MaximumConstraint $constraint);\n\n    \/**\n     * @param NumberValue\\MinimumConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitMinimumConstraint(NumberValue\\MinimumConstraint $constraint);\n\n    \/\/ date-time constraints ===================================================\n\n    \/**\n     * @param DateTimeValue\\MaximumDateTimeConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitMaximumDateTimeConstraint(DateTimeValue\\MaximumDateTimeConstraint $constraint);\n\n    \/**\n     * @param DateTimeValue\\MinimumDateTimeConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitMinimumDateTimeConstraint(DateTimeValue\\MinimumDateTimeConstraint $constraint);\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Loader\/Content.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Loader;\n\nclass Content\n{\n    \/**\n     * @param string $data\n     * @param string $mimeType\n     *\/\n    public function __construct($data, $mimeType)\n    {\n        $this->data = $data;\n        $this->mimeType = $mimeType;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function data()\n    {\n        return $this->data;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function mimeType()\n    {\n        return $this->mimeType;\n    }\n\n    private $data;\n    private $mimeType;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Loader\/ContentType.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Loader;\n\nuse Eloquent\\Enumeration\\Multiton;\n\nfinal class ContentType extends Multiton\n{\n    \/**\n     * @return array<string>\n     *\/\n    public function mimeTypes()\n    {\n        return $this->mimeTypes;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function primaryMimeType()\n    {\n        $mimeTypes = $this->mimeTypes();\n\n        return $mimeTypes[0];\n    }\n\n    protected static function initializeMultiton()\n    {\n        parent::initializeMultiton();\n\n        new static('JSON', array('application\/json'));\n        new static('TOML', array('application\/x-toml'));\n        new static('YAML', array('application\/x-yaml'));\n    }\n\n    protected function __construct($key, array $mimeTypes)\n    {\n        parent::__construct($key);\n\n        $this->mimeTypes = $mimeTypes;\n    }\n\n    private $mimeTypes;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,0,null,null,null,null,0,null,0,0,0,0,null,null,null,0,null,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Loader\/Data\/DataLoader.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Loader\\Data;\n\nuse Eloquent\\Schemer\\Loader\\Content;\nuse Eloquent\\Schemer\\Loader\\ContentType;\nuse Eloquent\\Schemer\\Loader\\Exception\\InvalidUriTypeException;\nuse Eloquent\\Schemer\\Loader\\LoaderInterface;\nuse Eloquent\\Schemer\\Uri\\DataUriInterface;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\nclass DataLoader implements LoaderInterface\n{\n    \/**\n     * @param string|null $defaultMimeType\n     *\/\n    public function __construct($defaultMimeType = null)\n    {\n        if (null === $defaultMimeType) {\n            $defaultMimeType = ContentType::JSON()->primaryMimeType();\n        }\n\n        $this->defaultMimeType = $defaultMimeType;\n    }\n\n    \/**\n     * @param string $mimeType\n     *\/\n    public function setDefaultMimeType($mimeType)\n    {\n        $this->defaultMimeType = $mimeType;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function defaultMimeType()\n    {\n        return $this->defaultMimeType;\n    }\n\n    \/**\n     * @param UriInterface $uri\n     *\n     * @return Content\n     *\/\n    public function load(UriInterface $uri)\n    {\n        if (!$uri instanceof DataUriInterface) {\n            throw new InvalidUriTypeException(\n                $uri,\n                'Eloquent\\Schemer\\Uri\\DataUriInterface'\n            );\n        }\n\n        return new Content(\n            $uri->getData(),\n            $this->stripMimeTypeParameters($uri->getMimeType())\n        );\n    }\n\n    \/**\n     * @param string $mimeType\n     *\n     * @return string\n     *\/\n    protected function stripMimeTypeParameters($mimeType)\n    {\n        $mimeType = explode(';', $mimeType);\n        $mimeType = trim(array_shift($mimeType));\n\n        return $mimeType;\n    }\n\n    private $defaultMimeType;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,0,0,null,0,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Loader\/Exception\/InvalidUriTypeException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Loader\\Exception;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse Exception;\n\nfinal class InvalidUriTypeException extends Exception\n{\n    \/**\n     * @param UriInterface   $uri\n     * @param string         $expectedClass\n     * @param Exception|null $previous\n     *\/\n    public function __construct(\n        UriInterface $uri,\n        $expectedClass,\n        Exception $previous = null\n    ) {\n        $this->uri = $uri;\n        $this->expectedClass = $expectedClass;\n\n        parent::__construct(\n            sprintf(\n                'Invalid URI of type %s passed. Instance of %s expected',\n                var_export(get_class($uri), true)\n                var_export($expectedClass, true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return UriInterface\n     *\/\n    public function uri()\n    {\n        return $this->uri;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function expectedClass()\n    {\n        return $this->expectedClass;\n    }\n\n    private $uri;\n    private $expectedClass;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Loader\/Exception\/LoadException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Loader\\Exception;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse Exception;\n\nfinal class LoadException extends Exception implements LoadExceptionInterface\n{\n    \/**\n     * @param UriInterface   $uri\n     * @param Exception|null $previous\n     *\/\n    public function __construct(UriInterface $uri, Exception $previous = null)\n    {\n        $this->uri = $uri;\n\n        parent::__construct(\n            sprintf(\n                'Unable to read from %s.',\n                var_export($uri->toString(), true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return UriInterface\n     *\/\n    public function uri()\n    {\n        return $this->uri;\n    }\n\n    private $uri;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Loader\/Exception\/LoadExceptionInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Loader\\Exception;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\ninterface LoadExceptionInterface\n{\n    \/**\n     * @return UriInterface\n     *\/\n    public function uri();\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Loader\/Exception\/RelativeUriException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Loader\\Exception;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse Exception;\n\nfinal class RelativeUriException extends Exception\n{\n    \/**\n     * @param UriInterface   $uri\n     * @param Exception|null $previous\n     *\/\n    public function __construct(UriInterface $uri, Exception $previous = null)\n    {\n        $this->uri = $uri;\n\n        parent::__construct(\n            sprintf(\n                'Unable to read from relative URI %s.',\n                var_export($uri->toString(), true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return UriInterface\n     *\/\n    public function uri()\n    {\n        return $this->uri;\n    }\n\n    private $uri;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Loader\/Exception\/UndefinedLoaderException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Loader\\Exception;\n\nuse Exception;\n\nfinal class UndefinedLoaderException extends Exception\n{\n    \/**\n     * @param string         $scheme\n     * @param Exception|null $previous\n     *\/\n    public function __construct($scheme, Exception $previous = null)\n    {\n        $this->scheme = $scheme;\n\n        parent::__construct(\n            sprintf(\n                'No loader defined for scheme %s.',\n                var_export($scheme, true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function scheme()\n    {\n        return $this->scheme;\n    }\n\n    private $scheme;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Loader\/FileSystem\/ExtensionTypeMap.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Loader\\FileSystem;\n\nuse Eloquent\\Schemer\\Loader\\ContentType;\n\nclass ExtensionTypeMap\n{\n    \/**\n     * @param array<string,string>|null $map\n     * @param string|null               $defaultMimeType\n     *\/\n    public function __construct(array $map = null, $defaultMimeType = null)\n    {\n        if (null === $map) {\n            $jsonType = ContentType::JSON()->primaryMimeType();\n            $tomlType = ContentType::TOML()->primaryMimeType();\n            $yamlType = ContentType::YAML()->primaryMimeType();\n            $map = array(\n                'js' => $jsonType,\n                'json' => $jsonType,\n                'toml' => $tomlType,\n                'tml' => $tomlType,\n                'yaml' => $yamlType,\n                'yml' => $yamlType,\n            );\n        }\n        if (null === $defaultMimeType) {\n            $defaultMimeType = ContentType::JSON()->primaryMimeType();\n        }\n\n        $this->map = $map;\n        $this->defaultMimeType = $defaultMimeType;\n    }\n\n    \/**\n     * @return array<string,string>\n     *\/\n    public function map()\n    {\n        return $this->map;\n    }\n\n    \/**\n     * @param string $extension\n     * @param string $mimeType\n     *\/\n    public function set($extension, $mimeType)\n    {\n        $this->map[$extension] = $mimeType;\n    }\n\n    \/**\n     * @param string $mimeType\n     *\/\n    public function setDefaultMimeType($mimeType)\n    {\n        $this->defaultMimeType = $mimeType;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function defaultMimeType()\n    {\n        return $this->defaultMimeType;\n    }\n\n    \/**\n     * @param string|null $extension\n     *\n     * @return string\n     *\/\n    public function get($extension)\n    {\n        if (null !== $extension && array_key_exists($extension, $this->map)) {\n            return $this->map[$extension];\n        }\n\n        return $this->defaultMimeType();\n    }\n\n    \/**\n     * @param string $path\n     *\n     * @return string\n     *\/\n    public function getByPath($path)\n    {\n        $extension = pathinfo($path, PATHINFO_EXTENSION);\n        if ('' === $extension) {\n            $extension = null;\n        }\n\n        return $this->get($extension);\n    }\n\n    private $map;\n    private $defaultMimeType;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Loader\/FileSystem\/FileSystemLoader.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Loader\\FileSystem;\n\nuse Eloquent\\Schemer\\Loader\\Content;\nuse Eloquent\\Schemer\\Loader\\Exception\\InvalidUriTypeException;\nuse Eloquent\\Schemer\\Loader\\Exception\\LoadException;\nuse Eloquent\\Schemer\\Loader\\LoaderInterface;\nuse Eloquent\\Schemer\\Uri\\FileUriInterface;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse ErrorException;\nuse Icecave\\Isolator\\Isolator;\n\nclass FileSystemLoader implements LoaderInterface\n{\n    \/**\n     * @param ExtensionTypeMap|null $extensionMap\n     * @param Isolator|null         $isolator\n     *\/\n    public function __construct(\n        ExtensionTypeMap $extensionMap = null,\n        Isolator $isolator = null\n    ) {\n        if (null === $extensionMap) {\n            $extensionMap = new ExtensionTypeMap;\n        }\n\n        $this->extensionMap = $extensionMap;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @return ExtensionTypeMap\n     *\/\n    public function extensionMap()\n    {\n        return $this->extensionMap;\n    }\n\n    \/**\n     * @param string $mimeType\n     *\/\n    public function setDefaultMimeType($mimeType)\n    {\n        $this->extensionMap()->setDefaultMimeType($mimeType);\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function defaultMimeType()\n    {\n        return $this->extensionMap()->defaultMimeType();\n    }\n\n    \/**\n     * @param UriInterface $uri\n     *\n     * @return Content\n     * @throws LoadException\n     *\/\n    public function load(UriInterface $uri)\n    {\n        if (!$uri instanceof FileUriInterface) {\n            throw new InvalidUriTypeException(\n                $uri,\n                'Eloquent\\Schemer\\Uri\\FileUriInterface'\n            );\n        }\n\n        $path = $this->pathFromUri($uri);\n\n        try {\n            $data = $this->isolator->file_get_contents($path);\n        } catch (ErrorException $e) {\n            throw new LoadException($uri, $e);\n        }\n\n        return new Content($data, $this->extensionMap()->getByPath($path));\n    }\n\n    \/**\n     * @param FileUri $uri\n     *\n     * @return string\n     *\/\n    protected function pathFromUri(FileUriInterface $uri)\n    {\n        $path = $uri->getPath();\n        if (null === $path) {\n            $path = '';\n        }\n\n        return $path;\n    }\n\n    private $extensionMap;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,null,null,0,null,null,0,0,0,null,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Loader\/Http\/HttpLoader.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Loader\\Http;\n\nuse Buzz\\Browser;\nuse Buzz\\Message\\Response;\nuse Eloquent\\Schemer\\Loader\\Content;\nuse Eloquent\\Schemer\\Loader\\ContentType;\nuse Eloquent\\Schemer\\Loader\\Exception\\InvalidUriTypeException;\nuse Eloquent\\Schemer\\Loader\\Exception\\LoadException;\nuse Eloquent\\Schemer\\Loader\\Exception\\RelativeUriException;\nuse Eloquent\\Schemer\\Loader\\LoaderInterface;\nuse Eloquent\\Schemer\\Uri\\HttpUriInterface;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\nclass HttpLoader implements LoaderInterface\n{\n    \/**\n     * @param string|null  $defaultMimeType\n     * @param Browser|null $browser\n     *\/\n    public function __construct($defaultMimeType = null, Browser $browser = null)\n    {\n        if (null === $defaultMimeType) {\n            $defaultMimeType = ContentType::JSON()->primaryMimeType();\n        }\n        if (null === $browser) {\n            $browser = new Browser;\n        }\n\n        $this->defaultMimeType = $defaultMimeType;\n        $this->browser = $browser;\n    }\n\n    \/**\n     * @param string $mimeType\n     *\/\n    public function setDefaultMimeType($mimeType)\n    {\n        $this->defaultMimeType = $mimeType;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function defaultMimeType()\n    {\n        return $this->defaultMimeType;\n    }\n\n    \/**\n     * @return Browser\n     *\/\n    public function browser()\n    {\n        return $this->browser;\n    }\n\n    \/**\n     * @param UriInterface $uri\n     *\n     * @return Content\n     * @throws LoadException\n     *\/\n    public function load(UriInterface $uri)\n    {\n        if (!$uri instanceof HttpUriInterface) {\n            throw new InvalidUriTypeException(\n                $uri,\n                'Eloquent\\Schemer\\Uri\\HttpUriInterface'\n            );\n        }\n        if (!$uri->isAbsolute()) {\n            throw new RelativeUriException($uri);\n        }\n\n        $response = $this->browser()->get($uri->toString());\n        if (!$response->isSuccessful()) {\n            throw new LoadException($uri);\n        }\n\n        return new Content(\n            $response->getContent(),\n            $this->mimeTypeByResponse($response)\n        );\n    }\n\n    \/**\n     * @param Response $response\n     *\n     * @return string\n     *\/\n    protected function mimeTypeByResponse(Response $response)\n    {\n        $mimeType = $response->getHeader('Content-Type');\n        if (count($mimeType) > 0) {\n            $mimeType = array_pop($mimeType);\n            $mimeType = explode(';', $mimeType);\n            $mimeType = trim(array_shift($mimeType));\n\n            return $mimeType;\n        }\n\n        return $this->defaultMimeType();\n    }\n\n    private $defaultMimeType;\n    private $browser;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,null,0,0,null,null,0,0,0,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,null,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Loader\/Loader.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Loader;\n\nuse Eloquent\\Schemer\\Loader\\ContentType;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\nclass Loader implements LoaderInterface\n{\n    \/**\n     * @param string|null                        $defaultScheme\n     * @param array<string,LoaderInterface>|null $loaders\n     *\/\n    public function __construct($defaultScheme = null, array $loaders = null)\n    {\n        if (null === $defaultScheme) {\n            $defaultScheme = 'file';\n        }\n        if (null === $loaders) {\n            $dataLoader = new Data\\DataLoader;\n            $fileSystemLoader = new FileSystem\\FileSystemLoader;\n            $httpLoader = new Http\\HttpLoader;\n            $loaders = array(\n                'data' => $dataLoader,\n                'file' => $fileSystemLoader,\n                'http' => $httpLoader,\n                'https' => $httpLoader,\n            );\n        }\n\n        $this->defaultScheme = $defaultScheme;\n        $this->loaders = $loaders;\n    }\n\n    \/**\n     * @param string $defaultScheme\n     *\/\n    public function setDefaultScheme($defaultScheme)\n    {\n        $this->defaultScheme = $defaultScheme;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function defaultScheme()\n    {\n        return $this->defaultScheme;\n    }\n\n    \/**\n     * @param string          $scheme\n     * @param LoaderInterface $loader\n     *\/\n    public function setLoader($scheme, LoaderInterface $loader)\n    {\n        $this->loaders[$scheme] = $loader;\n    }\n\n    \/**\n     * @return array<string,LoaderInterface>\n     *\/\n    public function loaders()\n    {\n        return $thia->loaders;\n    }\n\n    \/**\n     * @param string $scheme\n     *\n     * @return LoaderInterface\n     * @throws Exception\\UndefinedLoaderException\n     *\/\n    public function loaderByScheme($scheme)\n    {\n        if (!array_key_exists($scheme, $this->loaders)) {\n            throw new Exception\\UndefinedLoaderException($scheme);\n        }\n\n        return $this->loaders[$scheme];\n    }\n\n    \/**\n     * @param string $defaultMimeType\n     *\/\n    public function setDefaultMimeType($mimeType)\n    {\n        foreach ($this->loaders() as $loader) {\n            $loader->setDefaultMimeType($mimeType);\n        }\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function defaultMimeType()\n    {\n        foreach ($this->loaders() as $loader) {\n            return $loader->defaultMimeType();\n        }\n\n        return ContentType::JSON()->primaryMimeType();\n    }\n\n    \/**\n     * @param UriInterface $uri\n     *\n     * @return \\Eloquent\\Schemer\\Loader\\Content\n     * @throws Exception\\UndefinedLoaderException\n     * @throws Exception\\LoadExceptionInterface\n     *\/\n    public function load(UriInterface $uri)\n    {\n        $scheme = $uri->getScheme();\n        if (null === $scheme) {\n            $scheme = $this->defaultScheme();\n        }\n\n        return $this->loaderByScheme($scheme)->load($uri);\n    }\n\n    private $defaultScheme;\n    private $loaders;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,null,0,0,0,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,0,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Loader\/LoaderInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Loader;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\ninterface LoaderInterface\n{\n    \/**\n     * @param string $mimeType\n     *\/\n    public function setDefaultMimeType($mimeType);\n\n    \/**\n     * @return string\n     *\/\n    public function defaultMimeType();\n\n    \/**\n     * @param UriInterface $uri\n     *\n     * @return Content\n     * @throws Exception\\LoadExceptionInterface\n     *\/\n    public function load(UriInterface $uri);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Pointer\/Exception\/InvalidPointerException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Pointer\\Exception;\n\nuse Exception;\n\nfinal class InvalidPointerException extends Exception\n{\n    \/**\n     * @param string         $pointer\n     * @param Exception|null $previous\n     *\/\n    public function __construct($pointer, Exception $previous = null)\n    {\n        $this->pointer = $pointer;\n\n        parent::__construct(\n            sprintf('Invalid pointer %s.', var_export($pointer, true)),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function pointer()\n    {\n        return $this->pointer;\n    }\n\n    private $pointer;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,null,0,0,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Pointer\/Exception\/NoParentException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Pointer\\Exception;\n\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\nuse Exception;\n\nfinal class NoParentException extends Exception\n{\n    \/**\n     * @param PointerInterface $pointer\n     * @param Exception|null   $previous\n     *\/\n    public function __construct(\n        PointerInterface $pointer,\n        Exception $previous = null\n    ) {\n        $this->pointer = $pointer;\n\n        parent::__construct(\n            sprintf(\n                'The pointer %s has no parent.',\n                var_export($pointer->string(), true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return PointerInterface\n     *\/\n    public function pointer()\n    {\n        return $this->pointer;\n    }\n\n    private $pointer;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Pointer\/Pointer.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Pointer;\n\nclass Pointer implements PointerInterface\n{\n    \/**\n     * @param array<string>|null $atoms\n     *\/\n    public function __construct(array $atoms = null)\n    {\n        if (null === $atoms) {\n            $atoms = array();\n        }\n\n        $this->atoms = $atoms;\n    }\n\n    \/**\n     * @return array<string>\n     *\/\n    public function atoms()\n    {\n        return $this->atoms;\n    }\n\n    \/**\n     * @return string|null\n     *\/\n    public function lastAtom()\n    {\n        if (!$this->hasAtoms()) {\n            return null;\n        }\n\n        $atoms = $this->atoms();\n\n        return array_pop($atoms);\n    }\n\n    \/**\n     * @return boolean\n     *\/\n    public function hasAtoms()\n    {\n        return count($this->atoms) > 0;\n    }\n\n    \/**\n     * @param PointerInterface $pointer\n     *\n     * @return PointerInterface\n     *\/\n    public function join(PointerInterface $pointer)\n    {\n        return new static(array_merge($this->atoms(), $pointer->atoms()));\n    }\n\n    \/**\n     * @param string     $atom\n     * @param string,... $additionalAtoms\n     *\n     * @return PointerInterface\n     *\/\n    public function joinAtoms($atom)\n    {\n        return $this->joinAtomSequence(func_get_args());\n    }\n\n    \/**\n     * @param mixed<string> $atoms\n     *\n     * @return PointerInterface\n     *\/\n    public function joinAtomSequence($atoms)\n    {\n        $newAtoms = $this->atoms();\n        foreach ($atoms as $atom) {\n            array_push($newAtoms, $atom);\n        }\n\n        return new static($newAtoms);\n    }\n\n    \/**\n     * @return PointerInterface\n     *\/\n    public function parent()\n    {\n        if (!$this->hasAtoms()) {\n            throw new Exception\\NoParentException($this);\n        }\n        $atoms = $this->atoms();\n        array_pop($atoms);\n\n        return new static($atoms);\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function string()\n    {\n        if (!$this->hasAtoms()) {\n            return '';\n        }\n\n        return sprintf(\n            '\/%s',\n            implode(\n                '\/',\n                array_map(\n                    function($value) {\n                        return strtr($value, array('~' => '~0', '\/' => '~1'));\n                    },\n                    $this->atoms()\n                )\n            )\n        );\n    }\n\n    private $atoms;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,0,0,null,3,3,null,null,null,null,null,null,2,null,null,null,null,null,null,null,0,0,null,null,0,null,0,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,null,null,null,null,null,0,0,null,0,0,null,0,null,null,null,null,null,null,null,3,1,null,null,2,2,2,2,2,null,2,2,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Pointer\/PointerFactory.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Pointer;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\nclass PointerFactory implements PointerFactoryInterface\n{\n    \/**\n     * @param string|null $pointer\n     *\n     * @return PointerInterface\n     *\/\n    public function create($pointer = null)\n    {\n        if (null === $pointer) {\n            return new Pointer;\n        }\n\n        return new Pointer($this->parseAtoms($pointer));\n    }\n\n    \/**\n     * @param UriInterface $uri\n     *\n     * @return PointerInterface\n     *\/\n    public function createFromUri(UriInterface $uri)\n    {\n        $pointer = $uri->getFragment();\n        if (null === $pointer || '\/' !== substr($pointer, 0, 1)) {\n            return new Pointer;\n        }\n\n        return $this->create($pointer);\n    }\n\n    \/**\n     * @param string $pointer\n     *\n     * @return array<string>\n     *\/\n    protected function parseAtoms($pointer)\n    {\n        $atoms = explode('\/', $pointer);\n\n        if ('' !== $atoms[0]) {\n            throw new Exception\\InvalidPointerException($pointer);\n        }\n        array_shift($atoms);\n\n        foreach ($atoms as $index => $atom) {\n            $atoms[$index] = $this->parseAtom($atom);\n        }\n\n        return $atoms;\n    }\n\n    \/**\n     * @param string $atom\n     *\n     * @return string\n     *\/\n    protected function parseAtom($pointer)\n    {\n        return strtr($pointer, array('~0' => '~', '~1' => '\/'));\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,0,null,null,4,null,null,null,null,null,null,null,null,null,0,0,0,null,null,0,null,null,null,null,null,null,null,null,null,4,null,4,1,null,3,null,3,2,3,null,3,null,null,null,null,null,null,null,null,null,2,null,null]},{"name":"Eloquent\/Schemer\/Pointer\/PointerFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Pointer;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\ninterface PointerFactoryInterface\n{\n    \/**\n     * @param string|null $pointer\n     *\n     * @return PointerInterface\n     *\/\n    public function create($pointer = null);\n\n    \/**\n     * @param UriInterface $uri\n     *\n     * @return PointerInterface\n     *\/\n    public function createFromUri(UriInterface $uri);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Pointer\/PointerInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Pointer;\n\ninterface PointerInterface\n{\n    \/**\n     * @return array<string>\n     *\/\n    public function atoms();\n\n    \/**\n     * @return boolean\n     *\/\n    public function hasAtoms();\n\n    \/**\n     * @param PointerInterface $pointer\n     *\n     * @return PointerInterface\n     *\/\n    public function join(PointerInterface $pointer);\n\n    \/**\n     * @param string     $atom\n     * @param string,... $additionalAtoms\n     *\n     * @return PointerInterface\n     *\/\n    public function joinAtoms($atom);\n\n    \/**\n     * @param mixed<string> $atoms\n     *\n     * @return PointerInterface\n     *\/\n    public function joinAtomSequence($atoms);\n\n    \/**\n     * @return PointerInterface\n     *\/\n    public function parent();\n\n    \/**\n     * @return string\n     *\/\n    public function string();\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Pointer\/Resolver\/Exception\/UndefinedValueException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Pointer\\Resolver\\Exception;\n\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\nuse Exception;\n\nfinal class UndefinedValueException extends Exception\n{\n    \/**\n     * @param PointerInterface $pointer\n     * @param Exception|null   $previous\n     *\/\n    public function __construct(\n        PointerInterface $pointer,\n        Exception $previous = null\n    ) {\n        $this->pointer = $pointer;\n\n        parent::__construct(\n            sprintf(\n                \"No value defined for pointer %s.\",\n                var_export($pointer->string(), true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return PointerInterface\n     *\/\n    public function pointer()\n    {\n        return $this->pointer;\n    }\n\n    private $pointer;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Pointer\/Resolver\/PointerResolver.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Pointer\\Resolver;\n\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\nuse Eloquent\\Schemer\\Value\\ArrayValue;\nuse Eloquent\\Schemer\\Value\\ObjectValue;\nuse Eloquent\\Schemer\\Value\\ValueInterface;\n\nclass PointerResolver implements PointerResolverInterface\n{\n    \/**\n     * @param PointerInterface $pointer\n     * @param ValueInterface   $value\n     *\n     * @return ValueInterface|null\n     *\/\n    public function resolve(PointerInterface $pointer, ValueInterface $value)\n    {\n        if (!$pointer->hasAtoms()) {\n            return $value;\n        }\n\n        $atoms = $pointer->atoms();\n\n        return $this->resolveAtoms($pointer, $atoms, $value);\n    }\n\n    \/**\n     * @param PointerInterface $pointer\n     * @param array<string>    &$atoms\n     * @param ValueInterface   $value\n     *\n     * @return ValueInterface|null\n     *\/\n    protected function resolveAtoms(\n        PointerInterface $pointer,\n        array &$atoms,\n        ValueInterface $value\n    ) {\n        $atom = array_shift($atoms);\n\n        if ($value instanceof ObjectValue) {\n            $value = $this->resolveObject($pointer, $atom, $value);\n        } elseif ($value instanceof ArrayValue) {\n            $value = $this->resolveArray($pointer, $atom, $value);\n        } else {\n            return null;\n        }\n\n        if (count($atoms) > 0) {\n            return $this->resolveAtoms($pointer, $atoms, $value);\n        }\n\n        return $value;\n    }\n\n    \/**\n     * @param PointerInterface $pointer\n     * @param string           $atom\n     * @param ObjectValue      $value\n     *\n     * @return ValueInterface|null\n     *\/\n    protected function resolveObject(\n        PointerInterface $pointer,\n        $atom,\n        ObjectValue $value\n    ) {\n        if (!$value->has($atom)) {\n            return null;\n        }\n\n        return $value->get($atom);\n    }\n\n    \/**\n     * @param PointerInterface $pointer\n     * @param string           $atom\n     * @param ArrayValue       $value\n     *\n     * @return ValueInterface|null\n     *\/\n    protected function resolveArray(\n        PointerInterface $pointer,\n        $atom,\n        ArrayValue $value\n    ) {\n        if (!ctype_digit($atom)) {\n            return null;\n        }\n        $atom = intval($atom);\n\n        if (!$value->has($atom)) {\n            return null;\n        }\n\n        return $value->get($atom);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12,1,null,null,11,null,11,null,null,null,null,null,null,null,null,null,null,null,null,null,null,11,null,11,11,11,1,1,0,null,null,11,1,null,null,11,null,null,null,null,null,null,null,null,null,null,null,null,null,null,11,0,null,null,11,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,0,null,1,null,1,0,null,null,1,null,null]},{"name":"Eloquent\/Schemer\/Pointer\/Resolver\/PointerResolverInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Pointer\\Resolver;\n\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\nuse Eloquent\\Schemer\\Value\\ValueInterface;\n\ninterface PointerResolverInterface\n{\n    \/**\n     * @param PointerInterface $pointer\n     * @param ValueInterface   $value\n     *\n     * @return ValueInterface|null\n     *\/\n    public function resolve(PointerInterface $pointer, ValueInterface $value);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reader\/AbstractReader.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reader;\n\nuse Eloquent\\Schemer\\Loader\\ContentType;\nuse Eloquent\\Schemer\\Uri\\UriFactory;\nuse Eloquent\\Schemer\\Uri\\UriFactoryInterface;\n\nabstract class AbstractReader implements ReaderInterface\n{\n    \/**\n     * @param UriFactoryInterface|null $uriFactory\n     *\/\n    public function __construct(UriFactoryInterface $uriFactory = null)\n    {\n        if (null === $uriFactory) {\n            $uriFactory = new UriFactory;\n        }\n\n        $this->uriFactory = $uriFactory;\n    }\n\n    \/**\n     * @return UriFactoryInterface\n     *\/\n    public function uriFactory()\n    {\n        return $this->uriFactory;\n    }\n\n    \/**\n     * @param string      $path\n     * @param string|null $mimeType\n     *\n     * @return \\Eloquent\\Schemer\\Value\\ValueInterface\n     *\/\n    public function readPath($path, $mimeType = null)\n    {\n        return $this->read($this->uriFactory()->fromPath($path), $mimeType);\n    }\n\n    \/**\n     * @param string      $data\n     * @param string|null $mimeType\n     *\n     * @return \\Eloquent\\Schemer\\Value\\ValueInterface\n     *\/\n    public function readString($data, $mimeType = null)\n    {\n        if (null === $mimeType) {\n            $mimeType = ContentType::JSON()->primaryMimeType();\n        }\n\n        return $this->read($this->uriFactory()->fromData($data, $mimeType), $mimeType);\n    }\n\n    private $uriFactory;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reader\/AbstractResolvingReader.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reader;\n\nuse Eloquent\\Schemer\\Reference\\ReferenceResolverFactoryInterface;\nuse Eloquent\\Schemer\\Uri\\UriFactory;\nuse Eloquent\\Schemer\\Uri\\UriFactoryInterface;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse Eloquent\\Schemer\\Value;\n\nabstract class AbstractResolvingReader extends AbstractReader\n{\n    \/**\n     * @param ReferenceResolverFactoryInterface $resolverFactory\n     * @param ReaderInterface|null              $reader\n     * @param UriFactoryInterface|null          $uriFactory\n     *\/\n    public function __construct(\n        ReferenceResolverFactoryInterface $resolverFactory,\n        ReaderInterface $reader = null,\n        UriFactoryInterface $uriFactory = null\n    ) {\n        parent::__construct($uriFactory);\n\n        if (null === $reader) {\n            $reader = new Reader;\n        }\n\n        $this->resolverFactory = $resolverFactory;\n        $this->reader = $reader;\n    }\n\n    \/**\n     * @return ReferenceResolverFactoryInterface\n     *\/\n    public function resolverFactory()\n    {\n        return $this->resolverFactory;\n    }\n\n    \/**\n     * @return ReaderInterface\n     *\/\n    public function reader()\n    {\n        return $this->reader;\n    }\n\n    \/**\n     * @param UriInterface|string $uri\n     * @param string|null         $mimeType\n     *\n     * @return Value\\ValueInterface\n     *\/\n    public function read($uri, $mimeType = null)\n    {\n        if (!$uri instanceof UriInterface) {\n            $uri = $this->uriFactory()->create($uri);\n        }\n        $resolver = $this->resolverFactory()->create($uri);\n\n        return $resolver->transform(\n            $this->reader()->read($uri, $mimeType)\n        );\n    }\n\n    private $resolverFactory;\n    private $reader;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,null,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reader\/FixedScopeResolvingReader.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reader;\n\nuse Eloquent\\Schemer\\Reference\\FixedScopeReferenceResolverFactory;\nuse Eloquent\\Schemer\\Reference\\ReferenceResolverFactoryInterface;\nuse Eloquent\\Schemer\\Uri\\UriFactoryInterface;\n\nclass FixedScopeResolvingReader extends AbstractResolvingReader\n{\n    \/**\n     * @param ReferenceResolverFactoryInterface|null $resolverFactory\n     * @param ReaderInterface|null                   $reader\n     * @param UriFactoryInterface|null               $uriFactory\n     *\/\n    public function __construct(\n        ReferenceResolverFactoryInterface $resolverFactory = null,\n        ReaderInterface $reader = null,\n        UriFactoryInterface $uriFactory = null\n    ) {\n        if (null === $resolverFactory) {\n            $resolverFactory = new FixedScopeReferenceResolverFactory;\n        }\n\n        parent::__construct($resolverFactory, $reader, $uriFactory);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,0,0,null]},{"name":"Eloquent\/Schemer\/Reader\/Reader.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reader;\n\nuse Eloquent\\Schemer\\Loader\\Loader;\nuse Eloquent\\Schemer\\Loader\\LoaderInterface;\nuse Eloquent\\Schemer\\Serialization\\ProtocolMap;\nuse Eloquent\\Schemer\\Uri\\UriFactory;\nuse Eloquent\\Schemer\\Uri\\UriFactoryInterface;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse Eloquent\\Schemer\\Value;\n\nclass Reader extends AbstractReader\n{\n    \/**\n     * @param LoaderInterface|null                     $loader\n     * @param ProtocolMap|null                         $protocolMap\n     * @param Value\\Factory\\ValueFactoryInterface|null $valueFactory\n     * @param UriFactoryInterface|null                 $uriFactory\n     *\/\n    public function __construct(\n        LoaderInterface $loader = null,\n        ProtocolMap $protocolMap = null,\n        Value\\Factory\\ValueFactoryInterface $valueFactory = null,\n        UriFactoryInterface $uriFactory = null\n    ) {\n        parent::__construct($uriFactory);\n\n        if (null === $loader) {\n            $loader = new Loader;\n        }\n        if (null === $protocolMap) {\n            $protocolMap = new ProtocolMap;\n        }\n        if (null === $valueFactory) {\n            $valueFactory = new Value\\Factory\\ValueFactory;\n        }\n\n        $this->loader = $loader;\n        $this->protocolMap = $protocolMap;\n        $this->valueFactory = $valueFactory;\n    }\n\n    \/**\n     * @return LoaderInterface\n     *\/\n    public function loader()\n    {\n        return $this->loader;\n    }\n\n    \/**\n     * @return ProtocolMap\n     *\/\n    public function protocolMap()\n    {\n        return $this->protocolMap;\n    }\n\n    \/**\n     * @return Value\\Factory\\ValueFactoryInterface\n     *\/\n    public function valueFactory()\n    {\n        return $this->valueFactory;\n    }\n\n    \/**\n     * @param UriInterface|string $uri\n     * @param string|null         $mimeType\n     *\n     * @return Value\\ValueInterface\n     *\/\n    public function read($uri, $mimeType = null)\n    {\n        if (!$uri instanceof UriInterface) {\n            $uri = $this->uriFactory()->create($uri);\n        }\n\n        $content = $this->loader()->load($uri);\n        if (null === $mimeType) {\n            $mimeType = $content->mimeType();\n        }\n\n        $value = $this->protocolMap()->get($mimeType)->thaw($content->data());\n\n        return $this->valueFactory()->create($value);\n    }\n\n    private $loader;\n    private $protocolMap;\n    private $valueFactory;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,3,null,3,3,3,3,3,3,3,3,3,null,3,3,3,3,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,null,3,0,0,null,3,3,0,0,null,3,null,3,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reader\/ReaderInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reader;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse Eloquent\\Schemer\\Value\\ValueInterface;\n\ninterface ReaderInterface\n{\n    \/**\n     * @param UriInterface|string $uri\n     * @param string|null         $mimeType\n     *\n     * @return ValueInterface\n     *\/\n    public function read($uri, $mimeType = null);\n\n    \/**\n     * @param string      $path\n     * @param string|null $mimeType\n     *\n     * @return ValueInterface\n     *\/\n    public function readPath($path, $mimeType = null);\n\n    \/**\n     * @param string      $data\n     * @param string|null $mimeType\n     *\n     * @return ValueInterface\n     *\/\n    public function readString($data, $mimeType = null);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reader\/SwitchingScopeResolvingReader.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reader;\n\nuse Eloquent\\Schemer\\Reference\\ReferenceResolverFactoryInterface;\nuse Eloquent\\Schemer\\Reference\\SwitchingScopeReferenceResolverFactory;\nuse Eloquent\\Schemer\\Uri\\UriFactoryInterface;\n\nclass SwitchingScopeResolvingReader extends AbstractResolvingReader\n{\n    \/**\n     * @param ReferenceResolverFactoryInterface|null $resolverFactory\n     * @param ReaderInterface|null                   $reader\n     * @param UriFactoryInterface|null               $uriFactory\n     *\/\n    public function __construct(\n        ReferenceResolverFactoryInterface $resolverFactory = null,\n        ReaderInterface $reader = null,\n        UriFactoryInterface $uriFactory = null\n    ) {\n        if (null === $resolverFactory) {\n            $resolverFactory = new SwitchingScopeReferenceResolverFactory;\n        }\n\n        parent::__construct($resolverFactory, $reader, $uriFactory);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,null]},{"name":"Eloquent\/Schemer\/Reader\/ValidatingReader.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reader;\n\nuse Eloquent\\Schemer\\Uri\\UriFactory;\nuse Eloquent\\Schemer\\Uri\\UriFactoryInterface;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse Eloquent\\Schemer\\Validation\\BoundConstraintValidatorInterface;\nuse Eloquent\\Schemer\\Validation\\Exception\\InvalidValueException;\nuse Eloquent\\Schemer\\Value;\n\nclass ValidatingReader extends AbstractReader\n{\n    \/**\n     * @param BoundConstraintValidatorInterface $validator\n     * @param ReaderInterface|null              $reader\n     * @param UriFactoryInterface|null          $uriFactory\n     *\/\n    public function __construct(\n        BoundConstraintValidatorInterface $validator,\n        ReaderInterface $reader = null,\n        UriFactoryInterface $uriFactory = null\n    ) {\n        parent::__construct($uriFactory);\n\n        if (null === $reader) {\n            $reader = new FixedScopeResolvingReader;\n        }\n\n        $this->validator = $validator;\n        $this->reader = $reader;\n    }\n\n    \/**\n     * @return BoundConstraintValidatorInterface\n     *\/\n    public function validator()\n    {\n        return $this->validator;\n    }\n\n    \/**\n     * @return ReaderInterface\n     *\/\n    public function reader()\n    {\n        return $this->reader;\n    }\n\n    \/**\n     * @param UriInterface|string $uri\n     * @param string|null         $mimeType\n     *\n     * @return Value\\ValueInterface\n     *\/\n    public function read($uri, $mimeType = null)\n    {\n        $value = $this->reader()->read($uri, $mimeType);\n        $result = $this->validator()->validate($value);\n        if (!$result->isValid()) {\n            throw new InvalidValueException(\n                $value,\n                $this->validator()->constraint(),\n                $result\n            );\n        }\n\n        return $value;\n    }\n\n    private $validator;\n    private $reader;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,0,0,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,null,0,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reference\/Exception\/MappingExistsException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reference\\Exception;\n\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\nuse Exception;\n\nfinal class MappingExistsException extends Exception\n{\n    \/**\n     * @param PointerInterface $pointer\n     * @param Exception|null   $previous\n     *\/\n    public function __construct(\n        PointerInterface $pointer,\n        Exception $previous = null\n    ) {\n        $this->pointer = $pointer;\n\n        parent::__construct(\n            sprintf(\n                'Mapping already exists at pointer %s.',\n                var_export($pointer->string(), true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return PointerInterface\n     *\/\n    public function pointer()\n    {\n        return $this->pointer;\n    }\n\n    private $pointer;\n    private $context;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reference\/Exception\/UndefinedReferenceException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reference\\Exception;\n\nuse Eloquent\\Schemer\\Value\\ReferenceValue;\nuse Exception;\n\nfinal class UndefinedReferenceException extends Exception\n{\n    \/**\n     * @param ReferenceValue $reference\n     * @param string|null    $context\n     * @param Exception|null $previous\n     *\/\n    public function __construct(\n        ReferenceValue $reference,\n        $context = null,\n        Exception $previous = null\n    ) {\n        $this->reference = $reference;\n        $this->context = $context;\n\n        if (null === $context) {\n            $message = sprintf(\n                \"Unable to resolve reference %s.\",\n                var_export($reference->uri()->toString(), true)\n            );\n        } else {\n            $message = sprintf(\n                \"Unable to resolve reference %s from within context %s.\",\n                var_export($reference->uri()->toString(), true),\n                var_export($context, true)\n            );\n        }\n\n        parent::__construct($message, 0, $previous);\n    }\n\n    \/**\n     * @return ReferenceValue\n     *\/\n    public function reference()\n    {\n        return $this->reference;\n    }\n\n    \/**\n     * @return string|null\n     *\/\n    public function context()\n    {\n        return $this->context;\n    }\n\n    private $reference;\n    private $context;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reference\/Exception\/UndefinedUriException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reference\\Exception;\n\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\nuse Exception;\n\nfinal class UndefinedUriException extends Exception\n{\n    \/**\n     * @param PointerInterface $pointer\n     * @param Exception|null   $previous\n     *\/\n    public function __construct(\n        PointerInterface $pointer,\n        Exception $previous = null\n    ) {\n        $this->pointer = $pointer;\n\n        parent::__construct(\n            sprintf(\n                'No URI defined for pointer %s.',\n                var_export($pointer->string(), true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return PointerInterface\n     *\/\n    public function pointer()\n    {\n        return $this->pointer;\n    }\n\n    private $pointer;\n    private $context;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reference\/FixedResolutionScopeMapFactory.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reference;\n\nuse Eloquent\\Schemer\\Pointer\\PointerFactory;\nuse Eloquent\\Schemer\\Pointer\\PointerFactoryInterface;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse Eloquent\\Schemer\\Value;\n\nclass FixedResolutionScopeMapFactory extends Value\\Visitor\\AbstractValueVisitor implements\n    ResolutionScopeMapFactoryInterface\n{\n    \/**\n     * @param PointerFactoryInterface|null $pointerFactory\n     *\/\n    public function __construct(PointerFactoryInterface $pointerFactory = null)\n    {\n        if (null === $pointerFactory) {\n            $pointerFactory = new PointerFactory;\n        }\n\n        $this->pointerFactory = $pointerFactory;\n    }\n\n    \/**\n     * @return PointerFactoryInterface\n     *\/\n    public function pointerFactory()\n    {\n        return $this->pointerFactory;\n    }\n\n    \/**\n     * @param UriInterface         $baseUri\n     * @param Value\\ValueInterface $value\n     *\n     * @return ResolutionScopeMap\n     *\/\n    public function create(UriInterface $baseUri, Value\\ValueInterface $value)\n    {\n        return new ResolutionScopeMap(\n            array(\n                array($this->pointerFactory()->create(), $baseUri),\n            ),\n            $value\n        );\n    }\n\n    private $pointerFactory;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Reference\/FixedScopeReferenceResolverFactory.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reference;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\nclass FixedScopeReferenceResolverFactory implements ReferenceResolverFactoryInterface\n{\n    \/**\n     * @param UriInterface $baseUri\n     *\n     * @return ReferenceResolver\n     *\/\n    public function create(UriInterface $baseUri)\n    {\n        return new ReferenceResolver($baseUri);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null]},{"name":"Eloquent\/Schemer\/Reference\/ReferenceResolver.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reference;\n\nuse Eloquent\\Schemer\\Pointer\\PointerFactory;\nuse Eloquent\\Schemer\\Pointer\\PointerFactoryInterface;\nuse Eloquent\\Schemer\\Pointer\\Resolver\\PointerResolver;\nuse Eloquent\\Schemer\\Pointer\\Resolver\\PointerResolverInterface;\nuse Eloquent\\Schemer\\Reader\\Reader;\nuse Eloquent\\Schemer\\Reader\\ReaderInterface;\nuse Eloquent\\Schemer\\Uri\\Resolver\\UriResolver;\nuse Eloquent\\Schemer\\Uri\\Resolver\\UriResolverInterface;\nuse Eloquent\\Schemer\\Uri\\UriFactory;\nuse Eloquent\\Schemer\\Uri\\UriFactoryInterface;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse Eloquent\\Schemer\\Value;\n\nclass ReferenceResolver extends Value\\Transform\\AbstractValueTransform\n{\n    \/**\n     * @param UriInterface                            $baseUri\n     * @param ResolutionScopeMapFactoryInterface|null $scopeMapFactory\n     * @param UriResolverInterface|null               $uriResolver\n     * @param ReaderInterface|null                    $reader\n     * @param UriFactoryInterface|null                $uriFactory\n     * @param PointerFactoryInterface|null            $pointerFactory\n     * @param PointerResolverInterface|null           $pointerResolver\n     * @param Value\\ValueTransformInterface|null      $placeholderUnwrap\n     *\/\n    public function __construct(\n        UriInterface $baseUri,\n        ResolutionScopeMapFactoryInterface $scopeMapFactory = null,\n        UriResolverInterface $uriResolver = null,\n        ReaderInterface $reader = null,\n        UriFactoryInterface $uriFactory = null,\n        PointerFactoryInterface $pointerFactory = null,\n        PointerResolverInterface $pointerResolver = null,\n        Value\\ValueTransformInterface $placeholderUnwrap = null\n    ) {\n        parent::__construct();\n\n        if (null === $scopeMapFactory) {\n            $scopeMapFactory = new FixedResolutionScopeMapFactory;\n        }\n        if (null === $uriResolver) {\n            $uriResolver = new UriResolver;\n        }\n        if (null === $reader) {\n            $reader = new Reader;\n        }\n        if (null === $uriFactory) {\n            $uriFactory = new UriFactory;\n        }\n        if (null === $pointerFactory) {\n            $pointerFactory = new PointerFactory;\n        }\n        if (null === $pointerResolver) {\n            $pointerResolver = new PointerResolver;\n        }\n        if (null === $placeholderUnwrap) {\n            $placeholderUnwrap = new Value\\Transform\\PlaceholderUnwrapTransform;\n        }\n\n        $this->baseUri = $baseUri;\n        $this->scopeMapFactory = $scopeMapFactory;\n        $this->uriResolver = $uriResolver;\n        $this->reader = $reader;\n        $this->uriFactory = $uriFactory;\n        $this->pointerFactory = $pointerFactory;\n        $this->pointerResolver = $pointerResolver;\n        $this->placeholderUnwrap = $placeholderUnwrap;\n    }\n\n    \/**\n     * @return UriInterface\n     *\/\n    public function baseUri()\n    {\n        return $this->baseUri;\n    }\n\n    \/**\n     * @return ResolutionScopeMapFactoryInterface\n     *\/\n    public function scopeMapFactory()\n    {\n        return $this->scopeMapFactory;\n    }\n\n    \/**\n     * @return UriResolverInterface\n     *\/\n    public function uriResolver()\n    {\n        return $this->uriResolver;\n    }\n\n    \/**\n     * @return Reader\n     *\/\n    public function reader()\n    {\n        return $this->reader;\n    }\n\n    \/**\n     * @return UriFactoryInterface\n     *\/\n    public function uriFactory()\n    {\n        return $this->uriFactory;\n    }\n\n    \/**\n     * @return PointerFactoryInterface\n     *\/\n    public function pointerFactory()\n    {\n        return $this->pointerFactory;\n    }\n\n    \/**\n     * @return PointerResolverInterface\n     *\/\n    public function pointerResolver()\n    {\n        return $this->pointerResolver;\n    }\n\n    \/**\n     * @return Value\\ValueTransformInterface\n     *\/\n    public function placeholderUnwrap()\n    {\n        return $this->placeholderUnwrap;\n    }\n\n    \/**\n     * @param Value\\ValueInterface $value\n     *\n     * @return Value\\ConcreteValueInterface\n     *\/\n    public function transform(Value\\ValueInterface $value)\n    {\n        return $this->placeholderUnwrap()->transform(parent::transform($value));\n    }\n\n    \/**\n     * @param Value\\ReferenceValue $reference\n     *\n     * @return Value\\PlaceholderValue\n     * @throws Exception\\UndefinedReferenceException\n     *\/\n    public function visitReferenceValue(Value\\ReferenceValue $reference)\n    {\n        $referenceUri = $this->uriResolver()->resolve(\n            $reference->uri(),\n            $this->currentBaseUri()\n        );\n\n        $resolution = $this->resolution($referenceUri);\n        if (null !== $resolution) {\n            return $resolution;\n        }\n        $resolution = $this->startResolution($referenceUri);\n\n        if (!$value = $this->resolveInline($referenceUri, $reference)) {\n            $value = $this->resolveExternal($referenceUri, $reference);\n        }\n\n        $this->completeResolution($referenceUri, $value);\n\n        return $resolution;\n    }\n\n    \/**\n     * @param UriInterface         $referenceUri\n     * @param Value\\ReferenceValue $reference\n     *\n     * @return Value\\ValueInterface|null\n     * @throws Exception\\UndefinedReferenceException\n     *\/\n    protected function resolveInline(\n        UriInterface $referenceUri,\n        Value\\ReferenceValue $reference\n    ) {\n        $scopeMap = $pointer = null;\n        foreach (array_reverse($this->scopeMapStack()) as $scopeMap) {\n            $pointer = $scopeMap->pointerByUri($referenceUri);\n            if (null !== $pointer) {\n                break;\n            }\n        }\n        if (null === $pointer) {\n            return null;\n        }\n\n        $this->pushScopeMap($scopeMap);\n        $value = $scopeMap->value()->accept($this);\n        $this->popScopeMap();\n\n        $value = $this->pointerResolver()->resolve($pointer, $value);\n        if (null === $value) {\n            throw new Exception\\UndefinedReferenceException(\n                $reference,\n                $this->currentBaseUri()\n            );\n        }\n\n        return $value;\n    }\n\n    \/**\n     * @param UriInterface         $referenceUri\n     * @param Value\\ReferenceValue $reference\n     *\n     * @return Value\\ValueInterface\n     * @throws Exception\\UndefinedReferenceException\n     *\/\n    protected function resolveExternal(\n        UriInterface $referenceUri,\n        Value\\ReferenceValue $reference\n    ) {\n        try {\n            $value = $this->reader()->read(\n                $this->uriFactory()->create(\n                    $referenceUri->toString()\n                ),\n                $reference->mimeType()\n            );\n        } catch (ReadException $e) {\n            throw new Exception\\UndefinedReferenceException(\n                $reference,\n                $this->currentBaseUri(),\n                $e\n            );\n        }\n\n        $this->pushScopeMap(\n            $this->scopeMapFactory()->create($referenceUri, $value)\n        );\n        $value = $value->accept($this);\n        $this->popScopeMap();\n\n        $referencePointer = $this->pointerFactory()->createFromUri(\n            $referenceUri\n        );\n        if ($referencePointer->hasAtoms()) {\n            $value = $this->pointerResolver()->resolve(\n                $referencePointer,\n                $value\n            );\n\n            if (null === $value) {\n                throw new Exception\\UndefinedReferenceException(\n                    $reference,\n                    $this->currentBaseUri()\n                );\n            }\n        }\n\n        return $value;\n    }\n\n    protected function clear()\n    {\n        parent::clear();\n\n        $this->scopeMapStack = array();\n        $this->resolutions = array();\n    }\n\n    protected function initialize(Value\\ValueInterface $value)\n    {\n        parent::initialize($value);\n\n        $this->pushScopeMap(\n            $this->scopeMapFactory()->create(\n                $this->uriFactory()->createGeneric(\n                    $this->baseUri()->toString()\n                ),\n                $this->value()\n            )\n        );\n    }\n\n    \/**\n     * @param ResolutionScopeMap $scopeMap\n     *\/\n    protected function pushScopeMap(ResolutionScopeMap $scopeMap)\n    {\n        array_push($this->scopeMapStack, $scopeMap);\n    }\n\n    protected function popScopeMap()\n    {\n        array_pop($this->scopeMapStack);\n    }\n\n    \/**\n     * @return ResolutionScopeMap\n     *\/\n    protected function currentScopeMap()\n    {\n        return $this->scopeMapStack[count($this->scopeMapStack) - 1];\n    }\n\n    \/**\n     * @return array<ResolutionScopeMap>\n     *\/\n    protected function scopeMapStack()\n    {\n        return $this->scopeMapStack;\n    }\n\n    \/**\n     * @return UriInterface\n     *\/\n    protected function currentBaseUri()\n    {\n        return $this\n            ->currentScopeMap()\n            ->uriByPointer($this->pointerFactory()->create());\n    }\n\n    \/**\n     * @param UriInterface $referenceUri\n     *\n     * @return Value\\PlaceholderValue\n     *\/\n    protected function startResolution(UriInterface $referenceUri)\n    {\n        $resolution = new Value\\PlaceholderValue;\n        $this->resolutions[$referenceUri->toString()] = $resolution;\n\n        return $resolution;\n    }\n\n    \/**\n     * @param UriInterface         $referenceUri\n     * @param Value\\ValueInterface $value\n     *\/\n    protected function completeResolution(\n        UriInterface $referenceUri,\n        Value\\ValueInterface $value\n    ) {\n        $this->resolution($referenceUri)->setInnerValue($value);\n    }\n\n    \/**\n     * @param UriInterface $referenceUri\n     *\n     * @return Value\\ValueInterface|null\n     *\/\n    protected function resolution(UriInterface $referenceUri)\n    {\n        $key = $referenceUri->toString();\n        if (array_key_exists($key, $this->resolutions)) {\n            return $this->resolutions[$key];\n        }\n\n        return null;\n    }\n\n    private $baseUri;\n    private $scopeMapFactory;\n    private $uriResolver;\n    private $reader;\n    private $uriFactory;\n    private $pointerFactory;\n    private $pointerResolver;\n    private $placeholderUnwrap;\n\n    private $scopeMapStack;\n    private $resolutions;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,16,null,16,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,null,16,16,16,16,16,16,16,16,16,null,null,null,null,null,null,16,null,null,null,null,null,null,null,16,null,null,null,null,null,null,null,16,null,null,null,null,null,null,null,8,null,null,null,null,null,null,null,16,null,null,null,null,null,null,null,16,null,null,null,null,null,null,null,12,null,null,null,null,null,null,null,16,null,null,null,null,null,null,null,null,null,16,null,null,null,null,null,null,null,null,null,null,16,16,16,16,null,16,16,11,null,16,null,16,8,8,null,16,null,16,null,null,null,null,null,null,null,null,null,null,null,null,null,16,16,16,16,10,null,16,16,8,null,null,10,10,10,null,10,10,0,0,0,0,null,null,10,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8,8,8,8,8,8,8,0,0,0,null,0,null,null,8,8,8,8,8,null,8,null,8,8,4,4,null,4,null,4,0,0,0,0,null,4,null,8,null,null,null,null,16,null,16,16,16,null,null,null,16,null,16,16,16,16,16,16,16,16,16,null,null,null,null,null,null,16,16,null,null,null,16,16,null,null,null,null,null,null,16,null,null,null,null,null,null,null,16,null,null,null,null,null,null,null,16,16,16,null,null,null,null,null,null,null,null,null,16,16,null,16,null,null,null,null,null,null,null,null,null,null,16,16,null,null,null,null,null,null,null,null,16,16,16,null,null,16,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reference\/ReferenceResolverFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reference;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse Eloquent\\Schemer\\Value\\Transform\\ValueTransformInterface;\n\ninterface ReferenceResolverFactoryInterface\n{\n    \/**\n     * @param UriInterface $baseUri\n     *\n     * @return ValueTransformInterface\n     *\/\n    public function create(UriInterface $baseUri);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reference\/ResolutionScopeMap.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reference;\n\nuse Eloquent\\Equality\\Comparator;\nuse Eloquent\\Schemer\\Pointer\\PointerFactory;\nuse Eloquent\\Schemer\\Pointer\\PointerFactoryInterface;\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse Eloquent\\Schemer\\Value;\n\nclass ResolutionScopeMap\n{\n    \/**\n     * @param array<tuple<PointerInterface,UriInterface>> $map\n     * @param Value\\ValueInterface                        $value\n     * @param PointerFactoryInterface|null                $pointerFactory\n     * @param Comparator|null                             $comparator\n     *\/\n    public function __construct(\n        array $map,\n        Value\\ValueInterface $value,\n        PointerFactoryInterface $pointerFactory = null,\n        Comparator $comparator = null\n    ) {\n        if (null === $pointerFactory) {\n            $pointerFactory = new PointerFactory;\n        }\n        if (null === $comparator) {\n            $comparator = new Comparator;\n        }\n\n        $this->comparator = $comparator;\n\n        $this->map = array();\n        foreach ($map as $tuple) {\n            list($pointer, $uri) = $tuple;\n            $this->add($pointer, $uri);\n        }\n\n        $this->value = $value;\n        $this->pointerFactory = $pointerFactory;\n    }\n\n    \/**\n     * @return array<tuple<PointerInterface,UriInterface>>\n     *\/\n    public function map()\n    {\n        return $this->map;\n    }\n\n    \/**\n     * @return Value\\ValueInterface\n     *\/\n    public function value()\n    {\n        return $this->value;\n    }\n\n    \/**\n     * @return PointerFactoryInterface\n     *\/\n    public function pointerFactory()\n    {\n        return $this->pointerFactory;\n    }\n\n    \/**\n     * @return Comparator\n     *\/\n    public function comparator()\n    {\n        return $this->comparator;\n    }\n\n    \/**\n     * @param PointerInterface $pointer\n     *\n     * @return UriInterface\n     *\/\n    public function uriByPointer(PointerInterface $pointer)\n    {\n        foreach ($this->map() as $tuple) {\n            list($mappingPointer, $mappingUri) = $tuple;\n            if ($this->comparator()->equals($mappingPointer, $pointer)) {\n                return $mappingUri;\n            }\n        }\n\n        throw new Exception\\UndefinedUriException($pointer);\n    }\n\n    \/**\n     * @param UriInterface $uri\n     *\n     * @return PointerInterface|null\n     *\/\n    public function pointerByUri(UriInterface $uri)\n    {\n        $uriPointerMap = $this->createUriPointerMap($uri);\n\n        foreach ($this->map() as $tuple) {\n            list($mappingPointer, $mappingUri) = $tuple;\n            $mappingUriString = $mappingUri->toString();\n\n            foreach ($uriPointerMap as $tuple) {\n                list($uriString, $atoms) = $tuple;\n\n                if ($uriString === $mappingUriString) {\n                    return $mappingPointer->joinAtomSequence($atoms);\n                }\n            }\n        }\n\n        return null;\n    }\n\n    \/**\n     * @param PointerInterface $pointer\n     * @param UriInterface     $uri\n     *\/\n    protected function add(PointerInterface $pointer, UriInterface $uri)\n    {\n        foreach ($this->map() as $tuple) {\n            list($existingPointer) = $tuple;\n            if ($this->comparator()->equals($existingPointer, $pointer)) {\n                throw new Exception\\MappingExistsException($pointer);\n            }\n        }\n\n        $uri = clone $uri;\n        $uri->normalize();\n\n        $this->map[] = array($pointer, $uri);\n    }\n\n    \/**\n     * Splits a URI into a form that makes it easier to match its parents with\n     * regards to URIs that contain pointers in their fragments.\n     *\n     * @param UriInterface $uri\n     *\n     * @return array<tuple<string,array<string>>>\n     *\/\n    protected function createUriPointerMap(UriInterface $uri)\n    {\n        $uri = clone $uri;\n        $uri->normalize();\n        $map = array(array($uri->toString(), array()));\n\n        $fragmentPointer = $this->pointerFactory()->createFromUri($uri);\n        if ($fragmentPointer->hasAtoms()) {\n            $atoms = array();\n            $fragmentlessUri = clone $uri;\n            $fragmentlessUri->setFragment(null);\n\n            while ($fragmentPointer->hasAtoms()) {\n                array_unshift($atoms, $fragmentPointer->lastAtom());\n                $fragmentPointer = $fragmentPointer->parent();\n\n                $uri = clone $fragmentlessUri;\n                $uri->setFragment($fragmentPointer->string());\n                $uri->normalize();\n\n                array_unshift($map, array($uri->toString(), $atoms));\n            }\n        }\n\n        return $map;\n    }\n\n    private $map;\n    private $value;\n    private $pointerFactory;\n    private $comparator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9,9,9,9,9,9,null,9,null,9,9,9,9,9,null,9,9,9,null,null,null,null,null,null,9,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,9,null,null,null,null,null,null,null,9,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,0,null,null,null,null,null,null,null,null,null,9,null,9,9,9,null,9,9,null,9,8,null,6,6,null,1,null,null,null,null,null,null,null,null,9,9,9,0,null,9,null,9,9,null,9,9,null,null,null,null,null,null,null,null,null,null,null,9,9,9,null,9,9,4,4,4,null,4,4,4,null,4,4,4,null,4,4,4,null,9,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reference\/ResolutionScopeMapFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reference;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse Eloquent\\Schemer\\Value;\n\ninterface ResolutionScopeMapFactoryInterface\n{\n    \/**\n     * @param UriInterface         $baseUri\n     * @param Value\\ValueInterface $value\n     *\n     * @return ResolutionScopeMap\n     *\/\n    public function create(UriInterface $baseUri, Value\\ValueInterface $value);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reference\/SwitchingResolutionScopeMapFactory.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reference;\n\nuse Eloquent\\Equality\\Comparator;\nuse Eloquent\\Schemer\\Pointer\\PointerFactory;\nuse Eloquent\\Schemer\\Pointer\\PointerFactoryInterface;\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\nuse Eloquent\\Schemer\\Uri\\Resolver\\UriResolver;\nuse Eloquent\\Schemer\\Uri\\Resolver\\UriResolverInterface;\nuse Eloquent\\Schemer\\Uri\\UriFactory;\nuse Eloquent\\Schemer\\Uri\\UriFactoryInterface;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse Eloquent\\Schemer\\Value;\n\nclass SwitchingResolutionScopeMapFactory extends Value\\Visitor\\AbstractValueVisitor implements\n    ResolutionScopeMapFactoryInterface\n{\n    \/**\n     * @param string|null                  $propertyName\n     * @param UriFactoryInterface|null     $uriFactory\n     * @param UriResolverInterface|null    $uriResolver\n     * @param PointerFactoryInterface|null $pointerFactory\n     * @param Comparator|null              $comparator\n     *\/\n    public function __construct(\n        $propertyName = null,\n        UriFactoryInterface $uriFactory = null,\n        UriResolverInterface $uriResolver = null,\n        PointerFactoryInterface $pointerFactory = null,\n        Comparator $comparator = null\n    ) {\n        if (null === $propertyName) {\n            $propertyName = 'id';\n        }\n        if (null === $uriFactory) {\n            $uriFactory = new UriFactory;\n        }\n        if (null === $uriResolver) {\n            $uriResolver = new UriResolver;\n        }\n        if (null === $pointerFactory) {\n            $pointerFactory = new PointerFactory;\n        }\n        if (null === $comparator) {\n            $comparator = new Comparator;\n        }\n\n        $this->propertyName = $propertyName;\n        $this->uriFactory = $uriFactory;\n        $this->uriResolver = $uriResolver;\n        $this->pointerFactory = $pointerFactory;\n        $this->comparator = $comparator;\n\n        $this->clear();\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function propertyName()\n    {\n        return $this->propertyName;\n    }\n\n    \/**\n     * @return UriFactoryInterface\n     *\/\n    public function uriFactory()\n    {\n        return $this->uriFactory;\n    }\n\n    \/**\n     * @return UriResolverInterface\n     *\/\n    public function uriResolver()\n    {\n        return $this->uriResolver;\n    }\n\n    \/**\n     * @return PointerFactoryInterface\n     *\/\n    public function pointerFactory()\n    {\n        return $this->pointerFactory;\n    }\n\n    \/**\n     * @return Comparator\n     *\/\n    public function comparator()\n    {\n        return $this->comparator;\n    }\n\n    \/**\n     * @param UriInterface         $baseUri\n     * @param Value\\ValueInterface $value\n     *\n     * @return ResolutionScopeMap\n     *\/\n    public function create(UriInterface $baseUri, Value\\ValueInterface $value)\n    {\n        $this->clear();\n        $this->pushBaseUri($baseUri);\n        $this->addMapping($this->currentPointer(), $baseUri);\n\n        $value->accept($this);\n        $map = new ResolutionScopeMap($this->map(), $value);\n\n        $this->clear();\n\n        return $map;\n    }\n\n    \/**\n     * @param Value\\ArrayValue $value\n     *\/\n    public function visitArrayValue(Value\\ArrayValue $value)\n    {\n        foreach ($value as $index => $subValue) {\n            $this->pushPointerAtom(strval($index));\n            $subValue->accept($this);\n            $this->popPointer();\n        }\n    }\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\/\n    public function visitObjectValue(Value\\ObjectValue $value)\n    {\n        foreach ($value as $property => $subValue) {\n            if ($this->propertyName() === $property) {\n                if (!$subValue instanceof Value\\StringValue) {\n                    continue;\n                }\n\n                $this->pushBaseUriReference(\n                    $this->uriFactory()->createGeneric($subValue->value())\n                );\n                $this->addMapping(\n                    $this->currentPointer(),\n                    $this->currentBaseUri()\n                );\n            }\n\n            $this->pushPointerAtom($property);\n            $subValue->accept($this);\n            $this->popPointer();\n        }\n    }\n\n    protected function clear()\n    {\n        $this->baseUriStack = array();\n        $this->pointerStack = array($this->pointerFactory()->create());\n        $this->map = array();\n    }\n\n    \/**\n     * @param UriInterface $baseUri\n     *\/\n    protected function pushBaseUri(UriInterface $baseUri)\n    {\n        array_push($this->baseUriStack, $baseUri);\n    }\n\n    \/**\n     * @param UriInterface $baseUri\n     *\/\n    protected function pushBaseUriReference(UriInterface $baseUri)\n    {\n        $this->pushBaseUri(\n            $this->uriResolver()->resolve($baseUri, $this->currentBaseUri())\n        );\n    }\n\n    protected function popBaseUri()\n    {\n        array_pop($this->baseUriStack);\n    }\n\n    \/**\n     * @return UriInterface\n     *\/\n    protected function currentBaseUri()\n    {\n        return $this->baseUriStack[count($this->baseUriStack) - 1];\n    }\n\n    \/**\n     * @param string $atom\n     *\/\n    protected function pushPointerAtom($atom)\n    {\n        array_push($this->pointerStack, $this->currentPointer()->joinAtoms($atom));\n    }\n\n    protected function popPointer()\n    {\n        array_pop($this->pointerStack);\n    }\n\n    \/**\n     * @return PointerInterface\n     *\/\n    protected function currentPointer()\n    {\n        return $this->pointerStack[count($this->pointerStack) - 1];\n    }\n\n    \/**\n     * @param PointerInterface $pointer\n     * @param UriInterface     $uri\n     *\/\n    protected function addMapping(PointerInterface $pointer, UriInterface $uri)\n    {\n        foreach ($this->map as $index => $tuple) {\n            list($existingPointer) = $tuple;\n            if ($this->comparator->equals($existingPointer, $pointer)) {\n                $this->map[$index] = array($pointer, $uri);\n\n                return;\n            }\n        }\n\n        $this->map[] = array($pointer, $uri);\n    }\n\n    \/**\n     * @return array<tuple<UriInterface,PointerInterface>>\n     *\/\n    protected function map()\n    {\n        return $this->map;\n    }\n\n    private $propertyName;\n    private $uriFactory;\n    private $uriResolver;\n    private $pointerFactory;\n    private $comparator;\n\n    private $baseUriStack;\n    private $pointerStack;\n    private $map;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,null,2,2,2,2,2,null,2,2,null,null,null,null,null,null,2,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,2,2,2,null,2,2,null,2,null,2,null,null,null,null,null,null,null,0,0,0,0,0,0,null,null,null,null,null,null,2,2,2,0,null,null,2,2,2,2,2,2,2,2,null,2,2,2,2,2,null,null,null,2,2,2,2,null,null,null,null,null,null,2,2,null,null,null,null,null,null,2,2,2,2,null,null,null,0,0,null,null,null,null,null,null,2,null,null,null,null,null,null,null,2,2,null,null,null,2,2,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,2,2,2,1,null,1,null,2,null,2,2,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Reference\/SwitchingScopeReferenceResolverFactory.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Reference;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\nclass SwitchingScopeReferenceResolverFactory implements ReferenceResolverFactoryInterface\n{\n    \/**\n     * @param UriInterface $baseUri\n     *\n     * @return ReferenceResolver\n     *\/\n    public function create(UriInterface $baseUri)\n    {\n        return new ReferenceResolver(\n            $baseUri,\n            new SwitchingResolutionScopeMapFactory\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,null,null]},{"name":"Eloquent\/Schemer\/Serialization\/Exception\/ThawExceptionInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Serialization\\Exception;\n\ninterface ThawExceptionInterface\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Serialization\/Exception\/UndefinedProtocolException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Serialization\\Exception;\n\nuse Exception;\n\nfinal class UndefinedProtocolException extends Exception\n{\n    \/**\n     * @param string         $mimeType\n     * @param Exception|null $previous\n     *\/\n    public function __construct($mimeType, Exception $previous = null)\n    {\n        $this->mimeType = $mimeType;\n\n        parent::__construct(\n            sprintf(\n                \"No serialization protocol defined for MIME type %s.\",\n                var_export($mimeType, true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function mimeType()\n    {\n        return $this->mimeType;\n    }\n\n    private $mimeType;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Serialization\/Json\/Exception\/JsonThawException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Serialization\\Json\\Exception;\n\nuse Eloquent\\Schemer\\Serialization\\Exception\\ThawExceptionInterface;\nuse Exception;\n\nfinal class JsonThawException extends Exception implements ThawExceptionInterface\n{\n    \/**\n     * @param integer        $jsonErrorCode\n     * @param Exception|null $previous\n     *\/\n    public function __construct($jsonErrorCode, Exception $previous = null)\n    {\n        switch ($jsonErrorCode) {\n            case JSON_ERROR_DEPTH:\n                $message = 'Maximum stack depth exceeded.';\n                break;\n            case JSON_ERROR_STATE_MISMATCH:\n                $message = 'Underflow or mode mismatch.';\n                break;\n            case JSON_ERROR_CTRL_CHAR:\n                $message = 'Unexpected control character or encoding issue.';\n                break;\n            case JSON_ERROR_SYNTAX:\n                $message = 'Syntax error.';\n                break;\n            case JSON_ERROR_UTF8:\n                $message = 'Malformed UTF-8 characters, possibly incorrectly encoded.';\n                break;\n            default:\n                $message = 'Unknown error.';\n        }\n\n        $this->jsonErrorCode = $jsonErrorCode;\n\n        parent::__construct(\n            sprintf('Unable to thaw JSON data. %s', $message),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return integer\n     *\/\n    public function jsonErrorCode()\n    {\n        return $this->jsonErrorCode;\n    }\n\n    private $jsonErrorCode;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,null,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Serialization\/Json\/JsonProtocol.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Serialization\\Json;\n\nuse Eloquent\\Schemer\\Serialization\\SerializationProtocolInterface;\n\nclass JsonProtocol implements SerializationProtocolInterface\n{\n    \/**\n     * @param string $data\n     *\n     * @return mixed\n     * @throws Exception\\JsonThawException\n     *\/\n    public function thaw($data)\n    {\n        $value = json_decode($data);\n        $error = json_last_error();\n        if (JSON_ERROR_NONE !== $error) {\n            throw new Exception\\JsonThawException($error);\n        }\n\n        return $value;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Serialization\/ProtocolMap.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Serialization;\n\nuse Eloquent\\Schemer\\Loader\\ContentType;\n\nclass ProtocolMap\n{\n    \/**\n     * @param array<string,SerializationProtocolInterface>|null $map\n     *\/\n    public function __construct(array $map = null)\n    {\n        if (null === $map) {\n            $map = array(\n                ContentType::JSON()->primaryMimeType() => new Json\\JsonProtocol,\n                ContentType::TOML()->primaryMimeType() => new Toml\\TomlProtocol,\n                ContentType::YAML()->primaryMimeType() => new Yaml\\YamlProtocol,\n            );\n        }\n\n        $this->map = $map;\n    }\n\n    \/**\n     * @return array<string,SerializationProtocolInterface>\n     *\/\n    public function map()\n    {\n        return $this->map;\n    }\n\n    \/**\n     * @param string                         $mimeType\n     * @param SerializationProtocolInterface $protocol\n     *\/\n    public function set($mimeType, SerializationProtocolInterface $protocol)\n    {\n        $this->map[$mimeType] = $protocol;\n    }\n\n    \/**\n     * @param string $mimeType\n     *\n     * @return SerializationProtocolInterface\n     * @throws Exception\\UndefinedProtocolException\n     *\/\n    public function get($mimeType)\n    {\n        if (!array_key_exists($mimeType, $this->map)) {\n            throw new Exception\\UndefinedProtocolException($mimeType);\n        }\n\n        return $this->map[$mimeType];\n    }\n\n    private $map;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,0,0,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,null,0,0,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Serialization\/SerializationProtocolInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Serialization;\n\ninterface SerializationProtocolInterface\n{\n    \/**\n     * @param string $data\n     *\n     * @return mixed\n     * @throws Exception\\ThawExceptionInterface\n     *\/\n    public function thaw($data);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Serialization\/Toml\/Exception\/TomlThawException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Serialization\\Toml\\Exception;\n\nuse Eloquent\\Schemer\\Serialization\\Exception\\ThawExceptionInterface;\nuse Exception;\n\nfinal class TomlThawException extends Exception implements ThawExceptionInterface\n{\n    \/**\n     * @param Exception|null $previous\n     *\/\n    public function __construct(Exception $previous = null)\n    {\n        if (null === $previous) {\n            $message = 'Unknown error.';\n        } else {\n            $message = $previous->getMessage();\n        }\n\n        parent::__construct(\n            sprintf('Unable to thaw TOML data. %s', $message),\n            0,\n            $previous\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,null]},{"name":"Eloquent\/Schemer\/Serialization\/Toml\/TomlProtocol.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Serialization\\Toml;\n\nuse Eloquent\\Schemer\\Serialization\\SerializationProtocolInterface;\nuse Exception;\nuse Toml\\Parser;\n\nclass TomlProtocol implements SerializationProtocolInterface\n{\n    \/**\n     * @param string $data\n     *\n     * @return mixed\n     * @throws Exception\\TomlThawException\n     *\/\n    public function thaw($data)\n    {\n        try {\n            $value = Parser::fromString($data);\n        } catch (Exception $e) {\n            throw new Exception\\TomlThawException($e);\n        }\n\n        return $value;\n    }\n\n    private $data;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Serialization\/Yaml\/Exception\/YamlThawException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Serialization\\Yaml\\Exception;\n\nuse Eloquent\\Schemer\\Serialization\\Exception\\ThawExceptionInterface;\nuse Exception;\n\nfinal class YamlThawException extends Exception implements ThawExceptionInterface\n{\n    \/**\n     * @param Exception|null $previous\n     *\/\n    public function __construct(Exception $previous = null)\n    {\n        if (null === $previous) {\n            $message = 'Unknown error.';\n        } else {\n            $message = $previous->getMessage();\n        }\n\n        parent::__construct(\n            sprintf('Unable to thaw YAML data. %s', $message),\n            0,\n            $previous\n        );\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,null]},{"name":"Eloquent\/Schemer\/Serialization\/Yaml\/YamlProtocol.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Serialization\\Yaml;\n\nuse Eloquent\\Schemer\\Serialization\\SerializationProtocolInterface;\nuse Symfony\\Component\\Yaml\\Exception\\ParseException;\nuse Symfony\\Component\\Yaml\\Parser;\n\nclass YamlProtocol implements SerializationProtocolInterface\n{\n    \/**\n     * @param Parser|null $parser\n     *\/\n    public function __construct(Parser $parser = null)\n    {\n        if (null === $parser) {\n            $parser = new Parser;\n        }\n\n        $this->parser = $parser;\n    }\n\n    \/**\n     * @return Parser\n     *\/\n    public function parser()\n    {\n        return $this->parser;\n    }\n\n    \/**\n     * @param string $data\n     *\n     * @return mixed\n     * @throws Exception\\YamlThawException\n     *\/\n    public function thaw($data)\n    {\n        try {\n            $value = $this->parser()->parse($data, true);\n        } catch (ParseException $e) {\n            throw new Exception\\YamlThawException($e);\n        }\n\n        return $value;\n    }\n\n    private $parser;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Uri\/DataUri.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri;\n\nuse Zend\\Uri\\Exception\\InvalidArgumentException;\nuse Zend\\Uri\\Exception\\InvalidUriException;\nuse Zend\\Uri\\UriInterface as ZendUriInterface;\n\nclass DataUri extends Uri implements DataUriInterface\n{\n    protected static $validSchemes = array('data');\n\n    \/**\n     * @param string|ZendUriInterface|null $uri\n     *\/\n    public function __construct($uri = null)\n    {\n        $this->setScheme('data');\n        $this->setEncoding('base64');\n\n        if ($uri instanceof self) {\n            $this->setMimeType($uri->getMimeType());\n            $this->setEncoding($uri->getEncoding());\n            $this->setRawData($uri->getRawData());\n        } elseif (is_string($uri)) {\n            $this->parse($uri);\n        } elseif ($uri instanceof ZendUriInterface) {\n            $this->parse($uri->toString());\n        } elseif ($uri !== null) {\n            throw new InvalidArgumentException(sprintf(\n                'Expecting a string or a URI object, received \"%s\"',\n                (is_object($uri) ? get_class($uri) : gettype($uri))\n            ));\n        }\n    }\n\n    \/**\n     * @param string|null $mimeType\n     *\/\n    public function setMimeType($mimeType)\n    {\n        $this->mimeType = $mimeType;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getMimeType()\n    {\n        if (empty($this->mimeType)) {\n            return 'text\/plain;charset=US-ASCII';\n        }\n\n        return $this->mimeType;\n    }\n\n    \/**\n     * @param string|null $encoding\n     *\/\n    public function setEncoding($encoding)\n    {\n        $isDifferent = $this->encoding !== $encoding;\n        if ($isDifferent) {\n            $data = $this->getData();\n        }\n\n        $this->encoding = $encoding;\n\n        if ($isDifferent) {\n            $this->setData($data);\n        }\n    }\n\n    \/**\n     * @return string|null\n     *\/\n    public function getEncoding()\n    {\n        return $this->encoding;\n    }\n\n    \/**\n     * @param string $rawData\n     *\/\n    public function setRawData($rawData)\n    {\n        $this->rawData = $rawData;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getRawData()\n    {\n        return $this->rawData;\n    }\n\n    \/**\n     * @param string $data\n     *\/\n    public function setData($data)\n    {\n        if ('base64' === $this->encoding) {\n            $this->setRawData(base64_encode($data));\n        } else {\n            $this->setRawData(rawurlencode($data));\n        }\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function getData()\n    {\n        if ('base64' === $this->encoding) {\n            return base64_decode($this->getRawData());\n        }\n\n        return rawurldecode($this->getRawData());\n    }\n\n    \/**\n     * @return boolean\n     *\/\n    public function isValid()\n    {\n        if (\n            !empty($this->mimeType) &&\n            !preg_match(\n                '#^[\\w-]+\/[\\w-]+(?:;\\s*[\\w-]+=[\\w-]+)*$#',\n                $this->mimeType\n            )\n        ) {\n            return false;\n        }\n\n        if (!empty($this->encoding) && 'base64' !== $this->encoding) {\n            return false;\n        }\n\n        if (\n            'base64' === $this->encoding &&\n            !preg_match(\n                '#^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$#',\n                $this->rawData\n            )\n        ) {\n            return false;\n        } elseif (!preg_match('\/^[!#$&-;=?-[\\]_a-z~%]+$\/', $this->rawData)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    \/**\n     * @param string $uri\n     *\n     * @return DataUri\n     *\/\n    public function parse($uri)\n    {\n        if (($scheme = static::parseScheme($uri)) !== null) {\n            $this->setScheme($scheme);\n            $uri = substr($uri, strlen($scheme) + 1);\n        }\n\n        $parts = explode(',', $uri, 2);\n\n        if (count($parts) > 1) {\n            $mimeType = array_shift($parts);\n            if (';base64' === substr($mimeType, -7)) {\n                $this->encoding = 'base64';\n                $mimeType = substr($mimeType, 0, -7);\n            }\n            $this->setMimeType($mimeType);\n        }\n\n        $this->rawData = array_shift($parts);\n\n        return $this;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function toString()\n    {\n        if (!$this->isValid()) {\n            throw new InvalidUriException(\n                'URI is not valid and cannot be converted into a string'\n            );\n        }\n\n        $uri = '';\n        if ($this->scheme) {\n            $uri .= $this->scheme . ':';\n        }\n        if ($this->mimeType) {\n            $uri .= $this->mimeType;\n        }\n        if ($this->encoding) {\n            $uri .= ';' . $this->encoding;\n        }\n        $uri .= ',' . $this->rawData;\n\n        return $uri;\n    }\n\n    \/**\n     * @return DataUri\n     *\/\n    public function normalize()\n    {\n        if ($this->scheme) {\n            $this->scheme = static::normalizeScheme($this->scheme);\n        }\n\n        if ($this->encoding) {\n            $this->encoding = static::normalizeEncoding($this->encoding);\n        }\n\n        return $this;\n    }\n\n    \/**\n     * @param string $encoding\n     *\n     * @return string\n     *\/\n    protected static function normalizeEncoding($encoding)\n    {\n        if (preg_match('\/\/', $encoding)) {\n            return null;\n        }\n\n        return $encoding;\n    }\n\n    protected $mimeType;\n    protected $encoding;\n    protected $rawData;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,0,null,null,0,null,null,null,null,null,null,null,0,0,0,0,null,0,null,0,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,null,null,null,null,0,0,null,null,0,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,null,0,0,null,null,null,0,0,0,0,0,0,0,0,0,null,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,0,0,0,0,0,0,0,0,null,0,null,0,null,null,null,null,null,null,null,0,0,null,0,null,null,0,0,0,0,0,0,0,0,0,0,0,null,0,null,null,null,null,null,null,null,0,0,0,null,0,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,0,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Uri\/DataUriInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri;\n\ninterface DataUriInterface extends UriInterface\n{\n    \/**\n     * @param string|null $mimeType\n     *\/\n    public function setMimeType($mimeType);\n\n    \/**\n     * @return string\n     *\/\n    public function getMimeType();\n\n    \/**\n     * @param string|null $encoding\n     *\/\n    public function setEncoding($encoding);\n\n    \/**\n     * @return string|null\n     *\/\n    public function getEncoding();\n\n    \/**\n     * @param string $rawData\n     *\/\n    public function setRawData($rawData);\n\n    \/**\n     * @return string\n     *\/\n    public function getRawData();\n\n    \/**\n     * @param string $data\n     *\/\n    public function setData($data);\n\n    \/**\n     * @return string\n     *\/\n    public function getData();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Uri\/FileUri.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri;\n\nuse Zend\\Uri\\File;\n\nclass FileUri extends File implements FileUriInterface\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Uri\/FileUriInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri;\n\ninterface FileUriInterface extends UriInterface\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Uri\/HttpUri.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri;\n\nclass HttpUri extends Uri implements HttpUriInterface\n{\n    \/**\n     * @see Uri::$validSchemes\n     *\/\n    protected static $validSchemes = array(\n        'http',\n        'https'\n    );\n\n    \/**\n     * @see Uri::$defaultPorts\n     *\/\n    protected static $defaultPorts = array(\n        'http'  => 80,\n        'https' => 443,\n    );\n\n    \/**\n     * @see Uri::$validHostTypes\n     *\/\n    protected $validHostTypes = self::HOST_DNS_OR_IPV4_OR_IPV6_OR_REGNAME;\n\n    \/**\n     * User name as provided in authority of URI\n     * @var null|string\n     *\/\n    protected $user;\n\n    \/**\n     * Password as provided in authority of URI\n     * @var null|string\n     *\/\n    protected $password;\n\n    \/**\n     * Check if the URI is a valid HTTP URI\n     *\n     * This applies additional HTTP specific validation rules beyond the ones\n     * required by the generic URI syntax\n     *\n     * @return bool\n     * @see    Uri::isValid()\n     *\/\n    public function isValid()\n    {\n        return parent::isValid();\n    }\n\n    \/**\n     * Get the username part (before the ':') of the userInfo URI part\n     *\n     * @return null|string\n     *\/\n    public function getUser()\n    {\n        if (null !== $this->user) {\n            return $this->user;\n        }\n\n        $this->parseUserInfo();\n\n        return $this->user;\n    }\n\n    \/**\n     * Get the password part (after the ':') of the userInfo URI part\n     *\n     * @return string\n     *\/\n    public function getPassword()\n    {\n        if (null !== $this->password) {\n            return $this->password;\n        }\n\n        $this->parseUserInfo();\n\n        return $this->password;\n    }\n\n    \/**\n     * Set the username part (before the ':') of the userInfo URI part\n     *\n     * @param  string $user\n     * @return Http\n     *\/\n    public function setUser($user)\n    {\n        $this->user = $user;\n\n        return $this;\n    }\n\n    \/**\n     * Set the password part (after the ':') of the userInfo URI part\n     *\n     * @param  string $password\n     * @return Http\n     *\/\n    public function setPassword($password)\n    {\n        $this->password = $password;\n\n        return $this;\n    }\n\n    \/**\n     * Validate the host part of an HTTP URI\n     *\n     * This overrides the common URI validation method with a DNS or IP only\n     * default. Users may still enforce allowing other host types.\n     *\n     * @param  string  $host\n     * @param  integer $allowed\n     * @return bool\n     *\/\n    public static function validateHost($host, $allowed = self::HOST_DNS_OR_IPV4_OR_IPV6)\n    {\n        return parent::validateHost($host, $allowed);\n    }\n\n    \/**\n     * Parse the user info into username and password segments\n     *\n     * Parses the user information into username and password segments, and\n     * then sets the appropriate values.\n     *\n     * @return void\n     *\/\n    protected function parseUserInfo()\n    {\n        \/\/ No user information? we're done\n        if (null === $this->userInfo) {\n            return;\n        }\n\n        \/\/ If no ':' separator, we only have a username\n        if (false === strpos($this->userInfo, ':')) {\n            $this->setUser($this->userInfo);\n\n            return;\n        }\n\n        \/\/ Split on the ':', and set both user and password\n        list($user, $password) = explode(':', $this->userInfo, 2);\n        $this->setUser($user);\n        $this->setPassword($password);\n    }\n\n    \/**\n     * Return the URI port\n     *\n     * If no port is set, will return the default port according to the scheme\n     *\n     * @return integer\n     *\/\n    public function getPort()\n    {\n        if (empty($this->port)) {\n            if (array_key_exists($this->scheme, static::$defaultPorts)) {\n                return static::$defaultPorts[$this->scheme];\n            }\n        }\n\n        return $this->port;\n    }\n\n    \/**\n     * Parse a URI string\n     *\n     * @param  string $uri\n     * @return Http\n     *\/\n    public function parse($uri)\n    {\n        parent::parse($uri);\n\n        if (empty($this->path)) {\n            $this->path = '\/';\n        }\n\n        return $this;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8,null,null,null,null,null,null,null,null,null,6,0,null,null,6,null,6,null,null,null,null,null,null,null,null,null,6,4,null,null,2,null,2,null,null,null,null,null,null,null,null,null,null,5,null,5,null,null,null,null,null,null,null,null,null,null,4,null,4,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21,null,null,null,null,null,null,null,null,null,null,null,null,null,7,2,null,null,null,5,1,null,1,null,null,null,4,4,4,4,null,null,null,null,null,null,null,null,null,null,4,4,4,null,0,null,0,null,null,null,null,null,null,null,null,null,null,17,null,17,1,1,null,17,null,null]},{"name":"Eloquent\/Schemer\/Uri\/HttpUriInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri;\n\ninterface HttpUriInterface extends UriInterface\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Uri\/Resolver\/BoundUriResolver.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri\\Resolver;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\nclass BoundUriResolver implements BoundUriResolverInterface\n{\n    \/**\n     * @param UriInterface              $baseUri\n     * @param UriResolverInterface|null $resolver\n     *\/\n    public function __construct(\n        UriInterface $baseUri,\n        UriResolverInterface $resolver = null\n    ) {\n        if (null === $resolver) {\n            $resolver = new UriResolver;\n        }\n\n        $this->baseUri = $baseUri;\n        $this->resolver = $resolver;\n    }\n\n    \/**\n     * @return UriInterface\n     *\/\n    public function baseUri()\n    {\n        return $this->baseUri;\n    }\n\n    \/**\n     * @return UriResolverInterface\n     *\/\n    public function resolver()\n    {\n        return $this->resolver;\n    }\n\n    \/**\n     * @param UriInterface $uri\n     *\n     * @return UriInterface\n     *\/\n    public function resolve(UriInterface $uri)\n    {\n        return $this->resolver()->resolve($uri, $this->baseUri());\n    }\n\n    private $baseUri;\n    private $resolver;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Uri\/Resolver\/BoundUriResolverInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri\\Resolver;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\ninterface BoundUriResolverInterface\n{\n    \/**\n     * @param UriInterface $uri\n     *\n     * @return UriInterface\n     *\/\n    public function resolve(UriInterface $uri);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Uri\/Resolver\/UriResolver.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri\\Resolver;\n\nuse Eloquent\\Schemer\\Uri\\Uri;\nuse Eloquent\\Schemer\\Uri\\UriInterface;\nuse ReflectionObject;\n\nclass UriResolver implements UriResolverInterface\n{\n    \/**\n     * @param UriInterface $uri\n     * @param UriInterface $baseUri\n     *\n     * @return UriInterface\n     *\/\n    public function resolve(UriInterface $uri, UriInterface $baseUri)\n    {\n        $baseUriReflector = new ReflectionObject($baseUri);\n        if (!$baseUriReflector->hasMethod('resolve')) {\n            $baseUri = new Uri($baseUri->toString());\n            if ($uri instanceof Uri) {\n                $uri = clone $uri;\n            } else {\n                $uri = new Uri($uri->toString());\n            }\n        } elseif (!$uri instanceof $baseUri) {\n            $uri = $baseUriReflector->newInstance($uri->toString());\n        } else {\n            $uri = clone $uri;\n        }\n\n        return $uri->resolve($baseUri);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,0,0,0,0,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Uri\/Resolver\/UriResolverInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri\\Resolver;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\ninterface UriResolverInterface\n{\n    \/**\n     * @param UriInterface $uri\n     * @param UriInterface $baseUri\n     *\n     * @return UriInterface\n     *\/\n    public function resolve(UriInterface $uri, UriInterface $baseUri);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Uri\/Uri.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri;\n\nuse Zend\\Uri\\Exception\\InvalidUriException;\nuse Zend\\Uri\\Uri as ZendUri;\n\nclass Uri extends ZendUri implements UriInterface\n{\n    \/**\n     * @param string $uri\n     *\n     * @return Uri\n     *\/\n    public function parse($uri)\n    {\n        \/\/ Capture scheme\n        if (($scheme = static::parseScheme($uri)) !== null) {\n            $this->setScheme($scheme);\n            $uri = substr($uri, strlen($scheme) + 1);\n        }\n\n        \/\/ Capture authority part\n        if (preg_match('|^\/\/([^\/\\?#]*)|', $uri, $match)) {\n            $authority = $match[1];\n            $uri       = substr($uri, strlen($match[0]));\n\n            \/\/ Split authority into userInfo and host\n            if (strpos($authority, '@') !== false) {\n                \/\/ The userInfo can also contain '@' symbols; split $authority\n                \/\/ into segments, and set it to the last segment.\n                $segments  = explode('@', $authority);\n                $authority = array_pop($segments);\n                $userInfo  = implode('@', $segments);\n                unset($segments);\n                $this->setUserInfo($userInfo);\n            }\n\n            $nMatches = preg_match('\/:[\\d]{1,5}$\/', $authority, $matches);\n            if ($nMatches === 1) {\n                $portLength = strlen($matches[0]);\n                $port = substr($matches[0], 1);\n\n                $this->setPort((int) $port);\n                $authority = substr($authority, 0, -$portLength);\n            }\n\n            $this->setHost($authority);\n        }\n\n        if (!$uri) {\n            return $this;\n        }\n\n        \/\/ Capture the path\n        if (preg_match('|^[^\\?#]*|', $uri, $match)) {\n            $this->setPath($match[0]);\n            $uri = substr($uri, strlen($match[0]));\n        }\n\n        if (!$uri) {\n            return $this;\n        }\n\n        \/\/ Capture the query\n        if (preg_match('|^\\?([^#]*)|', $uri, $match)) {\n            $this->setQuery($match[1]);\n            $uri = substr($uri, strlen($match[0]));\n        }\n        if (!$uri) {\n            return $this;\n        }\n\n        \/\/ All that's left is the fragment\n        if ($uri && substr($uri, 0, 1) == '#') {\n            if ('#' === $uri) {\n                $this->setFragment('');\n            } else {\n                $this->setFragment(substr($uri, 1));\n            }\n        }\n\n        return $this;\n    }\n\n    \/**\n     * @return boolean\n     *\/\n    public function isValid()\n    {\n        if ($this->host) {\n            if (strlen($this->path) > 0 && substr($this->path, 0, 1) != '\/') {\n                return false;\n            }\n\n            return true;\n        }\n\n        if ($this->userInfo || $this->port) {\n            return false;\n        }\n\n        if ($this->path) {\n            if (substr($this->path, 0, 2) == '\/\/') {\n                return false;\n            }\n\n            return true;\n        }\n\n        if ($this->query || null !== $this->fragment) {\n            return true;\n        }\n\n        return false;\n    }\n\n    \/**\n     * @return boolean\n     *\/\n    public function isValidRelative()\n    {\n        if ($this->scheme || $this->host || $this->userInfo || $this->port) {\n            return false;\n        }\n\n        if ($this->path) {\n            if (substr($this->path, 0, 2) == '\/\/') {\n                return false;\n            }\n\n            return true;\n        }\n\n        if ($this->query || null !== $this->fragment) {\n            return true;\n        }\n\n        return false;\n    }\n\n    \/**\n     * @param string $input\n     *\n     * @return boolean\n     *\/\n    public static function validateQueryFragment($input)\n    {\n        if ('' === $input) {\n            return true;\n        }\n\n        return parent::validateQueryFragment($input);\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function toString()\n    {\n        if (!$this->isValid()) {\n            if ($this->isAbsolute() || !$this->isValidRelative()) {\n                throw new InvalidUriException(\n                    'URI is not valid and cannot be converted into a string'\n                );\n            }\n        }\n\n        $uri = '';\n\n        if ($this->scheme) {\n            $uri .= $this->scheme . ':';\n        }\n\n        if ($this->host !== null) {\n            $uri .= '\/\/';\n            if ($this->userInfo) {\n                $uri .= $this->userInfo . '@';\n            }\n            $uri .= $this->host;\n            if ($this->port) {\n                $uri .= ':' . $this->port;\n            }\n        }\n\n        if ($this->path) {\n            $uri .= static::encodePath($this->path);\n        } elseif ($this->host && ($this->query || null !== $this->fragment)) {\n            $uri .= '\/';\n        }\n\n        if ($this->query) {\n            $uri .= \"?\" . static::encodeQueryFragment($this->query);\n        }\n\n        if (null !== $this->fragment) {\n            $uri .= \"#\" . static::encodeQueryFragment($this->fragment);\n        }\n\n        return $uri;\n    }\n\n    \/**\n     * @return Uri\n     *\/\n    public function normalize()\n    {\n        parent::normalize();\n\n        $this->fragment = static::normalizeFragment($this->fragment);\n\n        if (\n            !$this->isAbsolute() &&\n            !$this->path &&\n            !$this->query &&\n            null === $this->fragment\n        ) {\n            $this->fragment = '';\n        }\n\n        return $this;\n    }\n\n    \/**\n     * @param string $path\n     *\n     * @return string\n     *\/\n    protected static function normalizePath($path)\n    {\n        if ('\/' === substr($path, 0, 1)) {\n            $path = static::removePathDotSegments($path);\n        }\n\n        $path = static::encodePath(\n            static::decodeUrlEncodedChars(\n                $path,\n                '\/[' . static::CHAR_UNRESERVED . ':@&=\\+\\$,\\\/;%]\/'\n            )\n        );\n\n        if (strlen($path) > 1 && '\/' === substr($path, -1)) {\n            $path = substr($path, 0, -1);\n        }\n\n        return $path;\n    }\n\n    \/**\n     * @param string|null $fragment\n     *\n     * @return string|null\n     *\/\n    protected static function normalizeFragment($fragment)\n    {\n        if (null === $fragment || '' === $fragment) {\n            return null;\n        }\n\n        return parent::normalizeFragment($fragment);\n    }\n\n    \/**\n     * @param Uri|string $baseUri\n     *\n     * @return Uri\n     *\/\n    public function makeRelative($baseUri)\n    {\n        \/\/ Copy base URI, we should not modify it\n        $baseUri = new static($baseUri);\n\n        $this->normalize();\n        $baseUri->normalize();\n\n        $host     = $this->getHost();\n        $baseHost = $baseUri->getHost();\n        if ($host && $baseHost && ($host != $baseHost)) {\n            \/\/ Not the same hostname\n            return $this;\n        }\n\n        $port     = $this->getPort();\n        $basePort = $baseUri->getPort();\n        if ($port && $basePort && ($port != $basePort)) {\n            \/\/ Not the same port\n            return $this;\n        }\n\n        $scheme     = $this->getScheme();\n        $baseScheme = $baseUri->getScheme();\n        if ($scheme && $baseScheme && ($scheme != $baseScheme)) {\n            \/\/ Not the same scheme (e.g. HTTP vs. HTTPS)\n            return $this;\n        }\n\n        \/\/ Remove host, port and scheme\n        $this->setHost(null)\n             ->setPort(null)\n             ->setScheme(null);\n\n        \/\/ Is path the same?\n        if ($this->getPath() == $baseUri->getPath()) {\n            $this->setPath('');\n\n            return $this;\n        }\n\n        $pathParts = preg_split('|(\/)|', $this->getPath(), null,\n                                PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);\n        $baseParts = preg_split('|(\/)|', $baseUri->getPath(), null,\n                                PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);\n        if ('\/' !== $baseParts[count($baseParts) - 1]) {\n            $baseParts[] = '\/';\n        }\n\n        \/\/ Get the intersection of existing path parts and those from the\n        \/\/ provided URI\n        $matchingParts = array_intersect_assoc($pathParts, $baseParts);\n\n        \/\/ Loop through the matches\n        foreach ($matchingParts as $index => $segment) {\n            \/\/ If we skip an index at any point, we have parent traversal, and\n            \/\/ need to prepend the path accordingly\n            if ($index && !isset($matchingParts[$index - 1])) {\n                array_unshift($pathParts, '..\/');\n                continue;\n            }\n\n            \/\/ Otherwise, we simply unset the given path segment\n            unset($pathParts[$index]);\n        }\n\n        \/\/ Reset the path by imploding path segments\n        $this->setPath(implode($pathParts));\n\n        return $this;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,254,189,189,189,null,null,254,169,169,null,null,169,null,null,13,13,13,13,13,13,null,169,169,17,17,null,17,17,17,null,169,169,null,254,25,null,null,null,233,233,233,233,null,233,170,null,null,null,120,97,97,97,120,94,null,null,null,36,36,15,15,21,null,36,null,36,null,null,null,null,null,null,null,186,111,0,null,null,111,null,null,75,6,null,null,69,56,3,null,null,53,null,null,13,10,null,null,3,null,null,null,null,null,null,null,19,8,null,null,11,5,3,null,null,2,null,null,6,3,null,null,3,null,null,null,null,null,null,null,null,null,10,1,null,null,9,null,null,null,null,null,null,null,152,8,8,null,8,null,0,null,144,null,144,111,111,null,144,101,101,3,3,101,101,5,5,101,null,144,130,144,0,0,null,144,26,26,null,144,17,17,null,144,null,null,null,null,null,null,null,27,null,27,null,null,27,27,27,3,27,3,3,null,27,null,null,null,null,null,null,null,null,null,24,20,20,null,24,24,24,24,24,24,null,24,4,4,null,24,null,null,null,null,null,null,null,null,null,27,25,null,null,2,null,null,null,null,null,null,null,null,null,null,7,null,7,7,null,7,7,7,null,2,null,null,5,5,5,null,0,null,null,5,5,5,null,0,null,null,null,5,5,5,null,null,5,0,null,0,null,null,5,5,5,5,5,4,4,null,null,null,5,null,null,5,null,null,4,2,2,null,null,null,4,5,null,null,5,null,5,null,null]},{"name":"Eloquent\/Schemer\/Uri\/UriFactory.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri;\n\nuse Icecave\\Isolator\\Isolator;\nuse InvalidArgumentException;\n\nclass UriFactory implements UriFactoryInterface\n{\n    \/**\n     * @param array<string,string>|null $schemeClasses\n     * @param string|null               $defaultClass\n     * @param Isolator|null             $isolator\n     *\/\n    public function __construct(\n        array $schemeClasses = null,\n        $defaultClass = null,\n        Isolator $isolator = null\n    ) {\n        if (null === $schemeClasses) {\n            $schemeClasses = array(\n                'data' => __NAMESPACE__ . '\\DataUri',\n                'file' => __NAMESPACE__ . '\\FileUri',\n                'http' => __NAMESPACE__ . '\\HttpUri',\n                'https' => __NAMESPACE__ . '\\HttpUri',\n            );\n        }\n        if (null === $defaultClass) {\n            $defaultClass = __NAMESPACE__ . '\\Uri';\n        }\n\n        $this->schemeClasses = $schemeClasses;\n        $this->defaultClass = $defaultClass;\n        $this->isolator = Isolator::get($isolator);\n    }\n\n    \/**\n     * @param string $scheme\n     * @param string $class\n     *\/\n    public function setSchemeClass($scheme, $class)\n    {\n        $this->schemeClasses[$scheme] = $class;\n    }\n\n    \/**\n     * @return array<string,string>\n     *\/\n    public function schemeClasses()\n    {\n        return $this->schemeClasses;\n    }\n\n    \/**\n     * @param string|null $scheme\n     *\n     * @return string\n     *\/\n    public function schemeClass($scheme)\n    {\n        if (null === $scheme) {\n            return $this->defaultClass();\n        }\n\n        $scheme = strtolower($scheme);\n        $schemeClasses = $this->schemeClasses();\n        if (!array_key_exists($scheme, $schemeClasses)) {\n            return $this->defaultClass();\n        }\n\n        return $schemeClasses[$scheme];\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function defaultClass()\n    {\n        return $this->defaultClass;\n    }\n\n    \/**\n     * @param string      $uri\n     * @param string|null $defaultScheme\n     *\n     * @return UriInterface\n     *\/\n    public function create($uri, $defaultScheme = null)\n    {\n        if (!is_string($uri)) {\n            throw new InvalidArgumentException('URI must be a string.');\n        }\n\n        $scheme = Uri::parseScheme($uri);\n        if (null === $scheme) {\n            $scheme = $defaultScheme;\n        }\n        $schemeClass = $this->schemeClass($scheme);\n\n        return new $schemeClass($uri);\n    }\n\n    \/**\n     * @param string $uri\n     *\n     * @return UriInterface\n     *\/\n    public function createGeneric($uri)\n    {\n        if (!is_string($uri)) {\n            throw new InvalidArgumentException('URI must be a string.');\n        }\n\n        $schemeClass = $this->defaultClass();\n\n        return new $schemeClass($uri);\n    }\n\n    \/**\n     * @param string $path\n     *\n     * @return FileUri\n     *\/\n    public function fromPath($path)\n    {\n        $schemeClass = $this->schemeClass('file');\n        if ($this->isolator->defined('PHP_WINDOWS_VERSION_BUILD')) {\n            $uri = $schemeClass::fromWindowsPath($path);\n        } else {\n            $uri = $schemeClass::fromUnixPath($path);\n        }\n\n        return $uri;\n    }\n\n    \/**\n     * @param string      $data\n     * @param string|null $mimeType\n     *\n     * @return DataUri\n     *\/\n    public function fromData($data, $mimeType = null)\n    {\n        $schemeClass = $this->schemeClass('data');\n        $uri = new $schemeClass;\n        $uri->setData($data);\n        if (null !== $mimeType) {\n            $uri->setMimeType($mimeType);\n        }\n\n        return $uri;\n    }\n\n    private $schemeClasses;\n    private $defaultClass;\n    private $isolator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,0,0,0,0,0,0,null,0,0,0,0,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,0,0,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,0,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Uri\/UriFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri;\n\ninterface UriFactoryInterface\n{\n    \/**\n     * @param string      $uri\n     * @param string|null $defaultScheme\n     *\n     * @return UriInterface\n     *\/\n    public function create($uri, $defaultScheme = null);\n\n    \/**\n     * @param string $uri\n     *\n     * @return UriInterface\n     *\/\n    public function createGeneric($uri);\n\n    \/**\n     * @param string $path\n     *\n     * @return FileUri\n     *\/\n    public function fromPath($path);\n\n    \/**\n     * @param string      $data\n     * @param string|null $mimeType\n     *\n     * @return DataUri\n     *\/\n    public function fromData($data, $mimeType = null);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Uri\/UriInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Uri;\n\nuse Zend\\Uri\\UriInterface as ZendUriInterface;\n\ninterface UriInterface extends ZendUriInterface\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/BoundConstraintValidator.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Value\\ConcreteValueInterface;\n\nclass BoundConstraintValidator implements BoundConstraintValidatorInterface\n{\n    \/**\n     * @param ConstraintInterface               $constraint\n     * @param ConstraintValidatorInterface|null $validator\n     *\/\n    public function __construct(\n        ConstraintInterface $constraint,\n        ConstraintValidatorInterface $validator = null\n    ) {\n        if (null === $validator) {\n            $validator = new DefaultingConstraintValidator;\n        }\n\n        $this->constraint = $constraint;\n        $this->validator = $validator;\n    }\n\n    \/**\n     * @return ConstraintInterface\n     *\/\n    public function constraint()\n    {\n        return $this->constraint;\n    }\n\n    \/**\n     * @return ConstraintValidatorInterface\n     *\/\n    public function validator()\n    {\n        return $this->validator;\n    }\n\n    \/**\n     * @param ConcreteValueInterface &$value\n     *\n     * @return ValidationResult\n     *\/\n    public function validate(ConcreteValueInterface &$value)\n    {\n        return $this->validator()->validate($this->constraint(), $value);\n    }\n\n    private $validator;\n    private $constraint;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/BoundConstraintValidatorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation;\n\nuse Eloquent\\Schemer\\Value\\ConcreteValueInterface;\n\ninterface BoundConstraintValidatorInterface\n{\n    \/**\n     * @return ConstraintInterface\n     *\/\n    public function constraint();\n\n    \/**\n     * @param ConcreteValueInterface &$value\n     *\n     * @return ValidationResult\n     *\/\n    public function validate(ConcreteValueInterface &$value);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/ConstraintValidator.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation;\n\nuse DateTime;\nuse Eloquent\\Equality\\Comparator;\nuse Eloquent\\Schemer\\Constraint\\ArrayValue;\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Constraint\\DateTimeValue;\nuse Eloquent\\Schemer\\Constraint\\Generic;\nuse Eloquent\\Schemer\\Constraint\\NumberValue;\nuse Eloquent\\Schemer\\Constraint\\ObjectValue;\nuse Eloquent\\Schemer\\Constraint\\PlaceholderSchema;\nuse Eloquent\\Schemer\\Constraint\\Schema;\nuse Eloquent\\Schemer\\Constraint\\StringValue;\nuse Eloquent\\Schemer\\Constraint\\Visitor\\ConstraintVisitorInterface;\nuse Eloquent\\Schemer\\Pointer\\Pointer;\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\nuse Eloquent\\Schemer\\Value;\nuse Zend\\Validator\\EmailAddress;\nuse Zend\\Validator\\Hostname;\nuse Zend\\Validator\\Ip;\nuse Zend\\Validator\\Uri as UriValidator;\nuse Zend\\Validator\\ValidatorInterface;\n\nclass ConstraintValidator implements\n    ConstraintValidatorInterface,\n    ConstraintVisitorInterface\n{\n    \/**\n     * @param boolean|null            $formatValidationEnabled\n     * @param Comparator|null         $comparator\n     * @param ValidatorInterface|null $emailValidator\n     * @param ValidatorInterface|null $hostnameValidator\n     * @param ValidatorInterface|null $ipv4AddressValidator\n     * @param ValidatorInterface|null $ipv6AddressValidator\n     * @param ValidatorInterface|null $uriValidator\n     *\/\n    public function __construct(\n        $formatValidationEnabled = null,\n        Comparator $comparator = null,\n        ValidatorInterface $emailValidator = null,\n        ValidatorInterface $hostnameValidator = null,\n        ValidatorInterface $ipv4AddressValidator = null,\n        ValidatorInterface $ipv6AddressValidator = null,\n        ValidatorInterface $uriValidator = null\n    ) {\n        if (null === $formatValidationEnabled) {\n            $formatValidationEnabled = true;\n        }\n        if (null === $comparator) {\n            $comparator = new Comparator;\n        }\n        if (null === $emailValidator) {\n            $emailValidator = new EmailAddress;\n        }\n        if (null === $hostnameValidator) {\n            $hostnameValidator = new Hostname;\n        }\n        if (null === $ipv4AddressValidator) {\n            $ipv4AddressValidator = new Ip(array(\n                'allowipv4' => true,\n                'allowipv6' => false,\n                'allowipvfuture' => false,\n                'allowliteral' => false,\n            ));\n        }\n        if (null === $ipv6AddressValidator) {\n            $ipv6AddressValidator = new Ip(array(\n                'allowipv4' => false,\n                'allowipv6' => true,\n                'allowipvfuture' => false,\n                'allowliteral' => false,\n            ));\n        }\n        if (null === $uriValidator) {\n            $uriValidator = new UriValidator('Eloquent\\Schemer\\Uri\\Uri');\n        }\n\n        $this->formatValidationEnabled = $formatValidationEnabled;\n        $this->comparator = $comparator;\n        $this->emailValidator = $emailValidator;\n        $this->hostnameValidator = $hostnameValidator;\n        $this->ipv4AddressValidator = $ipv4AddressValidator;\n        $this->ipv6AddressValidator = $ipv6AddressValidator;\n        $this->uriValidator = $uriValidator;\n    }\n\n    \/**\n     * @param boolean $formatValidationEnabled\n     *\/\n    public function setFormatValidationEnabled($formatValidationEnabled)\n    {\n        $this->formatValidationEnabled = $formatValidationEnabled;\n    }\n\n    \/**\n     * @return boolean\n     *\/\n    public function formatValidationEnabled()\n    {\n        return $this->formatValidationEnabled;\n    }\n\n    \/**\n     * @return Comparator\n     *\/\n    public function comparator()\n    {\n        return $this->comparator;\n    }\n\n    \/**\n     * @return ValidatorInterface\n     *\/\n    public function emailValidator()\n    {\n        return $this->emailValidator;\n    }\n\n    \/**\n     * @return ValidatorInterface\n     *\/\n    public function hostnameValidator()\n    {\n        return $this->hostnameValidator;\n    }\n\n    \/**\n     * @return ValidatorInterface\n     *\/\n    public function ipv4AddressValidator()\n    {\n        return $this->ipv4AddressValidator;\n    }\n\n    \/**\n     * @return ValidatorInterface\n     *\/\n    public function ipv6AddressValidator()\n    {\n        return $this->ipv6AddressValidator;\n    }\n\n    \/**\n     * @return ValidatorInterface\n     *\/\n    public function uriValidator()\n    {\n        return $this->uriValidator;\n    }\n\n    \/**\n     * @param ConstraintInterface          $constraint\n     * @param Value\\ConcreteValueInterface &$value\n     * @param PointerInterface|null        $entryPoint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function validate(\n        ConstraintInterface $constraint,\n        Value\\ConcreteValueInterface &$value,\n        PointerInterface $entryPoint = null\n    ) {\n        if (null === $entryPoint) {\n            $entryPoint = new Pointer;\n        }\n\n        $this->clear();\n\n        $this->pushContext(array($value, $entryPoint));\n        $result = $constraint->accept($this);\n\n        $this->clear();\n\n        return $result;\n    }\n\n    \/**\n     * @param Schema $schema\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitSchema(Schema $schema)\n    {\n        $result = $this->result($schema);\n        if (null !== $result) {\n            return $result;\n        }\n\n        $result = $this->register($schema, $this->createResult());\n\n        foreach ($schema->constraints() as $constraint) {\n            $result = $result->merge($constraint->accept($this));\n        }\n\n        if ($result->isValid()) {\n            $result->addMatch($this->createMatch($schema));\n        }\n\n        return $result;\n    }\n\n    \/**\n     * @param PlaceholderSchema $schema\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitPlaceholderSchema(PlaceholderSchema $schema)\n    {\n        return $schema->innerSchema()->accept($this);\n    }\n\n    \/\/ generic constraints =====================================================\n\n    \/**\n     * @param Generic\\EnumConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitEnumConstraint(Generic\\EnumConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        foreach ($constraint->values() as $enumValue) {\n            if ($this->comparator()->equals($value, $enumValue)) {\n                return $this->createResult();\n            }\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param Generic\\TypeConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitTypeConstraint(Generic\\TypeConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        $isValid = false;\n        foreach ($constraint->valueTypes() as $valueType) {\n            if ($valueType === Value\\ValueType::ARRAY_TYPE()) {\n                $isValid = $value instanceof Value\\ArrayValue;\n            } elseif ($valueType === Value\\ValueType::BOOLEAN_TYPE()) {\n                $isValid = $value instanceof Value\\BooleanValue;\n            } elseif ($valueType === Value\\ValueType::DATE_TIME_TYPE()) {\n                $isValid = $value instanceof Value\\DateTimeValue;\n            } elseif ($valueType === Value\\ValueType::INTEGER_TYPE()) {\n                $isValid = $value instanceof Value\\IntegerValue;\n            } elseif ($valueType === Value\\ValueType::NULL_TYPE()) {\n                $isValid = $value instanceof Value\\NullValue;\n            } elseif ($valueType === Value\\ValueType::NUMBER_TYPE()) {\n                $isValid = $value instanceof Value\\NumberValueInterface;\n            } elseif ($valueType === Value\\ValueType::OBJECT_TYPE()) {\n                $isValid = $value instanceof Value\\ObjectValue;\n            } elseif ($valueType === Value\\ValueType::STRING_TYPE()) {\n                $isValid = $value instanceof Value\\StringValue;\n            }\n\n            if ($isValid) {\n                return $this->createResult();\n            }\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param Generic\\AllOfConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitAllOfConstraint(Generic\\AllOfConstraint $constraint)\n    {\n        if (1 === count($constraint->schemas())) {\n            $schemas = $constraint->schemas();\n\n            return $schemas[0]->accept($this);\n        }\n\n        $result = $this->createResult();\n        foreach ($constraint->schemas() as $schema) {\n            $result = $result->merge($schema->accept($this));\n        }\n\n        return $result;\n    }\n\n    \/**\n     * @param Generic\\AnyOfConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitAnyOfConstraint(Generic\\AnyOfConstraint $constraint)\n    {\n        if (1 === count($constraint->schemas())) {\n            $schemas = $constraint->schemas();\n\n            return $schemas[0]->accept($this);\n        }\n\n        foreach ($constraint->schemas() as $schema) {\n            $result = $schema->accept($this);\n            if ($result->isValid()) {\n                return $result;\n            }\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param Generic\\OneOfConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitOneOfConstraint(Generic\\OneOfConstraint $constraint)\n    {\n        if (1 === count($constraint->schemas())) {\n            $schemas = $constraint->schemas();\n\n            return $schemas[0]->accept($this);\n        }\n\n        $validResults = array();\n        foreach ($constraint->schemas() as $schema) {\n            $result = $schema->accept($this);\n            if ($result->isValid()) {\n                $validResults[] = $result;\n            }\n        }\n\n        if (1 === count($validResults)) {\n            return array_shift($validResults);\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param Generic\\NotConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitNotConstraint(Generic\\NotConstraint $constraint)\n    {\n        if (!$constraint->schema()->accept($this)->isValid()) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/\/ object constraints ======================================================\n\n    \/**\n     * @param ObjectValue\\MaximumPropertiesConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitMaximumPropertiesConstraint(ObjectValue\\MaximumPropertiesConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\ObjectValue ||\n            $value->count() <= $constraint->maximum()\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param ObjectValue\\MinimumPropertiesConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitMinimumPropertiesConstraint(ObjectValue\\MinimumPropertiesConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\ObjectValue ||\n            $value->count() >= $constraint->minimum()\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param ObjectValue\\RequiredConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitRequiredConstraint(ObjectValue\\RequiredConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\ObjectValue ||\n            $value->has($constraint->property())\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param ObjectValue\\PropertiesConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitPropertiesConstraint(ObjectValue\\PropertiesConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (!$value instanceof Value\\ObjectValue) {\n            return $this->createResult();\n        }\n\n        $result = $this->createResult();\n        $matchedProperties = array();\n\n        \/\/ properties\n        foreach ($constraint->schemas() as $property => $schema) {\n            if ($value->has($property)) {\n                $matchedProperties[$property] = true;\n                $result = $result->merge(\n                    $this->validateObjectProperty($property, $schema)\n                );\n            } elseif (null !== $schema->defaultValue()) {\n                $result = $result->merge(\n                    $this->createResult(\n                        array(),\n                        array($this->createDefaultValueMatch($schema, $property))\n                    )\n                );\n            }\n        }\n\n        \/\/ pattern properties\n        foreach ($constraint->patternSchemas() as $pattern => $schema) {\n            $pattern = $this->wrapPattern($pattern);\n\n            foreach ($value->keys() as $property) {\n                if (preg_match($pattern, $property)) {\n                    $matchedProperties[$property] = true;\n                    $result = $result->merge(\n                        $this->validateObjectProperty($property, $schema)\n                    );\n                }\n            }\n        }\n\n        \/\/ additional properties\n        foreach ($value->keys() as $property) {\n            if (!array_key_exists($property, $matchedProperties)) {\n                $result = $result->merge(\n                    $this->validateObjectProperty(\n                        $property,\n                        $constraint->additionalSchema()\n                    )\n                );\n            }\n        }\n\n        return $result;\n    }\n\n    \/**\n     * @param ObjectValue\\AdditionalPropertyConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitAdditionalPropertyConstraint(ObjectValue\\AdditionalPropertyConstraint $constraint)\n    {\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param ObjectValue\\DependencyConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitDependencyConstraint(ObjectValue\\DependencyConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\ObjectValue ||\n            !$value->has($constraint->property())\n        ) {\n            return $this->createResult();\n        }\n\n        return $constraint->schema()->accept($this);\n    }\n\n    \/\/ array constraints =======================================================\n\n    \/**\n     * @param ArrayValue\\ItemsConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitItemsConstraint(ArrayValue\\ItemsConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (!$value instanceof Value\\ArrayValue) {\n            return $this->createResult();\n        }\n\n        $result = $this->createResult();\n        $matchedIndices = array();\n\n        \/\/ items\n        foreach ($constraint->schemas() as $index => $schema) {\n            if ($value->has($index)) {\n                $matchedIndices[$index] = true;\n                $result = $result->merge(\n                    $this->validateArrayIndex($index, $schema)\n                );\n            } elseif (null !== $schema->defaultValue()) {\n                $result = $result->merge(\n                    $this->createResult(\n                        array(),\n                        array($this->createDefaultValueMatch($schema, $index))\n                    )\n                );\n            }\n        }\n\n        \/\/ additional items\n        foreach ($value->keys() as $index) {\n            if (!array_key_exists($index, $matchedIndices)) {\n                $result = $result->merge(\n                    $this->validateArrayIndex(\n                        $index,\n                        $constraint->additionalSchema()\n                    )\n                );\n            }\n        }\n\n        return $result;\n    }\n\n    \/**\n     * @param ArrayValue\\AdditionalItemConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitAdditionalItemConstraint(ArrayValue\\AdditionalItemConstraint $constraint)\n    {\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param ArrayValue\\MaximumItemsConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitMaximumItemsConstraint(ArrayValue\\MaximumItemsConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\ArrayValue ||\n            $value->count() <= $constraint->maximum()\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param ArrayValue\\MinimumItemsConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitMinimumItemsConstraint(ArrayValue\\MinimumItemsConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\ArrayValue ||\n            $value->count() >= $constraint->minimum()\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param ArrayValue\\UniqueItemsConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitUniqueItemsConstraint(ArrayValue\\UniqueItemsConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\ArrayValue ||\n            !$constraint->value() ||\n            $this->comparator->equals(\n                $value->value(),\n                $this->unique($value->value())\n            )\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/\/ string constraints ======================================================\n\n    \/**\n     * @param StringValue\\MaximumLengthConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitMaximumLengthConstraint(StringValue\\MaximumLengthConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\StringValue ||\n            mb_strlen($value->value(), 'UTF-8') <= $constraint->maximum()\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param StringValue\\MinimumLengthConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitMinimumLengthConstraint(StringValue\\MinimumLengthConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\StringValue ||\n            mb_strlen($value->value(), 'UTF-8') >= $constraint->minimum()\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param StringValue\\PatternConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitPatternConstraint(StringValue\\PatternConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\StringValue ||\n            preg_match(\n                $this->wrapPattern($constraint->pattern()),\n                $value->value()\n            )\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param StringValue\\DateTimeFormatConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitDateTimeFormatConstraint(StringValue\\DateTimeFormatConstraint $constraint)\n    {\n        if (!$this->formatValidationEnabled()) {\n            return $this->createResult();\n        }\n\n        $value = $this->currentValue();\n        if (!$value instanceof Value\\StringValue) {\n            return $this->createResult();\n        }\n\n        $formats = array(\n            DateTime::ISO8601,\n            'Y-m-d\\TH:i:s\\Z',\n            'Y-m-d\\TH:i:sP',\n        );\n        foreach ($formats as $format) {\n            if (false !== DateTime::createFromFormat($format, $value->value())) {\n                return $this->createResult();\n            }\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param StringValue\\EmailFormatConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitEmailFormatConstraint(StringValue\\EmailFormatConstraint $constraint)\n    {\n        if (!$this->formatValidationEnabled()) {\n            return $this->createResult();\n        }\n\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\StringValue ||\n            $this->emailValidator()->isValid($value->value())\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param StringValue\\HostnameFormatConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitHostnameFormatConstraint(StringValue\\HostnameFormatConstraint $constraint)\n    {\n        if (!$this->formatValidationEnabled()) {\n            return $this->createResult();\n        }\n\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\StringValue ||\n            $this->hostnameValidator()->isValid($value->value())\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param StringValue\\Ipv4AddressFormatConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitIpv4AddressFormatConstraint(StringValue\\Ipv4AddressFormatConstraint $constraint)\n    {\n        if (!$this->formatValidationEnabled()) {\n            return $this->createResult();\n        }\n\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\StringValue ||\n            $this->ipv4AddressValidator()->isValid($value->value())\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param StringValue\\Ipv6AddressFormatConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitIpv6AddressFormatConstraint(StringValue\\Ipv6AddressFormatConstraint $constraint)\n    {\n        if (!$this->formatValidationEnabled()) {\n            return $this->createResult();\n        }\n\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\StringValue ||\n            $this->ipv6AddressValidator()->isValid($value->value())\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param StringValue\\UriFormatConstraint $constraint\n     *\n     * @return mixed\n     *\/\n    public function visitUriFormatConstraint(StringValue\\UriFormatConstraint $constraint)\n    {\n        if (!$this->formatValidationEnabled()) {\n            return $this->createResult();\n        }\n\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\StringValue ||\n            $this->uriValidator()->isValid($value->value())\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/\/ number constraints ======================================================\n\n    \/**\n     * @param NumberValue\\MultipleOfConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitMultipleOfConstraint(NumberValue\\MultipleOfConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (!$value instanceof Value\\NumberValueInterface) {\n            return $this->createResult();\n        }\n\n        if (\n            $value instanceof Value\\FloatingPointValue ||\n            is_float($constraint->quantity())\n        ) {\n            if (0 == fmod($value->value(), $constraint->quantity())) {\n                return $this->createResult();\n            }\n        } else {\n            if (0 === $value->value() % $constraint->quantity()) {\n                return $this->createResult();\n            }\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param NumberValue\\MaximumConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitMaximumConstraint(NumberValue\\MaximumConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\NumberValueInterface ||\n            $value->value() <= $constraint->maximum()\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param NumberValue\\MinimumConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitMinimumConstraint(NumberValue\\MinimumConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\NumberValueInterface ||\n            $value->value() >= $constraint->minimum()\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/\/ date-time constraints ===================================================\n\n    \/**\n     * @param DateTimeValue\\MaximumDateTimeConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitMaximumDateTimeConstraint(DateTimeValue\\MaximumDateTimeConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\DateTimeValue ||\n            $value->value() <= $constraint->maximum()\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/**\n     * @param DateTimeValue\\MinimumDateTimeConstraint $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function visitMinimumDateTimeConstraint(DateTimeValue\\MinimumDateTimeConstraint $constraint)\n    {\n        $value = $this->currentValue();\n        if (\n            !$value instanceof Value\\DateTimeValue ||\n            $value->value() >= $constraint->minimum()\n        ) {\n            return $this->createResult();\n        }\n\n        return $this->createSingleIssueResult($constraint);\n    }\n\n    \/\/ implementation details ==================================================\n\n    \/**\n     * @param string $property\n     * @param Schema $schema\n     *\n     * @return Result\\ValidationResult\n     *\/\n    protected function validateObjectProperty($property, Schema $schema)\n    {\n        list($value, $pointer) = $this->currentContext();\n        $this->pushContext(array(\n            $value->get($property),\n            $pointer->joinAtoms($property)\n        ));\n        $result = $schema->accept($this);\n        $this->popContext();\n\n        return $result;\n    }\n\n    \/**\n     * @param integer $index\n     * @param Schema  $schema\n     *\n     * @return Result\\ValidationResult\n     *\/\n    protected function validateArrayIndex($index, Schema $schema)\n    {\n        list($value, $pointer) = $this->currentContext();\n        $this->pushContext(array(\n            $value->get($index),\n            $pointer->joinAtoms(strval($index))\n        ));\n        $result = $schema->accept($this);\n        $this->popContext();\n\n        return $result;\n    }\n\n    \/**\n     * @param tuple<ConcreteValueInterface,PointerInterface> $context\n     *\/\n    protected function pushContext(array $context)\n    {\n        array_push($this->contextStack, $context);\n    }\n\n    protected function popContext()\n    {\n        array_pop($this->contextStack);\n    }\n\n    protected function clear()\n    {\n        $this->contextStack = array();\n        $this->results = array();\n    }\n\n    \/**\n     * @return tuple<ConcreteValueInterface,PointerInterface>\n     *\/\n    protected function currentContext()\n    {\n        return $this->contextStack[count($this->contextStack) - 1];\n    }\n\n    \/**\n     * @return ConcreteValueInterface\n     *\/\n    protected function currentValue()\n    {\n        list($value) = $this->currentContext();\n\n        return $value;\n    }\n\n    \/**\n     * @return PointerInterface\n     *\/\n    protected function currentPointer()\n    {\n        list(, $pointer) = $this->currentContext();\n\n        return $pointer;\n    }\n\n    \/**\n     * @param array<Result\\ValidationIssue>|null $issues\n     * @param array<Result\\ValidationMatch>|null $matches\n     *\n     * @return Result\\ValidationResult\n     *\/\n    protected function createResult(array $issues = null, array $matches = null)\n    {\n        return new Result\\ValidationResult($issues, $matches);\n    }\n\n    \/**\n     * @param ConstraintInterface $constraint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    protected function createSingleIssueResult(ConstraintInterface $constraint)\n    {\n        return $this->createResult(array($this->createIssue($constraint)));\n    }\n\n    \/**\n     * @param ConstraintInterface $constraint\n     *\n     * @return Result\\ValidationIssue\n     *\/\n    protected function createIssue(ConstraintInterface $constraint)\n    {\n        list($value, $pointer) = $this->currentContext();\n\n        return new Result\\ValidationIssue(\n            $constraint,\n            $value,\n            $pointer\n        );\n    }\n\n    \/**\n     * @param Schema $schema\n     *\n     * @return Result\\ValidationMatch\n     *\/\n    protected function createMatch(Schema $schema)\n    {\n        list(, $pointer) = $this->currentContext();\n\n        return new Result\\ValidationMatch(\n            $schema,\n            $pointer\n        );\n    }\n\n    \/**\n     * @param Schema         $schema\n     * @param integer|string $atom\n     *\n     * @return Result\\ValidationMatch\n     *\/\n    protected function createDefaultValueMatch(Schema $schema, $atom)\n    {\n        list(, $pointer) = $this->currentContext();\n\n        return new Result\\DefaultValueMatch(\n            $schema,\n            $pointer->joinAtoms($atom)\n        );\n    }\n\n    \/**\n     * @param array<integer,mixed> $array\n     *\n     * @return array<integer,mixed>\n     *\/\n    protected function unique(array $array)\n    {\n        $unique = array();\n        foreach ($array as $value) {\n            if (!in_array($value, $unique, true)) {\n                $unique[] = $value;\n            }\n        }\n\n        return $unique;\n    }\n\n    \/**\n     * @param string $pattern\n     *\n     * @return string\n     *\/\n    protected function wrapPattern($pattern)\n    {\n        return sprintf('\/%s\/', str_replace('\/', '\\\\\/', $pattern));\n    }\n\n    \/**\n     * @param Schema                  $schema\n     * @param Result\\ValidationResult $result\n     *\n     * @return Result\\ValidationResult\n     *\/\n    protected function register(\n        Schema $schema,\n        Result\\ValidationResult $result\n    ) {\n        $this->results[$this->generateVisitKey($schema)] = $result;\n\n        return $result;\n    }\n\n    \/**\n     * @param Schema $schema\n     *\n     * @return Result\\ValidationResult|null\n     *\/\n    protected function result(Schema $schema)\n    {\n        $key = $this->generateVisitKey($schema);\n        if (array_key_exists($key, $this->results)) {\n            return $this->results[$key];\n        }\n\n        return null;\n    }\n\n    \/**\n     * @param Schema $schema\n     *\n     * @return string\n     *\/\n    protected function generateVisitKey(Schema $schema)\n    {\n        return sprintf(\n            '%s.%s',\n            spl_object_hash($schema),\n            spl_object_hash($this->currentValue())\n        );\n    }\n\n    private $formatValidationEnabled;\n    private $comparator;\n    private $emailValidator;\n    private $hostnameValidator;\n    private $ipv4AddressValidator;\n    private $ipv6AddressValidator;\n    private $uriValidator;\n\n    private $contextStack;\n    private $results;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,null,166,166,166,166,166,166,166,166,null,null,null,null,null,null,0,0,null,null,null,null,null,null,33,null,null,null,null,null,null,null,76,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,3,null,null,null,null,null,null,null,12,null,null,null,null,null,null,null,null,null,null,null,null,null,null,166,166,166,null,166,null,166,166,null,166,null,166,null,null,null,null,null,null,null,null,null,166,166,10,null,null,166,null,166,166,166,null,166,166,166,null,166,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,76,76,76,74,null,72,null,8,null,null,null,null,null,null,null,null,null,166,166,166,166,49,166,31,166,8,166,44,166,11,166,37,166,166,166,63,63,null,166,166,null,51,null,50,null,null,null,null,null,null,null,null,null,7,2,null,2,null,null,5,5,5,5,null,5,null,null,null,null,null,null,null,null,null,107,2,null,2,null,null,107,107,107,107,null,31,null,4,null,null,null,null,null,null,null,null,null,5,2,null,2,null,null,3,3,3,3,2,2,3,null,3,1,null,null,2,null,null,null,null,null,null,null,null,null,3,2,null,null,1,null,null,null,null,null,null,null,null,null,null,null,3,null,3,2,3,2,null,null,1,null,null,null,null,null,null,null,null,null,3,null,3,2,3,2,null,null,1,null,null,null,null,null,null,null,null,null,15,null,15,14,15,15,null,null,2,null,null,null,null,null,null,null,null,null,166,166,22,null,null,166,166,null,null,166,166,143,143,143,143,166,166,166,166,166,166,166,166,166,null,null,166,4,null,4,4,4,4,4,4,4,4,166,null,null,166,166,59,59,59,59,59,59,59,166,null,166,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,166,null,166,166,166,166,null,null,14,null,null,null,null,null,null,null,null,null,null,null,74,74,8,null,null,70,70,null,null,70,6,6,6,6,6,6,0,0,0,0,0,0,0,70,null,null,70,70,70,70,70,70,70,70,70,70,null,70,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,3,null,3,2,3,2,null,null,1,null,null,null,null,null,null,null,null,null,43,null,43,42,43,42,null,null,1,null,null,null,null,null,null,null,null,null,24,null,24,22,20,20,20,20,24,23,null,null,1,null,null,null,null,null,null,null,null,null,null,null,3,null,3,2,3,2,null,null,1,null,null,null,null,null,null,null,null,null,3,null,3,2,3,2,null,null,1,null,null,null,null,null,null,null,null,null,4,null,4,3,3,3,3,4,3,null,null,1,null,null,null,null,null,null,null,null,null,5,0,null,null,5,5,1,null,null,null,4,4,4,4,4,4,3,null,1,null,1,null,null,null,null,null,null,null,null,null,3,0,null,null,3,null,3,2,3,2,null,null,1,null,null,null,null,null,null,null,null,null,4,0,null,null,4,null,4,3,4,2,null,null,2,null,null,null,null,null,null,null,null,null,4,0,null,null,4,null,4,3,4,2,null,null,2,null,null,null,null,null,null,null,null,null,4,0,null,null,4,null,4,3,4,2,null,null,2,null,null,null,null,null,null,null,null,null,13,0,null,null,13,null,13,12,13,12,null,null,1,null,null,null,null,null,null,null,null,null,null,null,8,8,2,null,null,null,6,4,6,5,3,null,2,2,1,null,null,null,2,null,null,null,null,null,null,null,null,null,6,null,6,6,6,4,null,null,2,null,null,null,null,null,null,null,null,null,42,null,42,42,42,40,null,null,2,null,null,null,null,null,null,null,null,null,null,null,3,null,3,2,3,2,null,null,1,null,null,null,null,null,null,null,null,null,3,null,3,2,3,2,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,166,166,166,166,166,166,166,null,166,null,null,null,null,null,null,null,null,null,null,70,70,70,70,70,70,70,null,70,null,null,null,null,null,null,null,166,166,null,null,null,166,166,null,null,null,166,166,166,null,null,null,null,null,null,166,null,null,null,null,null,null,null,166,null,166,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,null,166,null,null,null,null,null,null,null,null,null,83,null,null,null,null,null,null,null,null,null,83,null,83,83,83,null,83,null,null,null,null,null,null,null,null,null,166,null,166,166,null,166,null,null,null,null,null,null,null,null,null,null,166,null,166,166,166,166,null,null,null,null,null,null,null,null,null,20,20,20,20,20,20,null,20,null,null,null,null,null,null,null,null,null,7,null,null,null,null,null,null,null,null,null,null,null,null,166,null,166,null,null,null,null,null,null,null,null,null,166,166,10,null,null,166,null,null,null,null,null,null,null,null,null,166,166,166,166,166,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/ConstraintValidatorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\nuse Eloquent\\Schemer\\Value\\ConcreteValueInterface;\n\ninterface ConstraintValidatorInterface\n{\n    \/**\n     * @param ConstraintInterface    $constraint\n     * @param ConcreteValueInterface &$value\n     * @param PointerInterface|null  $entryPoint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function validate(\n        ConstraintInterface $constraint,\n        ConcreteValueInterface &$value,\n        PointerInterface $entryPoint = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/DefaultValueTransform.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation;\n\nuse Eloquent\\Equality\\Comparator;\nuse Eloquent\\Schemer\\Value;\nuse stdClass;\n\nclass DefaultValueTransform extends Value\\Transform\\AbstractValueTransform\n{\n    \/**\n     * @param Result\\ValidationResult $result\n     * @param Comparator|null         $comparator\n     *\/\n    public function __construct(\n        Result\\ValidationResult $result,\n        Comparator $comparator = null\n    ) {\n        parent::__construct();\n\n        if (null === $comparator) {\n            $comparator = new Comparator;\n        }\n\n        $this->result = $result;\n        $this->comparator = $comparator;\n    }\n\n    \/**\n     * @return Result\\ValidationResult\n     *\/\n    public function result()\n    {\n        return $this->result;\n    }\n\n    \/**\n     * @return Comparator\n     *\/\n    public function comparator()\n    {\n        return $this->comparator;\n    }\n\n    \/**\n     * @param Value\\ArrayValue $value\n     *\n     * @return Value\\ArrayValue\n     *\/\n    public function visitArrayValue(Value\\ArrayValue $value)\n    {\n        return new Value\\ArrayValue(\n            array_merge(\n                iterator_to_array(parent::visitArrayValue($value)),\n                $this->defaultItems()\n            )\n        );\n    }\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\n     * @return Value\\ObjectValue\n     *\/\n    public function visitObjectValue(Value\\ObjectValue $value)\n    {\n        $subValues = new stdClass;\n        foreach (parent::visitObjectValue($value) as $property => $subValue) {\n            $subValues->$property = $subValue;\n        }\n        foreach ($this->defaultProperties() as $property => $subValue) {\n            $subValues->$property = $subValue;\n        }\n\n        return new Value\\ObjectValue($subValues);\n    }\n\n    \/**\n     * @return array<string,Value\\ConcreteValueInterface>\n     *\/\n    protected function defaultProperties()\n    {\n        $defaultProperties = array();\n        foreach ($this->result()->defaultValueMatches() as $match) {\n            if (\n                $this->comparator()->equals(\n                    $this->context(),\n                    $match->pointer()->parent()\n                )\n            ) {\n                $atoms = $match->pointer()->atoms();\n                $defaultProperties[array_pop($atoms)] = $match\n                    ->schema()\n                    ->defaultValue();\n            }\n        }\n\n        return $defaultProperties;\n    }\n\n    \/**\n     * @return array<integer,Value\\ConcreteValueInterface>\n     *\/\n    protected function defaultItems()\n    {\n        $defaultItems = array();\n        foreach ($this->defaultProperties() as $index => $value) {\n            $defaultItems[intval($index)] = $value;\n        }\n\n        return $defaultItems;\n    }\n\n    private $result;\n    private $comparator;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,null,6,6,6,null,6,6,6,null,null,null,null,null,null,6,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,3,3,3,3,3,6,null,null,null,null,null,null,null,null,null,3,3,1,3,3,1,3,null,3,null,null,null,null,null,null,null,6,6,null,2,2,2,2,2,2,2,2,2,2,6,null,6,null,null,null,null,null,null,null,3,3,1,3,null,3,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/DefaultValueTransformFactory.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation;\n\nclass DefaultValueTransformFactory\n{\n    \/**\n     * @param Result\\ValidationResult $result\n     *\/\n    public function create(Result\\ValidationResult $result)\n    {\n        return new DefaultValueTransform($result);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Validation\/DefaultingConstraintValidator.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\nuse Eloquent\\Schemer\\Value\\ConcreteValueInterface;\n\nclass DefaultingConstraintValidator implements ConstraintValidatorInterface\n{\n    \/**\n     * @param ConstraintValidatorInterface|null $validator\n     * @param DefaultValueTransformFactory|null $defaultTransformFactory\n     *\/\n    public function __construct(\n        ConstraintValidatorInterface $validator = null,\n        DefaultValueTransformFactory $defaultTransformFactory = null\n    ) {\n        if (null === $validator) {\n            $validator = new ConstraintValidator;\n        }\n        if (null === $defaultTransformFactory) {\n            $defaultTransformFactory = new DefaultValueTransformFactory;\n        }\n\n        $this->validator = $validator;\n        $this->defaultTransformFactory = $defaultTransformFactory;\n    }\n\n    \/**\n     * @return ConstraintValidatorInterface\n     *\/\n    public function validator()\n    {\n        return $this->validator;\n    }\n\n    \/**\n     * @return DefaultValueTransformFactory\n     *\/\n    public function defaultTransformFactory()\n    {\n        return $this->defaultTransformFactory;\n    }\n\n    \/**\n     * @param ConstraintInterface    $constraint\n     * @param ConcreteValueInterface &$value\n     * @param PointerInterface|null  $entryPoint\n     *\n     * @return Result\\ValidationResult\n     *\/\n    public function validate(\n        ConstraintInterface $constraint,\n        ConcreteValueInterface &$value,\n        PointerInterface $entryPoint = null\n    ) {\n        $result = $this->validator()->validate($constraint, $value, $entryPoint);\n        $value = $this->defaultTransformFactory()\n            ->create($result)\n            ->transform($value);\n\n        return $result;\n    }\n\n    private $validator;\n    private $defaultTransformFactory;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/Exception\/InvalidValueException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation\\Exception;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Validation\\Result\\IssueRenderer;\nuse Eloquent\\Schemer\\Validation\\Result\\IssueRendererInterface;\nuse Eloquent\\Schemer\\Validation\\Result\\ValidationResult;\nuse Eloquent\\Schemer\\Value\\ValueInterface;\nuse Exception;\n\nfinal class InvalidValueException extends Exception\n{\n    \/**\n     * @param ValueInterface              $value\n     * @param ConstraintInterface         $constraint\n     * @param ValidationResult            $result\n     * @param Exception|null              $previous\n     * @param IssueRendererInterface|null $issueRenderer\n     *\/\n    public function __construct(\n        ValueInterface $value,\n        ConstraintInterface $constraint,\n        ValidationResult $result,\n        Exception $previous = null,\n        IssueRendererInterface $issueRenderer = null\n    ) {\n        if (null === $issueRenderer) {\n            $issueRenderer = new IssueRenderer;\n        }\n\n        $this->value = $value;\n        $this->constraint = $constraint;\n        $this->result = $result;\n        $this->issueRenderer = $issueRenderer;\n\n        parent::__construct(\n            sprintf(\n                \"The provided value is not valid against the given constraint:\\n%s\",\n                $issueRenderer->renderManyString($result->issues())\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return ValueInterface\n     *\/\n    public function value()\n    {\n        return $this->value;\n    }\n\n    \/**\n     * @return ConstraintInterface\n     *\/\n    public function constraint()\n    {\n        return $this->constraint;\n    }\n\n    \/**\n     * @return ValidationResult\n     *\/\n    public function result()\n    {\n        return $this->result;\n    }\n\n    private $value;\n    private $constraint;\n    private $result;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,null,0,0,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/Result\/AbstractMatch.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation\\Result;\n\nuse Eloquent\\Schemer\\Constraint\\Schema;\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\n\nabstract class AbstractMatch implements MatchInterface\n{\n    \/**\n     * @param Schema           $schema\n     * @param PointerInterface $pointer\n     *\/\n    public function __construct(\n        Schema $schema,\n        PointerInterface $pointer\n    ) {\n        $this->schema = $schema;\n        $this->pointer = $pointer;\n    }\n\n    \/**\n     * @return Schema\n     *\/\n    public function schema()\n    {\n        return $this->schema;\n    }\n\n    \/**\n     * @return PointerInterface\n     *\/\n    public function pointer()\n    {\n        return $this->pointer;\n    }\n\n    private $constraint;\n    private $pointer;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/Result\/DefaultValueMatch.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation\\Result;\n\nclass DefaultValueMatch extends AbstractMatch\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/Result\/IssueRenderer.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation\\Result;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintVisitorInterface;\nuse Eloquent\\Schemer\\Constraint\\Renderer\\ConstraintFailureRenderer;\n\nclass IssueRenderer implements IssueRendererInterface\n{\n    \/**\n     * @param ConstraintVisitorInterface|null $constraintRenderer\n     *\/\n    public function __construct(\n        ConstraintVisitorInterface $constraintRenderer = null\n    ) {\n        if (null === $constraintRenderer) {\n            $constraintRenderer = new ConstraintFailureRenderer;\n        }\n\n        $this->constraintRenderer = $constraintRenderer;\n    }\n\n    \/**\n     * @return ConstraintVisitorInterface\n     *\/\n    public function constraintRenderer()\n    {\n        return $this->constraintRenderer;\n    }\n\n    \/**\n     * @param ValidationIssue $issue\n     *\n     * @return string\n     *\/\n    public function render(ValidationIssue $issue)\n    {\n        if ($issue->pointer()->hasAtoms()) {\n            return sprintf(\n                \"Validation failed for value at %s: %s\",\n                var_export($issue->pointer()->string(), true),\n                $issue->constraint()->accept($this->constraintRenderer())\n            );\n        }\n\n        return sprintf(\n            \"Validation failed for value at document root: %s\",\n            $issue->constraint()->accept($this->constraintRenderer())\n        );\n    }\n\n    \/**\n     * @param array<ValidationIssue> $issues\n     *\n     * @return array<string>\n     *\/\n    public function renderMany(array $issues)\n    {\n        $self = $this;\n\n        return array_map(function (ValidationIssue $issue) use ($self) {\n            return $self->render($issue);\n        }, $issues);\n    }\n\n    \/**\n     * @param array<ValidationIssue> $issues\n     * @param string|null            $format\n     * @param string|null            $glue\n     *\n     * @return string\n     *\/\n    public function renderManyString(\n        array $issues,\n        $format = null,\n        $glue = null\n    ) {\n        if (null === $format) {\n            $format = '  - %s';\n        }\n        if (null === $glue) {\n            $glue = \"\\n\";\n        }\n\n        $self = $this;\n\n        return implode(\n            $glue,\n            array_map(function (ValidationIssue $issue) use ($self, $format) {\n                return sprintf($format, $self->render($issue));\n            }, $issues)\n        );\n    }\n\n    private $constraintRenderer;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,null,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,null,0,0,null,0,0,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/Result\/IssueRendererInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation\\Result;\n\ninterface IssueRendererInterface\n{\n    \/**\n     * @param ValidationIssue $issue\n     *\n     * @return string\n     *\/\n    public function render(ValidationIssue $issue);\n\n    \/**\n     * @param array<ValidationIssue> $issues\n     *\n     * @return array<string>\n     *\/\n    public function renderMany(array $issues);\n\n    \/**\n     * @param array<ValidationIssue> $issues\n     * @param string|null            $format\n     * @param string|null            $glue\n     *\n     * @return string\n     *\/\n    public function renderManyString(\n        array $issues,\n        $format = null,\n        $glue = null\n    );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/Result\/MatchInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation\\Result;\n\ninterface MatchInterface\n{\n    \/**\n     * @return \\Eloquent\\Schemer\\Constraint\\Schema\n     *\/\n    public function schema();\n\n    \/**\n     * @return \\Eloquent\\Schemer\\Pointer\\PointerInterface\n     *\/\n    public function pointer();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/Result\/ValidationIssue.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation\\Result;\n\nuse Eloquent\\Schemer\\Constraint\\ConstraintInterface;\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\nuse Eloquent\\Schemer\\Value\\ConcreteValueInterface;\n\nclass ValidationIssue\n{\n    \/**\n     * @param ConstraintInterface    $constraint\n     * @param ConcreteValueInterface $value\n     * @param PointerInterface       $pointer\n     *\/\n    public function __construct(\n        ConstraintInterface $constraint,\n        ConcreteValueInterface $value,\n        PointerInterface $pointer\n    ) {\n        $this->constraint = $constraint;\n        $this->value = $value;\n        $this->pointer = $pointer;\n    }\n\n    \/**\n     * @return ConstraintInterface\n     *\/\n    public function constraint()\n    {\n        return $this->constraint;\n    }\n\n    \/**\n     * @return ConcreteValueInterface\n     *\/\n    public function value()\n    {\n        return $this->value;\n    }\n\n    \/**\n     * @return PointerInterface\n     *\/\n    public function pointer()\n    {\n        return $this->pointer;\n    }\n\n    private $constraint;\n    private $value;\n    private $pointer;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/Result\/ValidationMatch.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation\\Result;\n\nclass ValidationMatch extends AbstractMatch\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Validation\/Result\/ValidationResult.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Validation\\Result;\n\nclass ValidationResult\n{\n    \/**\n     * @param array<ValidationIssue>|null $issues\n     * @param array<MatchInterface>|null  $matches\n     *\/\n    public function __construct(array $issues = null, array $matches = null)\n    {\n        if (null === $issues) {\n            $issues = array();\n        }\n        if (null === $matches) {\n            $matches = array();\n        }\n\n        $this->issues = $issues;\n        $this->matches = $matches;\n    }\n\n    \/**\n     * @return array<ValidationIssue>\n     *\/\n    public function issues()\n    {\n        return $this->issues;\n    }\n\n    \/**\n     * @return boolean\n     *\/\n    public function isValid()\n    {\n        return count($this->issues) < 1;\n    }\n\n    \/**\n     * @param MatchInterface $match\n     *\/\n    public function addMatch(MatchInterface $match)\n    {\n        $this->matches[] = $match;\n    }\n\n    \/**\n     * @return array<MatchInterface>\n     *\/\n    public function matches()\n    {\n        return $this->matches;\n    }\n\n    \/**\n     * @return array<ValidationMatch>\n     *\/\n    public function validationMatches()\n    {\n        $matches = array();\n        foreach ($this->matches() as $match) {\n            if ($match instanceof ValidationMatch) {\n                $matches[] = $match;\n            }\n        }\n\n        return $matches;\n    }\n\n    \/**\n     * @return array<DefaultValueMatch>\n     *\/\n    public function defaultValueMatches()\n    {\n        $matches = array();\n        foreach ($this->matches() as $match) {\n            if ($match instanceof DefaultValueMatch) {\n                $matches[] = $match;\n            }\n        }\n\n        return $matches;\n    }\n\n    \/**\n     * @param ValidationResult $result\n     *\n     * @return ValidationResult\n     *\/\n    public function merge(ValidationResult $result)\n    {\n        return new static(\n            array_merge($this->issues, $result->issues()),\n            array_merge($this->matches, $result->matches())\n        );\n    }\n\n    private $issues;\n    private $matches;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/AbstractConcreteValue.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\nabstract class AbstractConcreteValue implements ConcreteValueInterface\n{\n    \/**\n     * @param mixed $value\n     *\/\n    protected function __construct($value)\n    {\n        $this->value = $value;\n    }\n\n    \/**\n     * @return mixed\n     *\/\n    public function value()\n    {\n        $valueMap = array();\n\n        return $this->unwrap($valueMap);\n    }\n\n    \/**\n     * @param array<tuple<string,mixed>> &$valueMap\n     *\n     * @return mixed\n     *\/\n    protected function unwrap(array &$valueMap)\n    {\n        return $this->value;\n    }\n\n    \/**\n     * @param ValueInterface $value\n     *\/\n    protected function valueTypeCheck(ValueInterface $value)\n    {\n    }\n\n    protected $value;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/ArrayValue.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\nuse ArrayAccess;\nuse ArrayIterator;\nuse IteratorAggregate;\n\nclass ArrayValue extends AbstractConcreteValue implements\n    ValueContainerInterface,\n    ArrayAccess,\n    IteratorAggregate\n{\n    \/**\n     * @param array<integer,mixed>|null $value\n     *\/\n    public function __construct(array $value = null)\n    {\n        if (null === $value) {\n            $value = array();\n        }\n\n        $expectedIndex = 0;\n        foreach ($value as $index => $subValue) {\n            if ($index !== $expectedIndex++) {\n                throw new Exception\\NonSequentialException(array_keys($value));\n            }\n\n            $this->valueTypeCheck($subValue);\n        }\n\n        parent::__construct($value);\n    }\n\n    \/**\n     * @return ValueType\n     *\/\n    public function valueType()\n    {\n        return ValueType::ARRAY_TYPE();\n    }\n\n    \/**\n     * @return array<integer,integer>\n     *\/\n    public function keys()\n    {\n        return array_keys($this->value);\n    }\n\n    \/**\n     * @return array<integer,ValueInterface>\n     *\/\n    public function values()\n    {\n        return array_values($this->value);\n    }\n\n    \/**\n     * @return integer\n     *\/\n    public function count()\n    {\n        return count($this->value);\n    }\n\n    \/**\n     * @param integer        $index\n     * @param ValueInterface $value\n     *\/\n    public function set($index, ValueInterface $value)\n    {\n        if (!is_integer($index)) {\n            throw new Exception\\InvalidKeyException($index);\n        }\n\n        for ($i = count($this->value); $i < $index - 1; $i ++) {\n            $this->value[] = null;\n        }\n\n        $this->value[$index] = $value;\n    }\n\n    \/**\n     * @param ValueInterface $value\n     *\/\n    public function add(ValueInterface $value)\n    {\n        $this->value[] = $value;\n    }\n\n    \/**\n     * @param integer $index\n     *\/\n    public function remove($index)\n    {\n        array_splice($this->value, $index, 1);\n    }\n\n    \/**\n     * @param integer $index\n     *\n     * @return boolean\n     *\/\n    public function has($index)\n    {\n        return array_key_exists($index, $this->value);\n    }\n\n    \/**\n     * @param integer $index\n     *\n     * @return ValueInterface\n     *\/\n    public function get($index)\n    {\n        if (!$this->has($index)) {\n            throw new Exception\\UndefinedKeyException($index);\n        }\n\n        return $this->value[$index];\n    }\n\n    \/**\n     * @param integer $index\n     *\n     * @return mixed\n     *\/\n    public function getRaw($index)\n    {\n        return $this->get($index)->value();\n    }\n\n    \/**\n     * @param integer             $index\n     * @param ValueInterface|null $default\n     *\n     * @return ValueInterface|null\n     *\/\n    public function getDefault($index, ValueInterface $default = null)\n    {\n        if (!$this->has($index)) {\n            return $default;\n        }\n\n        return $this->value[$index];\n    }\n\n    \/**\n     * @param integer $index\n     * @param mixed   $default\n     *\n     * @return mixed\n     *\/\n    public function getRawDefault($index, $default = null)\n    {\n        if (!$this->has($index)) {\n            return $default;\n        }\n\n        return $this->getRaw($index);\n    }\n\n    \/**\n     * @param Visitor\\ValueVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(Visitor\\ValueVisitorInterface $visitor)\n    {\n        return $visitor->visitArrayValue($this);\n    }\n\n    \/**\n     * @param integer $index\n     *\n     * @return boolean\n     *\/\n    public function offsetExists($index)\n    {\n        return $this->has($index);\n    }\n\n    \/**\n     * @param integer $index\n     *\n     * @return ValueInterface\n     *\/\n    public function offsetGet($index)\n    {\n        return $this->get($index);\n    }\n\n    \/**\n     * @param integer|null $index\n     * @param mixed        $value\n     *\/\n    public function offsetSet($index, $value)\n    {\n        if (null === $index) {\n            $this->add($value);\n        } else {\n            $this->set($index, $value);\n        }\n    }\n\n    \/**\n     * @param integer $index\n     *\/\n    public function offsetUnset($index)\n    {\n        $this->remove($index);\n    }\n\n    \/**\n     * @return ArrayIterator\n     *\/\n    public function getIterator()\n    {\n        return new ArrayIterator($this->value);\n    }\n\n    \/**\n     * @param array<tuple<string,mixed>> &$valueMap\n     *\n     * @return mixed\n     *\/\n    protected function unwrap(array &$valueMap)\n    {\n        $id = spl_object_hash($this);\n\n        if (array_key_exists($id, $valueMap)) {\n            return $valueMap[$id];\n        }\n\n        $valueMap[$id] = array();\n        foreach ($this->value as $key => $subValue) {\n            $valueMap[$id][$key] = $subValue->unwrap($valueMap);\n        }\n\n        return $valueMap[$id];\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,0,null,null,0,0,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,0,0,null,null,0,0,0,null,0,0,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,0,0,0,0,null,0,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,0,0,null,null,0,0,0,0,null,0,null,null]},{"name":"Eloquent\/Schemer\/Value\/BooleanValue.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\nclass BooleanValue extends AbstractConcreteValue\n{\n    \/**\n     * @param boolean $value\n     *\/\n    public function __construct($value)\n    {\n        if (!is_bool($value)) {\n            throw new Exception\\UnexpectedValueTypeException($value, 'boolean');\n        }\n\n        parent::__construct($value);\n    }\n\n    \/**\n     * @return ValueType\n     *\/\n    public function valueType()\n    {\n        return ValueType::BOOLEAN_TYPE();\n    }\n\n    \/**\n     * @param Visitor\\ValueVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(Visitor\\ValueVisitorInterface $visitor)\n    {\n        return $visitor->visitBooleanValue($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Value\/ConcreteValueInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\ninterface ConcreteValueInterface extends ValueInterface\n{\n    \/**\n     * @return mixed\n     *\/\n    public function value();\n\n    \/**\n     * @return ValueType\n     *\/\n    public function valueType();\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/DateTimeValue.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\nuse DateTime;\n\nclass DateTimeValue extends AbstractConcreteValue\n{\n    \/**\n     * @param DateTime $value\n     *\/\n    public function __construct(DateTime $value)\n    {\n        parent::__construct($value);\n    }\n\n    \/**\n     * @return ValueType\n     *\/\n    public function valueType()\n    {\n        return ValueType::DATE_TIME_TYPE();\n    }\n\n    \/**\n     * @param Visitor\\ValueVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(Visitor\\ValueVisitorInterface $visitor)\n    {\n        return $visitor->visitDateTimeValue($this);\n    }\n\n    \/**\n     * @param array<tuple<string,mixed>> &$valueMap\n     *\n     * @return mixed\n     *\/\n    protected function unwrap(array &$valueMap)\n    {\n        return clone $this->value;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Value\/Exception\/InvalidKeyException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value\\Exception;\n\nuse Exception;\n\nfinal class InvalidKeyException extends Exception\n{\n    \/**\n     * @param mixed          $key\n     * @param Exception|null $previous\n     *\/\n    public function __construct($key, Exception $previous = null)\n    {\n        $this->key = $key;\n\n        parent::__construct(\n            sprintf(\n                'Key %s is not valid for this value.',\n                var_export($key, true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return mixed\n     *\/\n    public function key()\n    {\n        return $this->key;\n    }\n\n    private $key;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/Exception\/NonSequentialException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value\\Exception;\n\nuse Exception;\n\nfinal class NonSequentialException extends Exception\n{\n    \/**\n     * @param array          $indices\n     * @param Exception|null $previous\n     *\/\n    public function __construct(array $indices, Exception $previous = null)\n    {\n        $this->indices = $indices;\n\n        parent::__construct(\n            sprintf(\n                'Indices [%s] are non-sequential.',\n                implode(\n                    ',',\n                    array_map(\n                        $indices,\n                        function ($index) {\n                            return var_export($index, true)\n                        }\n                    )\n                )\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return array\n     *\/\n    public function indices()\n    {\n        return $this->indices;\n    }\n\n    private $indices;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/Exception\/UndefinedKeyException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value\\Exception;\n\nuse Exception;\n\nfinal class UndefinedKeyException extends Exception\n{\n    \/**\n     * @param mixed          $key\n     * @param Exception|null $previous\n     *\/\n    public function __construct($key, Exception $previous = null)\n    {\n        $this->key = $key;\n\n        parent::__construct(\n            sprintf('Undefined key %s.', var_export($key, true)),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return mixed\n     *\/\n    public function key()\n    {\n        return $this->key;\n    }\n\n    private $key;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/Exception\/UndefinedPropertyException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value\\Exception;\n\nuse Exception;\n\nfinal class UndefinedPropertyException extends Exception\n{\n    \/**\n     * @param string         $pointer\n     * @param Exception|null $previous\n     *\/\n    public function __construct($property, Exception $previous = null)\n    {\n        $this->property = $property;\n\n        parent::__construct(\n            sprintf('Undefined property: %s.', var_export($property, true)),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function property()\n    {\n        return $this->property;\n    }\n\n    private $property;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/Exception\/UnexpectedValueTypeException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value\\Exception;\n\nuse Exception;\n\nfinal class UnexpectedValueTypeException extends Exception\n{\n    \/**\n     * @param mixed          $value\n     * @param string         $expectedType\n     * @param Exception|null $previous\n     *\/\n    public function __construct(\n        $value,\n        $expectedType,\n        Exception $previous = null\n    ) {\n        $this->value = $value;\n        $this->expectedType = $expectedType;\n\n        parent::__construct(\n            sprintf(\n                'Unexpected value of type %s. Value must be of type %s.',\n                var_export(gettype($value), true),\n                $expectedType\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return mixed\n     *\/\n    public function value()\n    {\n        return $this->value;\n    }\n\n    \/**\n     * @return string\n     *\/\n    public function expectedType()\n    {\n        return $this->expectedType;\n    }\n\n    private $value;\n    private $expectedType;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/Exception\/UnsupportedValueTypeException.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value\\Exception;\n\nuse Exception;\n\nfinal class UnsupportedValueTypeException extends Exception\n{\n    \/**\n     * @param mixed          $value\n     * @param Exception|null $previous\n     *\/\n    public function __construct($value, Exception $previous = null)\n    {\n        $this->value = $value;\n\n        parent::__construct(\n            sprintf(\n                'Values of type %s are not supported.',\n                var_export(gettype($value), true)\n            ),\n            0,\n            $previous\n        );\n    }\n\n    \/**\n     * @return mixed\n     *\/\n    public function value()\n    {\n        return $this->value;\n    }\n\n    private $value;\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/Factory\/ValueFactory.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value\\Factory;\n\nuse DateTime;\nuse Eloquent\\Schemer\\Uri\\Uri;\nuse Eloquent\\Schemer\\Value;\nuse stdClass;\n\nclass ValueFactory implements ValueFactoryInterface\n{\n    \/**\n     * @param mixed &$value\n     *\n     * @return Value\\ValueInterface\n     *\/\n    public function create(&$value)\n    {\n        $this->clear();\n        $instance = $this->createValue($value);\n        $this->clear();\n\n        return $instance;\n    }\n\n    \/**\n     * @param mixed &$value\n     *\n     * @return Value\\ValueInterface\n     *\/\n    protected function createValue(&$value)\n    {\n        $instance = $this->instance($value);\n        if (null !== $instance) {\n            return $instance;\n        }\n\n        $variableType = gettype($value);\n        switch ($variableType) {\n            case 'boolean':\n                return new Value\\BooleanValue($value);\n            case 'integer':\n                return new Value\\IntegerValue($value);\n            case 'double':\n                return new Value\\FloatingPointValue($value);\n            case 'NULL':\n                return new Value\\NullValue;\n            case 'string':\n                return new Value\\StringValue($value);\n            case 'array':\n                return $this->createArray($value);\n            case 'object':\n                if ($value instanceof DateTime) {\n                    return new Value\\DateTimeValue($value);\n                }\n\n                return $this->createObject($value);\n        }\n\n        throw new Exception\\UnsupportedValueTypeException($value);\n    }\n\n    \/**\n     * @param array<integer,mixed> &$value\n     *\n     * @return Value\\ValueInterface\n     *\/\n    protected function createArray(array &$value)\n    {\n        $size = count($value);\n        if ($size > 0 && array_keys($value) !== range(0, $size - 1)) {\n            return $this->createObjectFromArray($value);\n        }\n\n        $instance = new Value\\ArrayValue;\n        $this->register($value, $instance);\n\n        foreach ($value as $key => &$subValue) {\n            $instance->set($key, $this->createValue($subValue));\n        }\n\n        return $instance;\n    }\n\n    \/**\n     * @param array &$value\n     *\n     * @return Value\\ValueInterface\n     *\/\n    protected function createObjectFromArray(array &$value)\n    {\n        if (array_key_exists('$ref', $value) && is_string($value['$ref'])) {\n            return $this->createReferenceFromArray($value);\n        }\n\n        $instance = new Value\\ObjectValue;\n        $this->register($value, $instance);\n\n        foreach ($value as $key => &$subValue) {\n            $instance->set($key, $this->createValue($subValue));\n        }\n\n        return $instance;\n    }\n\n    \/**\n     * @param array &$value\n     *\n     * @return Value\\ValueInterface\n     *\/\n    protected function createReferenceFromArray(array &$value)\n    {\n        $uri = new Uri($value['$ref']);\n        $mimeType = null;\n        if (array_key_exists('$type', $value) && is_string($value['$type'])) {\n            $mimeType = $value['$type'];\n        }\n\n        return $this->register(\n            $value,\n            new Value\\ReferenceValue($uri, $mimeType)\n        );\n    }\n\n    \/**\n     * @param stdClass &$value\n     *\n     * @return Value\\ValueInterface\n     *\/\n    protected function createObject(stdClass &$value)\n    {\n        if (property_exists($value, '$ref') && is_string($value->{'$ref'})) {\n            return $this->createReferenceFromObject($value);\n        }\n\n        $instance = new Value\\ObjectValue;\n        $this->register($value, $instance);\n\n        foreach (get_object_vars($value) as $property => $subValue) {\n            $realProperty = $property;\n            if ('_empty_' === $property) {\n                $property = '';\n            }\n\n            $instance->set($property, $this->createValue($value->$realProperty));\n        }\n\n        return $instance;\n    }\n\n    \/**\n     * @param stdClass &$value\n     *\n     * @return Value\\ValueInterface\n     *\/\n    protected function createReferenceFromObject(stdClass &$value)\n    {\n        $uri = new Uri($value->{'$ref'});\n        $mimeType = null;\n        if (property_exists($value, '$type') && is_string($value->{'$type'})) {\n            $mimeType = $value->{'$type'};\n        }\n\n        return $this->register(\n            $value,\n            new Value\\ReferenceValue($uri, $mimeType)\n        );\n    }\n\n    protected function clear()\n    {\n        $this->instances = array();\n    }\n\n    \/**\n     * @param mixed                &$value\n     * @param Value\\ValueInterface $instance\n     *\n     * @return Value\\ValueInterface\n     *\/\n    protected function register(&$value, $instance)\n    {\n        $this->instances[] = array(&$value, $instance);\n\n        return $instance;\n    }\n\n    \/**\n     * @param mixed &$value\n     *\n     * @return Value\\ValueInterface|null\n     *\/\n    protected function instance(&$value)\n    {\n        foreach ($this->instances as &$tuple) {\n            if ($tuple[0] === $value) {\n                if (\n                    is_array($value) &&\n                    !$this->isArrayReference($tuple[0], $value)\n                ) {\n                    continue;\n                }\n\n                return $tuple[1];\n            }\n        }\n\n        return null;\n    }\n\n    \/**\n     * @param array &$left\n     * @param array &$right\n     *\n     * @return boolean\n     *\/\n    protected function isArrayReference(array &$left, array &$right)\n    {\n        $id = uniqid('schemer-', true);\n        $left[$id] = true;\n        $isArrayReference = array_key_exists($id, $right);\n        unset($left[$id]);\n\n        return $isArrayReference;\n    }\n\n    private $instances;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,5,5,5,null,5,null,null,null,null,null,null,null,null,null,5,5,4,null,null,5,null,5,0,5,0,5,0,5,0,5,5,5,3,3,3,0,null,null,3,null,null,0,null,null,null,null,null,null,null,null,null,3,3,3,null,null,1,1,null,1,1,1,null,1,null,null,null,null,null,null,null,null,null,3,0,null,null,3,3,null,3,3,3,null,3,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,0,0,0,null,null,null,null,null,null,null,null,null,3,0,null,null,3,3,null,3,3,3,0,0,null,3,3,null,3,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,0,0,0,null,null,null,null,5,5,null,null,null,null,null,null,null,null,null,5,null,5,null,null,null,null,null,null,null,null,null,5,5,null,5,3,5,1,null,null,4,null,5,null,5,null,null,null,null,null,null,null,null,null,null,3,3,3,3,null,3,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/Factory\/ValueFactoryInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value\\Factory;\n\ninterface ValueFactoryInterface\n{\n    \/**\n     * @param mixed &$value\n     *\n     * @return \\Eloquent\\Schemer\\Value\\ValueInterface\n     *\/\n    public function create(&$value);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/FloatingPointValue.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\nclass FloatingPointValue extends AbstractConcreteValue implements NumberValueInterface\n{\n    \/**\n     * @param float $value\n     *\/\n    public function __construct($value)\n    {\n        if (!is_float($value)) {\n            throw new Exception\\UnexpectedValueTypeException($value, 'float');\n        }\n\n        parent::__construct($value);\n    }\n\n    \/**\n     * @return ValueType\n     *\/\n    public function valueType()\n    {\n        return ValueType::FLOATING_POINT_TYPE();\n    }\n\n    \/**\n     * @param Visitor\\ValueVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(Visitor\\ValueVisitorInterface $visitor)\n    {\n        return $visitor->visitFloatingPointValue($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Value\/IntegerValue.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\nclass IntegerValue extends AbstractConcreteValue implements NumberValueInterface\n{\n    \/**\n     * @param integer $value\n     *\/\n    public function __construct($value)\n    {\n        if (!is_int($value)) {\n            throw new Exception\\UnexpectedValueTypeException($value, 'integer');\n        }\n\n        parent::__construct($value);\n    }\n\n    \/**\n     * @return ValueType\n     *\/\n    public function valueType()\n    {\n        return ValueType::INTEGER_TYPE();\n    }\n\n    \/**\n     * @param Visitor\\ValueVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(Visitor\\ValueVisitorInterface $visitor)\n    {\n        return $visitor->visitIntegerValue($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Value\/NullValue.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\nclass NullValue extends AbstractConcreteValue\n{\n    public function __construct()\n    {\n        parent::__construct(null);\n    }\n\n    \/**\n     * @return ValueType\n     *\/\n    public function valueType()\n    {\n        return ValueType::NULL_TYPE();\n    }\n\n    \/**\n     * @param Visitor\\ValueVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(Visitor\\ValueVisitorInterface $visitor)\n    {\n        return $visitor->visitNullValue($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Value\/NumberValueInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\ninterface NumberValueInterface extends ValueInterface\n{\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/ObjectValue.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\nuse ArrayIterator;\nuse IteratorAggregate;\nuse stdClass;\n\nclass ObjectValue extends AbstractConcreteValue implements\n    ValueContainerInterface,\n    IteratorAggregate\n{\n    \/**\n     * @param stdClass|null $value\n     *\/\n    public function __construct(stdClass $value = null)\n    {\n        if (null === $value) {\n            $value = new stdClass;\n        }\n\n        foreach (get_object_vars($value) as $property => $subValue) {\n            if (!is_string($property)) {\n                throw new Exception\\InvalidKeyException($property);\n            }\n\n            $this->valueTypeCheck($subValue);\n        }\n\n        parent::__construct($value);\n    }\n\n    \/**\n     * @return ValueType\n     *\/\n    public function valueType()\n    {\n        return ValueType::OBJECT_TYPE();\n    }\n\n    \/**\n     * @return array<string,ValueInterface>\n     *\/\n    public function properties()\n    {\n        $properties = array();\n        foreach (get_object_vars($this->value) as $property => $value) {\n            if ('_empty_' === $property) {\n                $properties[''] = $value;\n            } else {\n                $properties[$property] = $value;\n            }\n        }\n\n        return $properties;\n    }\n\n    \/**\n     * @return array<integer,string>\n     *\/\n    public function keys()\n    {\n        return array_keys($this->properties());\n    }\n\n    \/**\n     * @return array<integer,ValueInterface>\n     *\/\n    public function values()\n    {\n        return array_values(get_object_vars($this->value));\n    }\n\n    \/**\n     * @return integer\n     *\/\n    public function count()\n    {\n        return count(get_object_vars($this->value));\n    }\n\n    \/**\n     * @param string         $property\n     * @param ValueInterface $value\n     *\/\n    public function set($property, ValueInterface $value)\n    {\n        if (!is_string($property)) {\n            throw new Exception\\InvalidKeyException($property);\n        }\n        if ('' === $property) {\n            $property = '_empty_';\n        }\n\n        $this->value->$property = $value;\n    }\n\n    \/**\n     * @param string $property\n     *\/\n    public function remove($property)\n    {\n        if ('' === $property) {\n            $property = '_empty_';\n        }\n\n        unset($this->value->$property);\n    }\n\n    \/**\n     * @param string $property\n     *\n     * @return boolean\n     *\/\n    public function has($property)\n    {\n        if ('' === $property) {\n            $property = '_empty_';\n        }\n\n        return property_exists($this->value, $property);\n    }\n\n    \/**\n     * @param string $property\n     *\n     * @return ValueInterface\n     *\/\n    public function get($property)\n    {\n        if ('' === $property) {\n            $property = '_empty_';\n        }\n        if (!$this->has($property)) {\n            throw new Exception\\UndefinedKeyException($property);\n        }\n\n        return $this->value->$property;\n    }\n\n    \/**\n     * @param string $property\n     *\n     * @return mixed\n     *\/\n    public function getRaw($property)\n    {\n        return $this->get($property)->value();\n    }\n\n    \/**\n     * @param string              $property\n     * @param ValueInterface|null $default\n     *\n     * @return ValueInterface|null\n     *\/\n    public function getDefault($property, ValueInterface $default = null)\n    {\n        if (!$this->has($property)) {\n            return $default;\n        }\n\n        return $this->value->$property;\n    }\n\n    \/**\n     * @param string $property\n     * @param mixed  $default\n     *\n     * @return mixed\n     *\/\n    public function getRawDefault($property, $default = null)\n    {\n        if (!$this->has($property)) {\n            return $default;\n        }\n\n        return $this->getRaw($property);\n    }\n\n    \/**\n     * @param Visitor\\ValueVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(Visitor\\ValueVisitorInterface $visitor)\n    {\n        return $visitor->visitObjectValue($this);\n    }\n\n    \/**\n     * @param string $property\n     *\n     * @return ValueInterface\n     *\/\n    public function __get($property)\n    {\n        return $this->get($property);\n    }\n\n    \/**\n     * @return ArrayIterator\n     *\/\n    public function getIterator()\n    {\n        return new ArrayIterator($this->properties());\n    }\n\n    \/**\n     * @param array<tuple<string,mixed>> &$valueMap\n     *\n     * @return mixed\n     *\/\n    protected function unwrap(array &$valueMap)\n    {\n        $id = spl_object_hash($this);\n\n        if (array_key_exists($id, $valueMap)) {\n            return $valueMap[$id];\n        }\n\n        $valueMap[$id] = new stdClass;\n        foreach (get_object_vars($this->value) as $property => $subValue) {\n            $valueMap[$id]->$property = $subValue->unwrap($valueMap);\n        }\n\n        return $valueMap[$id];\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,null,1,0,0,null,null,0,1,null,1,1,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,1,0,null,1,0,0,null,1,1,null,null,null,null,null,null,0,0,0,null,0,0,null,null,null,null,null,null,null,null,0,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,1,null,1,1,null,null,1,1,1,1,null,1,null,null]},{"name":"Eloquent\/Schemer\/Value\/PlaceholderValue.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\nclass PlaceholderValue implements ValueInterface\n{\n    \/**\n     * @param ValueInterface|null $innerValue\n     *\/\n    public function setInnerValue(ValueInterface $innerValue = null)\n    {\n        $this->innerValue = $innerValue;\n    }\n\n    \/**\n     * @return ValueInterface|null\n     *\/\n    public function innerValue()\n    {\n        return $this->innerValue;\n    }\n\n    \/**\n     * @param ValueInterface $value\n     *\n     * @return boolean\n     *\/\n    public function refersTo(ValueInterface $value)\n    {\n        if ($this->innerValue() === $value) {\n            return true;\n        }\n        if (\n            $this->innerValue() instanceof self &&\n            $this->innerValue()->innerValue() === $value\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    \/**\n     * @return boolean\n     *\/\n    public function isClosedRecursion()\n    {\n        return $this->refersTo($this);\n    }\n\n    \/**\n     * @param Visitor\\ValueVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(Visitor\\ValueVisitorInterface $visitor)\n    {\n        return $visitor->visitPlaceholderValue($this);\n    }\n\n    private $innerValue;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,0,0,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/ReferenceValue.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\nuse Eloquent\\Schemer\\Uri\\UriInterface;\n\nclass ReferenceValue implements ValueInterface\n{\n    \/**\n     * @param UriInterface $uri\n     * @param string|null  $mimeType\n     *\/\n    public function __construct(UriInterface $uri, $mimeType = null)\n    {\n        $this->uri = $uri;\n        $this->mimeType = $mimeType;\n    }\n\n    \/**\n     * @return UriInterface\n     *\/\n    public function uri()\n    {\n        return $this->uri;\n    }\n\n    \/**\n     * @return string|null\n     *\/\n    public function mimeType()\n    {\n        return $this->mimeType;\n    }\n\n    \/**\n     * @param Visitor\\ValueVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(Visitor\\ValueVisitorInterface $visitor)\n    {\n        return $visitor->visitReferenceValue($this);\n    }\n\n    private $uri;\n    private $mimeType;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/StringValue.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\nclass StringValue extends AbstractConcreteValue\n{\n    \/**\n     * @param string $value\n     *\/\n    public function __construct($value)\n    {\n        if (!is_string($value)) {\n            throw new Exception\\UnexpectedValueTypeException($value, 'string');\n        }\n\n        parent::__construct($value);\n    }\n\n    \/**\n     * @return ValueType\n     *\/\n    public function valueType()\n    {\n        return ValueType::STRING_TYPE();\n    }\n\n    \/**\n     * @param Visitor\\ValueVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(Visitor\\ValueVisitorInterface $visitor)\n    {\n        return $visitor->visitStringValue($this);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Value\/Transform\/AbstractValueTransform.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value\\Transform;\n\nuse Eloquent\\Schemer\\Pointer\\Pointer;\nuse Eloquent\\Schemer\\Pointer\\PointerInterface;\nuse Eloquent\\Schemer\\Value;\nuse stdClass;\n\nabstract class AbstractValueTransform extends Value\\Visitor\\AbstractValueVisitor implements\n    ValueTransformInterface\n{\n    public function __construct()\n    {\n        $this->clear();\n    }\n\n    \/**\n     * @param Value\\ValueInterface $value\n     *\n     * @return Value\\ValueInterface\n     *\/\n    public function transform(Value\\ValueInterface $value)\n    {\n        $this->initialize($value);\n        $value = $value->accept($this);\n        $this->clear();\n\n        return $value;\n    }\n\n    \/**\n     * @param Value\\ArrayValue $value\n     *\n     * @return Value\\ArrayValue\n     *\/\n    public function visitArrayValue(Value\\ArrayValue $value)\n    {\n        $subValues = array();\n        foreach ($value as $index => $subValue) {\n            $this->pushContextAtom(strval($index));\n            $subValues[$index] = $subValue->accept($this);\n            $this->popContextAtom();\n        }\n\n        return new Value\\ArrayValue($subValues);\n    }\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\n     * @return Value\\ObjectValue\n     *\/\n    public function visitObjectValue(Value\\ObjectValue $value)\n    {\n        $subValues = new stdClass;\n        foreach ($value as $property => $subValue) {\n            $this->pushContextAtom($property);\n            $subValues->$property = $subValue->accept($this);\n            $this->popContextAtom();\n        }\n\n        return new Value\\ObjectValue($subValues);\n    }\n\n    protected function initialize(Value\\ValueInterface $value)\n    {\n        $this->clear();\n        $this->setValue($value);\n    }\n\n    protected function clear()\n    {\n        $this->setContext(new Pointer);\n        $this->setValue(null);\n    }\n\n    \/**\n     * @param Value\\ValueInterface|null $value\n     *\/\n    protected function setValue(Value\\ValueInterface $value = null)\n    {\n        $this->value = $value;\n    }\n\n    \/**\n     * @return ValueInterface|null\n     *\/\n    protected function value()\n    {\n        return $this->value;\n    }\n\n    \/**\n     * @param PointerInterface $context\n     *\/\n    protected function setContext(PointerInterface $context)\n    {\n        $this->context = $context;\n    }\n\n    \/**\n     * @param string $atom\n     *\/\n    protected function pushContextAtom($atom)\n    {\n        $this->setContext($this->context()->joinAtoms($atom));\n    }\n\n    protected function popContextAtom()\n    {\n        $this->setContext($this->context()->parent());\n    }\n\n    \/**\n     * @return PointerInterface\n     *\/\n    protected function context()\n    {\n        return $this->context;\n    }\n\n    private $value;\n    private $context;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,null,null,null,null,0,0,0,null,null,null,0,0,0,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,0,0,null,null,null,0,0,null,null,null,null,null,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/Transform\/PlaceholderUnwrapTransform.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value\\Transform;\n\nuse Eloquent\\Schemer\\Value;\n\nclass PlaceholderUnwrapTransform extends AbstractValueTransform\n{\n    \/**\n     * @param Value\\ArrayValue $value\n     *\n     * @return Value\\ArrayValue\n     *\/\n    public function visitArrayValue(Value\\ArrayValue $value)\n    {\n        return $this->transformValueContainer($value);\n    }\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\n     * @return Value\\ObjectValue\n     *\/\n    public function visitObjectValue(Value\\ObjectValue $value)\n    {\n        return $this->transformValueContainer($value);\n    }\n\n    \/**\n     * @param Value\\PlaceholderValue $value\n     *\n     * @return Value\\ValueInterface\n     *\/\n    public function visitPlaceholderValue(Value\\PlaceholderValue $value)\n    {\n        if ($value->isClosedRecursion()) {\n            $nullValue = new Value\\NullValue;\n            $value->innerValue()->setInnerValue($nullValue);\n\n            return $nullValue;\n        }\n\n        while ($value instanceof Value\\PlaceholderValue) {\n            $value = $value->innerValue();\n        }\n\n        return $value;\n    }\n\n    \/**\n     * @param Value\\ValueContainerInterface $value\n     *\n     * @return Value\\ValueContainerInterface\n     *\/\n    protected function transformValueContainer(Value\\ValueContainerInterface $value)\n    {\n        if ($this->isVisited($value)) {\n            return $value;\n        }\n        $this->setVisited($value);\n\n        foreach ($value->keys() as $key) {\n            if ($value->get($key) instanceof Value\\PlaceholderValue) {\n                $value->set($key, $value->get($key)->accept($this));\n            }\n            $value->set($key, $value->get($key)->accept($this));\n        }\n\n        return $value;\n    }\n\n    protected function clear()\n    {\n        parent::clear();\n\n        $this->visited = array();\n    }\n\n    \/**\n     * @param Value\\ValueInterface $value\n     *\/\n    protected function setVisited(Value\\ValueInterface $value)\n    {\n        $this->visited[spl_object_hash($value)] = true;\n    }\n\n    \/**\n     * @param Value\\ValueInterface $value\n     *\n     * @return boolean\n     *\/\n    protected function isVisited(Value\\ValueInterface $value)\n    {\n        return array_key_exists(spl_object_hash($value), $this->visited);\n    }\n\n    private $reflector;\n    private $visited;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,0,0,null,0,null,null,0,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,null,0,null,0,0,0,0,0,0,null,0,null,null,null,null,0,null,0,0,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/Transform\/ValueTransformInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value\\Transform;\n\nuse Eloquent\\Schemer\\Value\\ValueInterface;\n\ninterface ValueTransformInterface\n{\n    \/**\n     * @param ValueInterface $value\n     *\n     * @return ValueInterface\n     *\/\n    public function transform(ValueInterface $value);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/ValueContainerInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\nuse Countable;\n\ninterface ValueContainerInterface extends ValueInterface, Countable\n{\n    \/**\n     * @return array<integer,integer|string>\n     *\/\n    public function keys();\n\n    \/**\n     * @return array<integer,ValueInterface>\n     *\/\n    public function values();\n\n    \/**\n     * @param integer|string $key\n     * @param ValueInterface $value\n     *\/\n    public function set($key, ValueInterface $value);\n\n    \/**\n     * @param integer|string $key\n     *\/\n    public function remove($key);\n\n    \/**\n     * @param integer|string $key\n     *\n     * @return boolean\n     *\/\n    public function has($key);\n\n    \/**\n     * @param integer|string $key\n     *\n     * @return ValueInterface\n     *\/\n    public function get($key);\n\n    \/**\n     * @param integer|string $key\n     *\n     * @return mixed\n     *\/\n    public function getRaw($key);\n\n    \/**\n     * @param integer|string      $key\n     * @param ValueInterface|null $default\n     *\n     * @return ValueInterface|null\n     *\/\n    public function getDefault($key, ValueInterface $default = null);\n\n    \/**\n     * @param integer|string $key\n     * @param mixed          $default\n     *\n     * @return mixed\n     *\/\n    public function getRawDefault($key, $default = null);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/ValueInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\ninterface ValueInterface\n{\n    \/**\n     * @param Visitor\\ValueVisitorInterface $visitor\n     *\n     * @return mixed\n     *\/\n    public function accept(Visitor\\ValueVisitorInterface $visitor);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/ValueType.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value;\n\nuse Eloquent\\Enumeration\\Enumeration;\n\nfinal class ValueType extends Enumeration\n{\n    const ARRAY_TYPE = 'array';\n    const BOOLEAN_TYPE = 'boolean';\n    const DATE_TIME_TYPE = 'date-time';\n    const FLOATING_POINT_TYPE = 'float';\n    const INTEGER_TYPE = 'integer';\n    const NULL_TYPE = 'null';\n    const NUMBER_TYPE = 'number';\n    const OBJECT_TYPE = 'object';\n    const STRING_TYPE = 'string';\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"Eloquent\/Schemer\/Value\/Visitor\/AbstractValueVisitor.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value\\Visitor;\n\nuse Eloquent\\Schemer\\Value;\n\nabstract class AbstractValueVisitor implements ValueVisitorInterface\n{\n    \/**\n     * @param Value\\ArrayValue $value\n     *\n     * @return Value\\ArrayValue\n     *\/\n    public function visitArrayValue(Value\\ArrayValue $value)\n    {\n        return $value;\n    }\n\n    \/**\n     * @param Value\\BooleanValue $value\n     *\n     * @return Value\\BooleanValue\n     *\/\n    public function visitBooleanValue(Value\\BooleanValue $value)\n    {\n        return $value;\n    }\n\n    \/**\n     * @param Value\\FloatingPointValue $value\n     *\n     * @return Value\\FloatingPointValue\n     *\/\n    public function visitFloatingPointValue(Value\\FloatingPointValue $value)\n    {\n        return $value;\n    }\n\n    \/**\n     * @param Value\\IntegerValue $value\n     *\n     * @return Value\\IntegerValue\n     *\/\n    public function visitIntegerValue(Value\\IntegerValue $value)\n    {\n        return $value;\n    }\n\n    \/**\n     * @param Value\\NullValue $value\n     *\n     * @return Value\\NullValue\n     *\/\n    public function visitNullValue(Value\\NullValue $value)\n    {\n        return $value;\n    }\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\n     * @return Value\\ObjectValue\n     *\/\n    public function visitObjectValue(Value\\ObjectValue $value)\n    {\n        return $value;\n    }\n\n    \/**\n     * @param Value\\StringValue $value\n     *\n     * @return Value\\StringValue\n     *\/\n    public function visitStringValue(Value\\StringValue $value)\n    {\n        return $value;\n    }\n\n    \/**\n     * @param Value\\DateTimeValue $value\n     *\n     * @return Value\\DateTimeValue\n     *\/\n    public function visitDateTimeValue(Value\\DateTimeValue $value)\n    {\n        return $value;\n    }\n\n    \/**\n     * @param Value\\ReferenceValue $value\n     *\n     * @return Value\\ReferenceValue\n     *\/\n    public function visitReferenceValue(Value\\ReferenceValue $value)\n    {\n        return $value;\n    }\n\n    \/**\n     * @param Value\\PlaceholderValue $value\n     *\n     * @return Value\\PlaceholderValue\n     *\/\n    public function visitPlaceholderValue(Value\\PlaceholderValue $value)\n    {\n        return $value;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null]},{"name":"Eloquent\/Schemer\/Value\/Visitor\/ValueVisitorInterface.php","source":"<?php\n\n\/*\n * This file is part of the Schemer package.\n *\n * Copyright \u00a9 2013 Erin Millard\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\/\n\nnamespace Eloquent\\Schemer\\Value\\Visitor;\n\nuse Eloquent\\Schemer\\Value;\n\ninterface ValueVisitorInterface\n{\n    \/**\n     * @param Value\\ArrayValue $value\n     *\n     * @return mixed\n     *\/\n    public function visitArrayValue(Value\\ArrayValue $value);\n\n    \/**\n     * @param Value\\BooleanValue $value\n     *\n     * @return mixed\n     *\/\n    public function visitBooleanValue(Value\\BooleanValue $value);\n\n    \/**\n     * @param Value\\FloatingPointValue $value\n     *\n     * @return mixed\n     *\/\n    public function visitFloatingPointValue(Value\\FloatingPointValue $value);\n\n    \/**\n     * @param Value\\IntegerValue $value\n     *\n     * @return mixed\n     *\/\n    public function visitIntegerValue(Value\\IntegerValue $value);\n\n    \/**\n     * @param Value\\NullValue $value\n     *\n     * @return mixed\n     *\/\n    public function visitNullValue(Value\\NullValue $value);\n\n    \/**\n     * @param Value\\ObjectValue $value\n     *\n     * @return mixed\n     *\/\n    public function visitObjectValue(Value\\ObjectValue $value);\n\n    \/**\n     * @param Value\\StringValue $value\n     *\n     * @return mixed\n     *\/\n    public function visitStringValue(Value\\StringValue $value);\n\n    \/**\n     * @param Value\\DateTimeValue $value\n     *\n     * @return mixed\n     *\/\n    public function visitDateTimeValue(Value\\DateTimeValue $value);\n\n    \/**\n     * @param Value\\ReferenceValue $value\n     *\n     * @return mixed\n     *\/\n    public function visitReferenceValue(Value\\ReferenceValue $value);\n\n    \/**\n     * @param Value\\PlaceholderValue $value\n     *\n     * @return mixed\n     *\/\n    public function visitPlaceholderValue(Value\\PlaceholderValue $value);\n}","coverage":[null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]}]}